/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package edu.berkeley.cs.amplab.carat.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.io.Serializable;
import java.nio.ByteBuffer;
import java.util.Arrays;

public class Sample implements org.apache.thrift.TBase<Sample, Sample._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Sample");

  private static final org.apache.thrift.protocol.TField UU_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("uuId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("timestamp", org.apache.thrift.protocol.TType.DOUBLE, (short)2);
  private static final org.apache.thrift.protocol.TField PI_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("piList", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField BATTERY_STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("batteryState", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField BATTERY_LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("batteryLevel", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField MEMORY_WIRED_FIELD_DESC = new org.apache.thrift.protocol.TField("memoryWired", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField MEMORY_ACTIVE_FIELD_DESC = new org.apache.thrift.protocol.TField("memoryActive", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField MEMORY_INACTIVE_FIELD_DESC = new org.apache.thrift.protocol.TField("memoryInactive", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField MEMORY_FREE_FIELD_DESC = new org.apache.thrift.protocol.TField("memoryFree", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField MEMORY_USER_FIELD_DESC = new org.apache.thrift.protocol.TField("memoryUser", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField TRIGGERED_BY_FIELD_DESC = new org.apache.thrift.protocol.TField("triggeredBy", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField NETWORK_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("networkStatus", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField DISTANCE_TRAVELED_FIELD_DESC = new org.apache.thrift.protocol.TField("distanceTraveled", org.apache.thrift.protocol.TType.DOUBLE, (short)13);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SampleStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SampleTupleSchemeFactory());
  }

  public String uuId; // required
  public double timestamp; // optional
  public List<ProcessInfo> piList; // optional
  public String batteryState; // optional
  public double batteryLevel; // optional
  public int memoryWired; // optional
  public int memoryActive; // optional
  public int memoryInactive; // optional
  public int memoryFree; // optional
  public int memoryUser; // optional
  public String triggeredBy; // optional
  public String networkStatus; // optional
  public double distanceTraveled; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    UU_ID((short)1, "uuId"),
    TIMESTAMP((short)2, "timestamp"),
    PI_LIST((short)3, "piList"),
    BATTERY_STATE((short)4, "batteryState"),
    BATTERY_LEVEL((short)5, "batteryLevel"),
    MEMORY_WIRED((short)6, "memoryWired"),
    MEMORY_ACTIVE((short)7, "memoryActive"),
    MEMORY_INACTIVE((short)8, "memoryInactive"),
    MEMORY_FREE((short)9, "memoryFree"),
    MEMORY_USER((short)10, "memoryUser"),
    TRIGGERED_BY((short)11, "triggeredBy"),
    NETWORK_STATUS((short)12, "networkStatus"),
    DISTANCE_TRAVELED((short)13, "distanceTraveled");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // UU_ID
          return UU_ID;
        case 2: // TIMESTAMP
          return TIMESTAMP;
        case 3: // PI_LIST
          return PI_LIST;
        case 4: // BATTERY_STATE
          return BATTERY_STATE;
        case 5: // BATTERY_LEVEL
          return BATTERY_LEVEL;
        case 6: // MEMORY_WIRED
          return MEMORY_WIRED;
        case 7: // MEMORY_ACTIVE
          return MEMORY_ACTIVE;
        case 8: // MEMORY_INACTIVE
          return MEMORY_INACTIVE;
        case 9: // MEMORY_FREE
          return MEMORY_FREE;
        case 10: // MEMORY_USER
          return MEMORY_USER;
        case 11: // TRIGGERED_BY
          return TRIGGERED_BY;
        case 12: // NETWORK_STATUS
          return NETWORK_STATUS;
        case 13: // DISTANCE_TRAVELED
          return DISTANCE_TRAVELED;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TIMESTAMP_ISSET_ID = 0;
  private static final int __BATTERYLEVEL_ISSET_ID = 1;
  private static final int __MEMORYWIRED_ISSET_ID = 2;
  private static final int __MEMORYACTIVE_ISSET_ID = 3;
  private static final int __MEMORYINACTIVE_ISSET_ID = 4;
  private static final int __MEMORYFREE_ISSET_ID = 5;
  private static final int __MEMORYUSER_ISSET_ID = 6;
  private static final int __DISTANCETRAVELED_ISSET_ID = 7;
  private BitSet __isset_bit_vector = new BitSet(8);
  private _Fields optionals[] = {_Fields.TIMESTAMP,_Fields.PI_LIST,_Fields.BATTERY_STATE,_Fields.BATTERY_LEVEL,_Fields.MEMORY_WIRED,_Fields.MEMORY_ACTIVE,_Fields.MEMORY_INACTIVE,_Fields.MEMORY_FREE,_Fields.MEMORY_USER,_Fields.TRIGGERED_BY,_Fields.NETWORK_STATUS,_Fields.DISTANCE_TRAVELED};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.UU_ID, new org.apache.thrift.meta_data.FieldMetaData("uuId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("timestamp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PI_LIST, new org.apache.thrift.meta_data.FieldMetaData("piList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.LIST        , "ProcessInfoList")));
    tmpMap.put(_Fields.BATTERY_STATE, new org.apache.thrift.meta_data.FieldMetaData("batteryState", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BATTERY_LEVEL, new org.apache.thrift.meta_data.FieldMetaData("batteryLevel", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.MEMORY_WIRED, new org.apache.thrift.meta_data.FieldMetaData("memoryWired", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MEMORY_ACTIVE, new org.apache.thrift.meta_data.FieldMetaData("memoryActive", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MEMORY_INACTIVE, new org.apache.thrift.meta_data.FieldMetaData("memoryInactive", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MEMORY_FREE, new org.apache.thrift.meta_data.FieldMetaData("memoryFree", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MEMORY_USER, new org.apache.thrift.meta_data.FieldMetaData("memoryUser", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TRIGGERED_BY, new org.apache.thrift.meta_data.FieldMetaData("triggeredBy", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NETWORK_STATUS, new org.apache.thrift.meta_data.FieldMetaData("networkStatus", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DISTANCE_TRAVELED, new org.apache.thrift.meta_data.FieldMetaData("distanceTraveled", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Sample.class, metaDataMap);
  }

  public Sample() {
  }

  public Sample(
    String uuId)
  {
    this();
    this.uuId = uuId;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Sample(Sample other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetUuId()) {
      this.uuId = other.uuId;
    }
    this.timestamp = other.timestamp;
    if (other.isSetPiList()) {
      this.piList = other.piList;
    }
    if (other.isSetBatteryState()) {
      this.batteryState = other.batteryState;
    }
    this.batteryLevel = other.batteryLevel;
    this.memoryWired = other.memoryWired;
    this.memoryActive = other.memoryActive;
    this.memoryInactive = other.memoryInactive;
    this.memoryFree = other.memoryFree;
    this.memoryUser = other.memoryUser;
    if (other.isSetTriggeredBy()) {
      this.triggeredBy = other.triggeredBy;
    }
    if (other.isSetNetworkStatus()) {
      this.networkStatus = other.networkStatus;
    }
    this.distanceTraveled = other.distanceTraveled;
  }

  public Sample deepCopy() {
    return new Sample(this);
  }

  @Override
  public void clear() {
    this.uuId = null;
    setTimestampIsSet(false);
    this.timestamp = 0.0;
    this.piList = null;
    this.batteryState = null;
    setBatteryLevelIsSet(false);
    this.batteryLevel = 0.0;
    setMemoryWiredIsSet(false);
    this.memoryWired = 0;
    setMemoryActiveIsSet(false);
    this.memoryActive = 0;
    setMemoryInactiveIsSet(false);
    this.memoryInactive = 0;
    setMemoryFreeIsSet(false);
    this.memoryFree = 0;
    setMemoryUserIsSet(false);
    this.memoryUser = 0;
    this.triggeredBy = null;
    this.networkStatus = null;
    setDistanceTraveledIsSet(false);
    this.distanceTraveled = 0.0;
  }

  public String getUuId() {
    return this.uuId;
  }

  public Sample setUuId(String uuId) {
    this.uuId = uuId;
    return this;
  }

  public void unsetUuId() {
    this.uuId = null;
  }

  /** Returns true if field uuId is set (has been assigned a value) and false otherwise */
  public boolean isSetUuId() {
    return this.uuId != null;
  }

  public void setUuIdIsSet(boolean value) {
    if (!value) {
      this.uuId = null;
    }
  }

  public double getTimestamp() {
    return this.timestamp;
  }

  public Sample setTimestamp(double timestamp) {
    this.timestamp = timestamp;
    setTimestampIsSet(true);
    return this;
  }

  public void unsetTimestamp() {
    __isset_bit_vector.clear(__TIMESTAMP_ISSET_ID);
  }

  /** Returns true if field timestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetTimestamp() {
    return __isset_bit_vector.get(__TIMESTAMP_ISSET_ID);
  }

  public void setTimestampIsSet(boolean value) {
    __isset_bit_vector.set(__TIMESTAMP_ISSET_ID, value);
  }

  public int getPiListSize() {
    return (this.piList == null) ? 0 : this.piList.size();
  }

  public java.util.Iterator<ProcessInfo> getPiListIterator() {
    return (this.piList == null) ? null : this.piList.iterator();
  }

  public void addToPiList(ProcessInfo elem) {
    if (this.piList == null) {
      this.piList = new ArrayList<ProcessInfo>();
    }
    this.piList.add(elem);
  }

  public List<ProcessInfo> getPiList() {
    return this.piList;
  }

  public Sample setPiList(List<ProcessInfo> piList) {
    this.piList = piList;
    return this;
  }

  public void unsetPiList() {
    this.piList = null;
  }

  /** Returns true if field piList is set (has been assigned a value) and false otherwise */
  public boolean isSetPiList() {
    return this.piList != null;
  }

  public void setPiListIsSet(boolean value) {
    if (!value) {
      this.piList = null;
    }
  }

  public String getBatteryState() {
    return this.batteryState;
  }

  public Sample setBatteryState(String batteryState) {
    this.batteryState = batteryState;
    return this;
  }

  public void unsetBatteryState() {
    this.batteryState = null;
  }

  /** Returns true if field batteryState is set (has been assigned a value) and false otherwise */
  public boolean isSetBatteryState() {
    return this.batteryState != null;
  }

  public void setBatteryStateIsSet(boolean value) {
    if (!value) {
      this.batteryState = null;
    }
  }

  public double getBatteryLevel() {
    return this.batteryLevel;
  }

  public Sample setBatteryLevel(double batteryLevel) {
    this.batteryLevel = batteryLevel;
    setBatteryLevelIsSet(true);
    return this;
  }

  public void unsetBatteryLevel() {
    __isset_bit_vector.clear(__BATTERYLEVEL_ISSET_ID);
  }

  /** Returns true if field batteryLevel is set (has been assigned a value) and false otherwise */
  public boolean isSetBatteryLevel() {
    return __isset_bit_vector.get(__BATTERYLEVEL_ISSET_ID);
  }

  public void setBatteryLevelIsSet(boolean value) {
    __isset_bit_vector.set(__BATTERYLEVEL_ISSET_ID, value);
  }

  public int getMemoryWired() {
    return this.memoryWired;
  }

  public Sample setMemoryWired(int memoryWired) {
    this.memoryWired = memoryWired;
    setMemoryWiredIsSet(true);
    return this;
  }

  public void unsetMemoryWired() {
    __isset_bit_vector.clear(__MEMORYWIRED_ISSET_ID);
  }

  /** Returns true if field memoryWired is set (has been assigned a value) and false otherwise */
  public boolean isSetMemoryWired() {
    return __isset_bit_vector.get(__MEMORYWIRED_ISSET_ID);
  }

  public void setMemoryWiredIsSet(boolean value) {
    __isset_bit_vector.set(__MEMORYWIRED_ISSET_ID, value);
  }

  public int getMemoryActive() {
    return this.memoryActive;
  }

  public Sample setMemoryActive(int memoryActive) {
    this.memoryActive = memoryActive;
    setMemoryActiveIsSet(true);
    return this;
  }

  public void unsetMemoryActive() {
    __isset_bit_vector.clear(__MEMORYACTIVE_ISSET_ID);
  }

  /** Returns true if field memoryActive is set (has been assigned a value) and false otherwise */
  public boolean isSetMemoryActive() {
    return __isset_bit_vector.get(__MEMORYACTIVE_ISSET_ID);
  }

  public void setMemoryActiveIsSet(boolean value) {
    __isset_bit_vector.set(__MEMORYACTIVE_ISSET_ID, value);
  }

  public int getMemoryInactive() {
    return this.memoryInactive;
  }

  public Sample setMemoryInactive(int memoryInactive) {
    this.memoryInactive = memoryInactive;
    setMemoryInactiveIsSet(true);
    return this;
  }

  public void unsetMemoryInactive() {
    __isset_bit_vector.clear(__MEMORYINACTIVE_ISSET_ID);
  }

  /** Returns true if field memoryInactive is set (has been assigned a value) and false otherwise */
  public boolean isSetMemoryInactive() {
    return __isset_bit_vector.get(__MEMORYINACTIVE_ISSET_ID);
  }

  public void setMemoryInactiveIsSet(boolean value) {
    __isset_bit_vector.set(__MEMORYINACTIVE_ISSET_ID, value);
  }

  public int getMemoryFree() {
    return this.memoryFree;
  }

  public Sample setMemoryFree(int memoryFree) {
    this.memoryFree = memoryFree;
    setMemoryFreeIsSet(true);
    return this;
  }

  public void unsetMemoryFree() {
    __isset_bit_vector.clear(__MEMORYFREE_ISSET_ID);
  }

  /** Returns true if field memoryFree is set (has been assigned a value) and false otherwise */
  public boolean isSetMemoryFree() {
    return __isset_bit_vector.get(__MEMORYFREE_ISSET_ID);
  }

  public void setMemoryFreeIsSet(boolean value) {
    __isset_bit_vector.set(__MEMORYFREE_ISSET_ID, value);
  }

  public int getMemoryUser() {
    return this.memoryUser;
  }

  public Sample setMemoryUser(int memoryUser) {
    this.memoryUser = memoryUser;
    setMemoryUserIsSet(true);
    return this;
  }

  public void unsetMemoryUser() {
    __isset_bit_vector.clear(__MEMORYUSER_ISSET_ID);
  }

  /** Returns true if field memoryUser is set (has been assigned a value) and false otherwise */
  public boolean isSetMemoryUser() {
    return __isset_bit_vector.get(__MEMORYUSER_ISSET_ID);
  }

  public void setMemoryUserIsSet(boolean value) {
    __isset_bit_vector.set(__MEMORYUSER_ISSET_ID, value);
  }

  public String getTriggeredBy() {
    return this.triggeredBy;
  }

  public Sample setTriggeredBy(String triggeredBy) {
    this.triggeredBy = triggeredBy;
    return this;
  }

  public void unsetTriggeredBy() {
    this.triggeredBy = null;
  }

  /** Returns true if field triggeredBy is set (has been assigned a value) and false otherwise */
  public boolean isSetTriggeredBy() {
    return this.triggeredBy != null;
  }

  public void setTriggeredByIsSet(boolean value) {
    if (!value) {
      this.triggeredBy = null;
    }
  }

  public String getNetworkStatus() {
    return this.networkStatus;
  }

  public Sample setNetworkStatus(String networkStatus) {
    this.networkStatus = networkStatus;
    return this;
  }

  public void unsetNetworkStatus() {
    this.networkStatus = null;
  }

  /** Returns true if field networkStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetNetworkStatus() {
    return this.networkStatus != null;
  }

  public void setNetworkStatusIsSet(boolean value) {
    if (!value) {
      this.networkStatus = null;
    }
  }

  public double getDistanceTraveled() {
    return this.distanceTraveled;
  }

  public Sample setDistanceTraveled(double distanceTraveled) {
    this.distanceTraveled = distanceTraveled;
    setDistanceTraveledIsSet(true);
    return this;
  }

  public void unsetDistanceTraveled() {
    __isset_bit_vector.clear(__DISTANCETRAVELED_ISSET_ID);
  }

  /** Returns true if field distanceTraveled is set (has been assigned a value) and false otherwise */
  public boolean isSetDistanceTraveled() {
    return __isset_bit_vector.get(__DISTANCETRAVELED_ISSET_ID);
  }

  public void setDistanceTraveledIsSet(boolean value) {
    __isset_bit_vector.set(__DISTANCETRAVELED_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case UU_ID:
      if (value == null) {
        unsetUuId();
      } else {
        setUuId((String)value);
      }
      break;

    case TIMESTAMP:
      if (value == null) {
        unsetTimestamp();
      } else {
        setTimestamp((Double)value);
      }
      break;

    case PI_LIST:
      if (value == null) {
        unsetPiList();
      } else {
        setPiList((List<ProcessInfo>)value);
      }
      break;

    case BATTERY_STATE:
      if (value == null) {
        unsetBatteryState();
      } else {
        setBatteryState((String)value);
      }
      break;

    case BATTERY_LEVEL:
      if (value == null) {
        unsetBatteryLevel();
      } else {
        setBatteryLevel((Double)value);
      }
      break;

    case MEMORY_WIRED:
      if (value == null) {
        unsetMemoryWired();
      } else {
        setMemoryWired((Integer)value);
      }
      break;

    case MEMORY_ACTIVE:
      if (value == null) {
        unsetMemoryActive();
      } else {
        setMemoryActive((Integer)value);
      }
      break;

    case MEMORY_INACTIVE:
      if (value == null) {
        unsetMemoryInactive();
      } else {
        setMemoryInactive((Integer)value);
      }
      break;

    case MEMORY_FREE:
      if (value == null) {
        unsetMemoryFree();
      } else {
        setMemoryFree((Integer)value);
      }
      break;

    case MEMORY_USER:
      if (value == null) {
        unsetMemoryUser();
      } else {
        setMemoryUser((Integer)value);
      }
      break;

    case TRIGGERED_BY:
      if (value == null) {
        unsetTriggeredBy();
      } else {
        setTriggeredBy((String)value);
      }
      break;

    case NETWORK_STATUS:
      if (value == null) {
        unsetNetworkStatus();
      } else {
        setNetworkStatus((String)value);
      }
      break;

    case DISTANCE_TRAVELED:
      if (value == null) {
        unsetDistanceTraveled();
      } else {
        setDistanceTraveled((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case UU_ID:
      return getUuId();

    case TIMESTAMP:
      return Double.valueOf(getTimestamp());

    case PI_LIST:
      return getPiList();

    case BATTERY_STATE:
      return getBatteryState();

    case BATTERY_LEVEL:
      return Double.valueOf(getBatteryLevel());

    case MEMORY_WIRED:
      return Integer.valueOf(getMemoryWired());

    case MEMORY_ACTIVE:
      return Integer.valueOf(getMemoryActive());

    case MEMORY_INACTIVE:
      return Integer.valueOf(getMemoryInactive());

    case MEMORY_FREE:
      return Integer.valueOf(getMemoryFree());

    case MEMORY_USER:
      return Integer.valueOf(getMemoryUser());

    case TRIGGERED_BY:
      return getTriggeredBy();

    case NETWORK_STATUS:
      return getNetworkStatus();

    case DISTANCE_TRAVELED:
      return Double.valueOf(getDistanceTraveled());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case UU_ID:
      return isSetUuId();
    case TIMESTAMP:
      return isSetTimestamp();
    case PI_LIST:
      return isSetPiList();
    case BATTERY_STATE:
      return isSetBatteryState();
    case BATTERY_LEVEL:
      return isSetBatteryLevel();
    case MEMORY_WIRED:
      return isSetMemoryWired();
    case MEMORY_ACTIVE:
      return isSetMemoryActive();
    case MEMORY_INACTIVE:
      return isSetMemoryInactive();
    case MEMORY_FREE:
      return isSetMemoryFree();
    case MEMORY_USER:
      return isSetMemoryUser();
    case TRIGGERED_BY:
      return isSetTriggeredBy();
    case NETWORK_STATUS:
      return isSetNetworkStatus();
    case DISTANCE_TRAVELED:
      return isSetDistanceTraveled();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Sample)
      return this.equals((Sample)that);
    return false;
  }

  public boolean equals(Sample that) {
    if (that == null)
      return false;

    boolean this_present_uuId = true && this.isSetUuId();
    boolean that_present_uuId = true && that.isSetUuId();
    if (this_present_uuId || that_present_uuId) {
      if (!(this_present_uuId && that_present_uuId))
        return false;
      if (!this.uuId.equals(that.uuId))
        return false;
    }

    boolean this_present_timestamp = true && this.isSetTimestamp();
    boolean that_present_timestamp = true && that.isSetTimestamp();
    if (this_present_timestamp || that_present_timestamp) {
      if (!(this_present_timestamp && that_present_timestamp))
        return false;
      if (this.timestamp != that.timestamp)
        return false;
    }

    boolean this_present_piList = true && this.isSetPiList();
    boolean that_present_piList = true && that.isSetPiList();
    if (this_present_piList || that_present_piList) {
      if (!(this_present_piList && that_present_piList))
        return false;
      if (!this.piList.equals(that.piList))
        return false;
    }

    boolean this_present_batteryState = true && this.isSetBatteryState();
    boolean that_present_batteryState = true && that.isSetBatteryState();
    if (this_present_batteryState || that_present_batteryState) {
      if (!(this_present_batteryState && that_present_batteryState))
        return false;
      if (!this.batteryState.equals(that.batteryState))
        return false;
    }

    boolean this_present_batteryLevel = true && this.isSetBatteryLevel();
    boolean that_present_batteryLevel = true && that.isSetBatteryLevel();
    if (this_present_batteryLevel || that_present_batteryLevel) {
      if (!(this_present_batteryLevel && that_present_batteryLevel))
        return false;
      if (this.batteryLevel != that.batteryLevel)
        return false;
    }

    boolean this_present_memoryWired = true && this.isSetMemoryWired();
    boolean that_present_memoryWired = true && that.isSetMemoryWired();
    if (this_present_memoryWired || that_present_memoryWired) {
      if (!(this_present_memoryWired && that_present_memoryWired))
        return false;
      if (this.memoryWired != that.memoryWired)
        return false;
    }

    boolean this_present_memoryActive = true && this.isSetMemoryActive();
    boolean that_present_memoryActive = true && that.isSetMemoryActive();
    if (this_present_memoryActive || that_present_memoryActive) {
      if (!(this_present_memoryActive && that_present_memoryActive))
        return false;
      if (this.memoryActive != that.memoryActive)
        return false;
    }

    boolean this_present_memoryInactive = true && this.isSetMemoryInactive();
    boolean that_present_memoryInactive = true && that.isSetMemoryInactive();
    if (this_present_memoryInactive || that_present_memoryInactive) {
      if (!(this_present_memoryInactive && that_present_memoryInactive))
        return false;
      if (this.memoryInactive != that.memoryInactive)
        return false;
    }

    boolean this_present_memoryFree = true && this.isSetMemoryFree();
    boolean that_present_memoryFree = true && that.isSetMemoryFree();
    if (this_present_memoryFree || that_present_memoryFree) {
      if (!(this_present_memoryFree && that_present_memoryFree))
        return false;
      if (this.memoryFree != that.memoryFree)
        return false;
    }

    boolean this_present_memoryUser = true && this.isSetMemoryUser();
    boolean that_present_memoryUser = true && that.isSetMemoryUser();
    if (this_present_memoryUser || that_present_memoryUser) {
      if (!(this_present_memoryUser && that_present_memoryUser))
        return false;
      if (this.memoryUser != that.memoryUser)
        return false;
    }

    boolean this_present_triggeredBy = true && this.isSetTriggeredBy();
    boolean that_present_triggeredBy = true && that.isSetTriggeredBy();
    if (this_present_triggeredBy || that_present_triggeredBy) {
      if (!(this_present_triggeredBy && that_present_triggeredBy))
        return false;
      if (!this.triggeredBy.equals(that.triggeredBy))
        return false;
    }

    boolean this_present_networkStatus = true && this.isSetNetworkStatus();
    boolean that_present_networkStatus = true && that.isSetNetworkStatus();
    if (this_present_networkStatus || that_present_networkStatus) {
      if (!(this_present_networkStatus && that_present_networkStatus))
        return false;
      if (!this.networkStatus.equals(that.networkStatus))
        return false;
    }

    boolean this_present_distanceTraveled = true && this.isSetDistanceTraveled();
    boolean that_present_distanceTraveled = true && that.isSetDistanceTraveled();
    if (this_present_distanceTraveled || that_present_distanceTraveled) {
      if (!(this_present_distanceTraveled && that_present_distanceTraveled))
        return false;
      if (this.distanceTraveled != that.distanceTraveled)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(Sample other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Sample typedOther = (Sample)other;

    lastComparison = Boolean.valueOf(isSetUuId()).compareTo(typedOther.isSetUuId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUuId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uuId, typedOther.uuId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTimestamp()).compareTo(typedOther.isSetTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, typedOther.timestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPiList()).compareTo(typedOther.isSetPiList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPiList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.piList, typedOther.piList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBatteryState()).compareTo(typedOther.isSetBatteryState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBatteryState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.batteryState, typedOther.batteryState);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBatteryLevel()).compareTo(typedOther.isSetBatteryLevel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBatteryLevel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.batteryLevel, typedOther.batteryLevel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMemoryWired()).compareTo(typedOther.isSetMemoryWired());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMemoryWired()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.memoryWired, typedOther.memoryWired);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMemoryActive()).compareTo(typedOther.isSetMemoryActive());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMemoryActive()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.memoryActive, typedOther.memoryActive);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMemoryInactive()).compareTo(typedOther.isSetMemoryInactive());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMemoryInactive()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.memoryInactive, typedOther.memoryInactive);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMemoryFree()).compareTo(typedOther.isSetMemoryFree());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMemoryFree()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.memoryFree, typedOther.memoryFree);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMemoryUser()).compareTo(typedOther.isSetMemoryUser());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMemoryUser()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.memoryUser, typedOther.memoryUser);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTriggeredBy()).compareTo(typedOther.isSetTriggeredBy());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTriggeredBy()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.triggeredBy, typedOther.triggeredBy);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNetworkStatus()).compareTo(typedOther.isSetNetworkStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNetworkStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.networkStatus, typedOther.networkStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDistanceTraveled()).compareTo(typedOther.isSetDistanceTraveled());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDistanceTraveled()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.distanceTraveled, typedOther.distanceTraveled);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Sample(");
    boolean first = true;

    sb.append("uuId:");
    if (this.uuId == null) {
      sb.append("null");
    } else {
      sb.append(this.uuId);
    }
    first = false;
    if (isSetTimestamp()) {
      if (!first) sb.append(", ");
      sb.append("timestamp:");
      sb.append(this.timestamp);
      first = false;
    }
    if (isSetPiList()) {
      if (!first) sb.append(", ");
      sb.append("piList:");
      if (this.piList == null) {
        sb.append("null");
      } else {
        sb.append(this.piList);
      }
      first = false;
    }
    if (isSetBatteryState()) {
      if (!first) sb.append(", ");
      sb.append("batteryState:");
      if (this.batteryState == null) {
        sb.append("null");
      } else {
        sb.append(this.batteryState);
      }
      first = false;
    }
    if (isSetBatteryLevel()) {
      if (!first) sb.append(", ");
      sb.append("batteryLevel:");
      sb.append(this.batteryLevel);
      first = false;
    }
    if (isSetMemoryWired()) {
      if (!first) sb.append(", ");
      sb.append("memoryWired:");
      sb.append(this.memoryWired);
      first = false;
    }
    if (isSetMemoryActive()) {
      if (!first) sb.append(", ");
      sb.append("memoryActive:");
      sb.append(this.memoryActive);
      first = false;
    }
    if (isSetMemoryInactive()) {
      if (!first) sb.append(", ");
      sb.append("memoryInactive:");
      sb.append(this.memoryInactive);
      first = false;
    }
    if (isSetMemoryFree()) {
      if (!first) sb.append(", ");
      sb.append("memoryFree:");
      sb.append(this.memoryFree);
      first = false;
    }
    if (isSetMemoryUser()) {
      if (!first) sb.append(", ");
      sb.append("memoryUser:");
      sb.append(this.memoryUser);
      first = false;
    }
    if (isSetTriggeredBy()) {
      if (!first) sb.append(", ");
      sb.append("triggeredBy:");
      if (this.triggeredBy == null) {
        sb.append("null");
      } else {
        sb.append(this.triggeredBy);
      }
      first = false;
    }
    if (isSetNetworkStatus()) {
      if (!first) sb.append(", ");
      sb.append("networkStatus:");
      if (this.networkStatus == null) {
        sb.append("null");
      } else {
        sb.append(this.networkStatus);
      }
      first = false;
    }
    if (isSetDistanceTraveled()) {
      if (!first) sb.append(", ");
      sb.append("distanceTraveled:");
      sb.append(this.distanceTraveled);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (uuId == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'uuId' was not present! Struct: " + toString());
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te.getMessage());
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te.getMessage());
    }
  }

  private static class SampleStandardSchemeFactory implements SchemeFactory {
    public SampleStandardScheme getScheme() {
      return new SampleStandardScheme();
    }
  }

  private static class SampleStandardScheme extends StandardScheme<Sample> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Sample struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // UU_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.uuId = iprot.readString();
              struct.setUuIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.timestamp = iprot.readDouble();
              struct.setTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PI_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.piList = new ArrayList<ProcessInfo>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  ProcessInfo _elem2; // required
                  _elem2 = new ProcessInfo();
                  _elem2.read(iprot);
                  struct.piList.add(_elem2);
                }
                iprot.readListEnd();
              }
              struct.setPiListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // BATTERY_STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.batteryState = iprot.readString();
              struct.setBatteryStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // BATTERY_LEVEL
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.batteryLevel = iprot.readDouble();
              struct.setBatteryLevelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // MEMORY_WIRED
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.memoryWired = iprot.readI32();
              struct.setMemoryWiredIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // MEMORY_ACTIVE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.memoryActive = iprot.readI32();
              struct.setMemoryActiveIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // MEMORY_INACTIVE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.memoryInactive = iprot.readI32();
              struct.setMemoryInactiveIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // MEMORY_FREE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.memoryFree = iprot.readI32();
              struct.setMemoryFreeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // MEMORY_USER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.memoryUser = iprot.readI32();
              struct.setMemoryUserIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // TRIGGERED_BY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.triggeredBy = iprot.readString();
              struct.setTriggeredByIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // NETWORK_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.networkStatus = iprot.readString();
              struct.setNetworkStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // DISTANCE_TRAVELED
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.distanceTraveled = iprot.readDouble();
              struct.setDistanceTraveledIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Sample struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.uuId != null) {
        oprot.writeFieldBegin(UU_ID_FIELD_DESC);
        oprot.writeString(struct.uuId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTimestamp()) {
        oprot.writeFieldBegin(TIMESTAMP_FIELD_DESC);
        oprot.writeDouble(struct.timestamp);
        oprot.writeFieldEnd();
      }
      if (struct.piList != null) {
        if (struct.isSetPiList()) {
          oprot.writeFieldBegin(PI_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.piList.size()));
            for (ProcessInfo _iter3 : struct.piList)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.batteryState != null) {
        if (struct.isSetBatteryState()) {
          oprot.writeFieldBegin(BATTERY_STATE_FIELD_DESC);
          oprot.writeString(struct.batteryState);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetBatteryLevel()) {
        oprot.writeFieldBegin(BATTERY_LEVEL_FIELD_DESC);
        oprot.writeDouble(struct.batteryLevel);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMemoryWired()) {
        oprot.writeFieldBegin(MEMORY_WIRED_FIELD_DESC);
        oprot.writeI32(struct.memoryWired);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMemoryActive()) {
        oprot.writeFieldBegin(MEMORY_ACTIVE_FIELD_DESC);
        oprot.writeI32(struct.memoryActive);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMemoryInactive()) {
        oprot.writeFieldBegin(MEMORY_INACTIVE_FIELD_DESC);
        oprot.writeI32(struct.memoryInactive);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMemoryFree()) {
        oprot.writeFieldBegin(MEMORY_FREE_FIELD_DESC);
        oprot.writeI32(struct.memoryFree);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMemoryUser()) {
        oprot.writeFieldBegin(MEMORY_USER_FIELD_DESC);
        oprot.writeI32(struct.memoryUser);
        oprot.writeFieldEnd();
      }
      if (struct.triggeredBy != null) {
        if (struct.isSetTriggeredBy()) {
          oprot.writeFieldBegin(TRIGGERED_BY_FIELD_DESC);
          oprot.writeString(struct.triggeredBy);
          oprot.writeFieldEnd();
        }
      }
      if (struct.networkStatus != null) {
        if (struct.isSetNetworkStatus()) {
          oprot.writeFieldBegin(NETWORK_STATUS_FIELD_DESC);
          oprot.writeString(struct.networkStatus);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetDistanceTraveled()) {
        oprot.writeFieldBegin(DISTANCE_TRAVELED_FIELD_DESC);
        oprot.writeDouble(struct.distanceTraveled);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SampleTupleSchemeFactory implements SchemeFactory {
    public SampleTupleScheme getScheme() {
      return new SampleTupleScheme();
    }
  }

  private static class SampleTupleScheme extends TupleScheme<Sample> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Sample struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.uuId);
      BitSet optionals = new BitSet();
      if (struct.isSetTimestamp()) {
        optionals.set(0);
      }
      if (struct.isSetPiList()) {
        optionals.set(1);
      }
      if (struct.isSetBatteryState()) {
        optionals.set(2);
      }
      if (struct.isSetBatteryLevel()) {
        optionals.set(3);
      }
      if (struct.isSetMemoryWired()) {
        optionals.set(4);
      }
      if (struct.isSetMemoryActive()) {
        optionals.set(5);
      }
      if (struct.isSetMemoryInactive()) {
        optionals.set(6);
      }
      if (struct.isSetMemoryFree()) {
        optionals.set(7);
      }
      if (struct.isSetMemoryUser()) {
        optionals.set(8);
      }
      if (struct.isSetTriggeredBy()) {
        optionals.set(9);
      }
      if (struct.isSetNetworkStatus()) {
        optionals.set(10);
      }
      if (struct.isSetDistanceTraveled()) {
        optionals.set(11);
      }
      oprot.writeBitSet(optionals, 12);
      if (struct.isSetTimestamp()) {
        oprot.writeDouble(struct.timestamp);
      }
      if (struct.isSetPiList()) {
        {
          oprot.writeI32(struct.piList.size());
          for (ProcessInfo _iter4 : struct.piList)
          {
            _iter4.write(oprot);
          }
        }
      }
      if (struct.isSetBatteryState()) {
        oprot.writeString(struct.batteryState);
      }
      if (struct.isSetBatteryLevel()) {
        oprot.writeDouble(struct.batteryLevel);
      }
      if (struct.isSetMemoryWired()) {
        oprot.writeI32(struct.memoryWired);
      }
      if (struct.isSetMemoryActive()) {
        oprot.writeI32(struct.memoryActive);
      }
      if (struct.isSetMemoryInactive()) {
        oprot.writeI32(struct.memoryInactive);
      }
      if (struct.isSetMemoryFree()) {
        oprot.writeI32(struct.memoryFree);
      }
      if (struct.isSetMemoryUser()) {
        oprot.writeI32(struct.memoryUser);
      }
      if (struct.isSetTriggeredBy()) {
        oprot.writeString(struct.triggeredBy);
      }
      if (struct.isSetNetworkStatus()) {
        oprot.writeString(struct.networkStatus);
      }
      if (struct.isSetDistanceTraveled()) {
        oprot.writeDouble(struct.distanceTraveled);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Sample struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.uuId = iprot.readString();
      struct.setUuIdIsSet(true);
      BitSet incoming = iprot.readBitSet(12);
      if (incoming.get(0)) {
        struct.timestamp = iprot.readDouble();
        struct.setTimestampIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.piList = new ArrayList<ProcessInfo>(_list5.size);
          for (int _i6 = 0; _i6 < _list5.size; ++_i6)
          {
            ProcessInfo _elem7; // required
            _elem7 = new ProcessInfo();
            _elem7.read(iprot);
            struct.piList.add(_elem7);
          }
        }
        struct.setPiListIsSet(true);
      }
      if (incoming.get(2)) {
        struct.batteryState = iprot.readString();
        struct.setBatteryStateIsSet(true);
      }
      if (incoming.get(3)) {
        struct.batteryLevel = iprot.readDouble();
        struct.setBatteryLevelIsSet(true);
      }
      if (incoming.get(4)) {
        struct.memoryWired = iprot.readI32();
        struct.setMemoryWiredIsSet(true);
      }
      if (incoming.get(5)) {
        struct.memoryActive = iprot.readI32();
        struct.setMemoryActiveIsSet(true);
      }
      if (incoming.get(6)) {
        struct.memoryInactive = iprot.readI32();
        struct.setMemoryInactiveIsSet(true);
      }
      if (incoming.get(7)) {
        struct.memoryFree = iprot.readI32();
        struct.setMemoryFreeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.memoryUser = iprot.readI32();
        struct.setMemoryUserIsSet(true);
      }
      if (incoming.get(9)) {
        struct.triggeredBy = iprot.readString();
        struct.setTriggeredByIsSet(true);
      }
      if (incoming.get(10)) {
        struct.networkStatus = iprot.readString();
        struct.setNetworkStatusIsSet(true);
      }
      if (incoming.get(11)) {
        struct.distanceTraveled = iprot.readDouble();
        struct.setDistanceTraveledIsSet(true);
      }
    }
  }

}


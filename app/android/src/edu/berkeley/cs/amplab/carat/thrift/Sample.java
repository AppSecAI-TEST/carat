/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package edu.berkeley.cs.amplab.carat.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.io.Serializable;
import java.nio.ByteBuffer;
import java.util.Arrays;

public class Sample implements org.apache.thrift.TBase<Sample, Sample._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Sample");

  private static final org.apache.thrift.protocol.TField UU_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("uuId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("timestamp", org.apache.thrift.protocol.TType.DOUBLE, (short)2);
  private static final org.apache.thrift.protocol.TField PI_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("piList", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField BATTERY_STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("batteryState", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField BATTERY_LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("batteryLevel", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField MEMORY_WIRED_FIELD_DESC = new org.apache.thrift.protocol.TField("memoryWired", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField MEMORY_ACTIVE_FIELD_DESC = new org.apache.thrift.protocol.TField("memoryActive", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField MEMORY_INACTIVE_FIELD_DESC = new org.apache.thrift.protocol.TField("memoryInactive", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField MEMORY_FREE_FIELD_DESC = new org.apache.thrift.protocol.TField("memoryFree", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField MEMORY_USER_FIELD_DESC = new org.apache.thrift.protocol.TField("memoryUser", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField TRIGGERED_BY_FIELD_DESC = new org.apache.thrift.protocol.TField("triggeredBy", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField NETWORK_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("networkStatus", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField DISTANCE_TRAVELED_FIELD_DESC = new org.apache.thrift.protocol.TField("distanceTraveled", org.apache.thrift.protocol.TType.DOUBLE, (short)13);
  private static final org.apache.thrift.protocol.TField SCREEN_BRIGHTNESS_FIELD_DESC = new org.apache.thrift.protocol.TField("screenBrightness", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField NETWORK_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("networkType", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField MOBILE_NETWORK_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("mobileNetworkType", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField MOBILE_DATA_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("mobileDataStatus", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField MOBILE_DATA_ACTIVITY_FIELD_DESC = new org.apache.thrift.protocol.TField("mobileDataActivity", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField ROAMING_ENABLED_FIELD_DESC = new org.apache.thrift.protocol.TField("roamingEnabled", org.apache.thrift.protocol.TType.BOOL, (short)19);
  private static final org.apache.thrift.protocol.TField BATTERY_CHARGER_FIELD_DESC = new org.apache.thrift.protocol.TField("batteryCharger", org.apache.thrift.protocol.TType.STRING, (short)20);
  private static final org.apache.thrift.protocol.TField BATTERY_HEALTH_FIELD_DESC = new org.apache.thrift.protocol.TField("batteryHealth", org.apache.thrift.protocol.TType.STRING, (short)21);
  private static final org.apache.thrift.protocol.TField BATTERY_VOLTAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("batteryVoltage", org.apache.thrift.protocol.TType.DOUBLE, (short)22);
  private static final org.apache.thrift.protocol.TField BATTERY_TEMPERATURE_FIELD_DESC = new org.apache.thrift.protocol.TField("batteryTemperature", org.apache.thrift.protocol.TType.DOUBLE, (short)23);
  private static final org.apache.thrift.protocol.TField BATTERY_TECHNOLOGY_FIELD_DESC = new org.apache.thrift.protocol.TField("batteryTechnology", org.apache.thrift.protocol.TType.STRING, (short)24);
  private static final org.apache.thrift.protocol.TField CPU_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("cpuTime", org.apache.thrift.protocol.TType.DOUBLE, (short)25);
  private static final org.apache.thrift.protocol.TField IDLE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("idleTime", org.apache.thrift.protocol.TType.DOUBLE, (short)26);
  private static final org.apache.thrift.protocol.TField UPTIME_FIELD_DESC = new org.apache.thrift.protocol.TField("uptime", org.apache.thrift.protocol.TType.DOUBLE, (short)27);
  private static final org.apache.thrift.protocol.TField WIFI_ENABLED_FIELD_DESC = new org.apache.thrift.protocol.TField("wifiEnabled", org.apache.thrift.protocol.TType.BOOL, (short)28);
  private static final org.apache.thrift.protocol.TField WIFI_SIGNAL_STRENGTH_FIELD_DESC = new org.apache.thrift.protocol.TField("wifiSignalStrength", org.apache.thrift.protocol.TType.I32, (short)29);
  private static final org.apache.thrift.protocol.TField WIFI_LINK_SPEED_FIELD_DESC = new org.apache.thrift.protocol.TField("wifiLinkSpeed", org.apache.thrift.protocol.TType.I32, (short)30);
  private static final org.apache.thrift.protocol.TField LOCATION_PROVIDERS_FIELD_DESC = new org.apache.thrift.protocol.TField("locationProviders", org.apache.thrift.protocol.TType.LIST, (short)31);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SampleStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SampleTupleSchemeFactory());
  }

  public String uuId; // required
  public double timestamp; // optional
  public List<ProcessInfo> piList; // optional
  public String batteryState; // optional
  public double batteryLevel; // optional
  public int memoryWired; // optional
  public int memoryActive; // optional
  public int memoryInactive; // optional
  public int memoryFree; // optional
  public int memoryUser; // optional
  public String triggeredBy; // optional
  public String networkStatus; // optional
  public double distanceTraveled; // optional
  public int screenBrightness; // optional
  public String networkType; // optional
  public String mobileNetworkType; // optional
  public String mobileDataStatus; // optional
  public String mobileDataActivity; // optional
  public boolean roamingEnabled; // optional
  public String batteryCharger; // optional
  public String batteryHealth; // optional
  public double batteryVoltage; // optional
  public double batteryTemperature; // optional
  public String batteryTechnology; // optional
  public double cpuTime; // optional
  public double idleTime; // optional
  public double uptime; // optional
  public boolean wifiEnabled; // optional
  public int wifiSignalStrength; // optional
  public int wifiLinkSpeed; // optional
  public List<String> locationProviders; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    UU_ID((short)1, "uuId"),
    TIMESTAMP((short)2, "timestamp"),
    PI_LIST((short)3, "piList"),
    BATTERY_STATE((short)4, "batteryState"),
    BATTERY_LEVEL((short)5, "batteryLevel"),
    MEMORY_WIRED((short)6, "memoryWired"),
    MEMORY_ACTIVE((short)7, "memoryActive"),
    MEMORY_INACTIVE((short)8, "memoryInactive"),
    MEMORY_FREE((short)9, "memoryFree"),
    MEMORY_USER((short)10, "memoryUser"),
    TRIGGERED_BY((short)11, "triggeredBy"),
    NETWORK_STATUS((short)12, "networkStatus"),
    DISTANCE_TRAVELED((short)13, "distanceTraveled"),
    SCREEN_BRIGHTNESS((short)14, "screenBrightness"),
    NETWORK_TYPE((short)15, "networkType"),
    MOBILE_NETWORK_TYPE((short)16, "mobileNetworkType"),
    MOBILE_DATA_STATUS((short)17, "mobileDataStatus"),
    MOBILE_DATA_ACTIVITY((short)18, "mobileDataActivity"),
    ROAMING_ENABLED((short)19, "roamingEnabled"),
    BATTERY_CHARGER((short)20, "batteryCharger"),
    BATTERY_HEALTH((short)21, "batteryHealth"),
    BATTERY_VOLTAGE((short)22, "batteryVoltage"),
    BATTERY_TEMPERATURE((short)23, "batteryTemperature"),
    BATTERY_TECHNOLOGY((short)24, "batteryTechnology"),
    CPU_TIME((short)25, "cpuTime"),
    IDLE_TIME((short)26, "idleTime"),
    UPTIME((short)27, "uptime"),
    WIFI_ENABLED((short)28, "wifiEnabled"),
    WIFI_SIGNAL_STRENGTH((short)29, "wifiSignalStrength"),
    WIFI_LINK_SPEED((short)30, "wifiLinkSpeed"),
    LOCATION_PROVIDERS((short)31, "locationProviders");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // UU_ID
          return UU_ID;
        case 2: // TIMESTAMP
          return TIMESTAMP;
        case 3: // PI_LIST
          return PI_LIST;
        case 4: // BATTERY_STATE
          return BATTERY_STATE;
        case 5: // BATTERY_LEVEL
          return BATTERY_LEVEL;
        case 6: // MEMORY_WIRED
          return MEMORY_WIRED;
        case 7: // MEMORY_ACTIVE
          return MEMORY_ACTIVE;
        case 8: // MEMORY_INACTIVE
          return MEMORY_INACTIVE;
        case 9: // MEMORY_FREE
          return MEMORY_FREE;
        case 10: // MEMORY_USER
          return MEMORY_USER;
        case 11: // TRIGGERED_BY
          return TRIGGERED_BY;
        case 12: // NETWORK_STATUS
          return NETWORK_STATUS;
        case 13: // DISTANCE_TRAVELED
          return DISTANCE_TRAVELED;
        case 14: // SCREEN_BRIGHTNESS
          return SCREEN_BRIGHTNESS;
        case 15: // NETWORK_TYPE
          return NETWORK_TYPE;
        case 16: // MOBILE_NETWORK_TYPE
          return MOBILE_NETWORK_TYPE;
        case 17: // MOBILE_DATA_STATUS
          return MOBILE_DATA_STATUS;
        case 18: // MOBILE_DATA_ACTIVITY
          return MOBILE_DATA_ACTIVITY;
        case 19: // ROAMING_ENABLED
          return ROAMING_ENABLED;
        case 20: // BATTERY_CHARGER
          return BATTERY_CHARGER;
        case 21: // BATTERY_HEALTH
          return BATTERY_HEALTH;
        case 22: // BATTERY_VOLTAGE
          return BATTERY_VOLTAGE;
        case 23: // BATTERY_TEMPERATURE
          return BATTERY_TEMPERATURE;
        case 24: // BATTERY_TECHNOLOGY
          return BATTERY_TECHNOLOGY;
        case 25: // CPU_TIME
          return CPU_TIME;
        case 26: // IDLE_TIME
          return IDLE_TIME;
        case 27: // UPTIME
          return UPTIME;
        case 28: // WIFI_ENABLED
          return WIFI_ENABLED;
        case 29: // WIFI_SIGNAL_STRENGTH
          return WIFI_SIGNAL_STRENGTH;
        case 30: // WIFI_LINK_SPEED
          return WIFI_LINK_SPEED;
        case 31: // LOCATION_PROVIDERS
          return LOCATION_PROVIDERS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TIMESTAMP_ISSET_ID = 0;
  private static final int __BATTERYLEVEL_ISSET_ID = 1;
  private static final int __MEMORYWIRED_ISSET_ID = 2;
  private static final int __MEMORYACTIVE_ISSET_ID = 3;
  private static final int __MEMORYINACTIVE_ISSET_ID = 4;
  private static final int __MEMORYFREE_ISSET_ID = 5;
  private static final int __MEMORYUSER_ISSET_ID = 6;
  private static final int __DISTANCETRAVELED_ISSET_ID = 7;
  private static final int __SCREENBRIGHTNESS_ISSET_ID = 8;
  private static final int __ROAMINGENABLED_ISSET_ID = 9;
  private static final int __BATTERYVOLTAGE_ISSET_ID = 10;
  private static final int __BATTERYTEMPERATURE_ISSET_ID = 11;
  private static final int __CPUTIME_ISSET_ID = 12;
  private static final int __IDLETIME_ISSET_ID = 13;
  private static final int __UPTIME_ISSET_ID = 14;
  private static final int __WIFIENABLED_ISSET_ID = 15;
  private static final int __WIFISIGNALSTRENGTH_ISSET_ID = 16;
  private static final int __WIFILINKSPEED_ISSET_ID = 17;
  private BitSet __isset_bit_vector = new BitSet(18);
  private _Fields optionals[] = {_Fields.TIMESTAMP,_Fields.PI_LIST,_Fields.BATTERY_STATE,_Fields.BATTERY_LEVEL,_Fields.MEMORY_WIRED,_Fields.MEMORY_ACTIVE,_Fields.MEMORY_INACTIVE,_Fields.MEMORY_FREE,_Fields.MEMORY_USER,_Fields.TRIGGERED_BY,_Fields.NETWORK_STATUS,_Fields.DISTANCE_TRAVELED,_Fields.SCREEN_BRIGHTNESS,_Fields.NETWORK_TYPE,_Fields.MOBILE_NETWORK_TYPE,_Fields.MOBILE_DATA_STATUS,_Fields.MOBILE_DATA_ACTIVITY,_Fields.ROAMING_ENABLED,_Fields.BATTERY_CHARGER,_Fields.BATTERY_HEALTH,_Fields.BATTERY_VOLTAGE,_Fields.BATTERY_TEMPERATURE,_Fields.BATTERY_TECHNOLOGY,_Fields.CPU_TIME,_Fields.IDLE_TIME,_Fields.UPTIME,_Fields.WIFI_ENABLED,_Fields.WIFI_SIGNAL_STRENGTH,_Fields.WIFI_LINK_SPEED,_Fields.LOCATION_PROVIDERS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.UU_ID, new org.apache.thrift.meta_data.FieldMetaData("uuId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("timestamp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PI_LIST, new org.apache.thrift.meta_data.FieldMetaData("piList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.LIST        , "ProcessInfoList")));
    tmpMap.put(_Fields.BATTERY_STATE, new org.apache.thrift.meta_data.FieldMetaData("batteryState", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BATTERY_LEVEL, new org.apache.thrift.meta_data.FieldMetaData("batteryLevel", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.MEMORY_WIRED, new org.apache.thrift.meta_data.FieldMetaData("memoryWired", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MEMORY_ACTIVE, new org.apache.thrift.meta_data.FieldMetaData("memoryActive", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MEMORY_INACTIVE, new org.apache.thrift.meta_data.FieldMetaData("memoryInactive", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MEMORY_FREE, new org.apache.thrift.meta_data.FieldMetaData("memoryFree", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MEMORY_USER, new org.apache.thrift.meta_data.FieldMetaData("memoryUser", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TRIGGERED_BY, new org.apache.thrift.meta_data.FieldMetaData("triggeredBy", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NETWORK_STATUS, new org.apache.thrift.meta_data.FieldMetaData("networkStatus", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DISTANCE_TRAVELED, new org.apache.thrift.meta_data.FieldMetaData("distanceTraveled", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SCREEN_BRIGHTNESS, new org.apache.thrift.meta_data.FieldMetaData("screenBrightness", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NETWORK_TYPE, new org.apache.thrift.meta_data.FieldMetaData("networkType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MOBILE_NETWORK_TYPE, new org.apache.thrift.meta_data.FieldMetaData("mobileNetworkType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MOBILE_DATA_STATUS, new org.apache.thrift.meta_data.FieldMetaData("mobileDataStatus", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MOBILE_DATA_ACTIVITY, new org.apache.thrift.meta_data.FieldMetaData("mobileDataActivity", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ROAMING_ENABLED, new org.apache.thrift.meta_data.FieldMetaData("roamingEnabled", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.BATTERY_CHARGER, new org.apache.thrift.meta_data.FieldMetaData("batteryCharger", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BATTERY_HEALTH, new org.apache.thrift.meta_data.FieldMetaData("batteryHealth", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BATTERY_VOLTAGE, new org.apache.thrift.meta_data.FieldMetaData("batteryVoltage", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.BATTERY_TEMPERATURE, new org.apache.thrift.meta_data.FieldMetaData("batteryTemperature", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.BATTERY_TECHNOLOGY, new org.apache.thrift.meta_data.FieldMetaData("batteryTechnology", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CPU_TIME, new org.apache.thrift.meta_data.FieldMetaData("cpuTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.IDLE_TIME, new org.apache.thrift.meta_data.FieldMetaData("idleTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.UPTIME, new org.apache.thrift.meta_data.FieldMetaData("uptime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.WIFI_ENABLED, new org.apache.thrift.meta_data.FieldMetaData("wifiEnabled", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.WIFI_SIGNAL_STRENGTH, new org.apache.thrift.meta_data.FieldMetaData("wifiSignalStrength", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.WIFI_LINK_SPEED, new org.apache.thrift.meta_data.FieldMetaData("wifiLinkSpeed", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LOCATION_PROVIDERS, new org.apache.thrift.meta_data.FieldMetaData("locationProviders", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Sample.class, metaDataMap);
  }

  public Sample() {
  }

  public Sample(
    String uuId)
  {
    this();
    this.uuId = uuId;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Sample(Sample other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetUuId()) {
      this.uuId = other.uuId;
    }
    this.timestamp = other.timestamp;
    if (other.isSetPiList()) {
      this.piList = other.piList;
    }
    if (other.isSetBatteryState()) {
      this.batteryState = other.batteryState;
    }
    this.batteryLevel = other.batteryLevel;
    this.memoryWired = other.memoryWired;
    this.memoryActive = other.memoryActive;
    this.memoryInactive = other.memoryInactive;
    this.memoryFree = other.memoryFree;
    this.memoryUser = other.memoryUser;
    if (other.isSetTriggeredBy()) {
      this.triggeredBy = other.triggeredBy;
    }
    if (other.isSetNetworkStatus()) {
      this.networkStatus = other.networkStatus;
    }
    this.distanceTraveled = other.distanceTraveled;
    this.screenBrightness = other.screenBrightness;
    if (other.isSetNetworkType()) {
      this.networkType = other.networkType;
    }
    if (other.isSetMobileNetworkType()) {
      this.mobileNetworkType = other.mobileNetworkType;
    }
    if (other.isSetMobileDataStatus()) {
      this.mobileDataStatus = other.mobileDataStatus;
    }
    if (other.isSetMobileDataActivity()) {
      this.mobileDataActivity = other.mobileDataActivity;
    }
    this.roamingEnabled = other.roamingEnabled;
    if (other.isSetBatteryCharger()) {
      this.batteryCharger = other.batteryCharger;
    }
    if (other.isSetBatteryHealth()) {
      this.batteryHealth = other.batteryHealth;
    }
    this.batteryVoltage = other.batteryVoltage;
    this.batteryTemperature = other.batteryTemperature;
    if (other.isSetBatteryTechnology()) {
      this.batteryTechnology = other.batteryTechnology;
    }
    this.cpuTime = other.cpuTime;
    this.idleTime = other.idleTime;
    this.uptime = other.uptime;
    this.wifiEnabled = other.wifiEnabled;
    this.wifiSignalStrength = other.wifiSignalStrength;
    this.wifiLinkSpeed = other.wifiLinkSpeed;
    if (other.isSetLocationProviders()) {
      List<String> __this__locationProviders = new ArrayList<String>();
      for (String other_element : other.locationProviders) {
        __this__locationProviders.add(other_element);
      }
      this.locationProviders = __this__locationProviders;
    }
  }

  public Sample deepCopy() {
    return new Sample(this);
  }

  @Override
  public void clear() {
    this.uuId = null;
    setTimestampIsSet(false);
    this.timestamp = 0.0;
    this.piList = null;
    this.batteryState = null;
    setBatteryLevelIsSet(false);
    this.batteryLevel = 0.0;
    setMemoryWiredIsSet(false);
    this.memoryWired = 0;
    setMemoryActiveIsSet(false);
    this.memoryActive = 0;
    setMemoryInactiveIsSet(false);
    this.memoryInactive = 0;
    setMemoryFreeIsSet(false);
    this.memoryFree = 0;
    setMemoryUserIsSet(false);
    this.memoryUser = 0;
    this.triggeredBy = null;
    this.networkStatus = null;
    setDistanceTraveledIsSet(false);
    this.distanceTraveled = 0.0;
    setScreenBrightnessIsSet(false);
    this.screenBrightness = 0;
    this.networkType = null;
    this.mobileNetworkType = null;
    this.mobileDataStatus = null;
    this.mobileDataActivity = null;
    setRoamingEnabledIsSet(false);
    this.roamingEnabled = false;
    this.batteryCharger = null;
    this.batteryHealth = null;
    setBatteryVoltageIsSet(false);
    this.batteryVoltage = 0.0;
    setBatteryTemperatureIsSet(false);
    this.batteryTemperature = 0.0;
    this.batteryTechnology = null;
    setCpuTimeIsSet(false);
    this.cpuTime = 0.0;
    setIdleTimeIsSet(false);
    this.idleTime = 0.0;
    setUptimeIsSet(false);
    this.uptime = 0.0;
    setWifiEnabledIsSet(false);
    this.wifiEnabled = false;
    setWifiSignalStrengthIsSet(false);
    this.wifiSignalStrength = 0;
    setWifiLinkSpeedIsSet(false);
    this.wifiLinkSpeed = 0;
    this.locationProviders = null;
  }

  public String getUuId() {
    return this.uuId;
  }

  public Sample setUuId(String uuId) {
    this.uuId = uuId;
    return this;
  }

  public void unsetUuId() {
    this.uuId = null;
  }

  /** Returns true if field uuId is set (has been assigned a value) and false otherwise */
  public boolean isSetUuId() {
    return this.uuId != null;
  }

  public void setUuIdIsSet(boolean value) {
    if (!value) {
      this.uuId = null;
    }
  }

  public double getTimestamp() {
    return this.timestamp;
  }

  public Sample setTimestamp(double timestamp) {
    this.timestamp = timestamp;
    setTimestampIsSet(true);
    return this;
  }

  public void unsetTimestamp() {
    __isset_bit_vector.clear(__TIMESTAMP_ISSET_ID);
  }

  /** Returns true if field timestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetTimestamp() {
    return __isset_bit_vector.get(__TIMESTAMP_ISSET_ID);
  }

  public void setTimestampIsSet(boolean value) {
    __isset_bit_vector.set(__TIMESTAMP_ISSET_ID, value);
  }

  public int getPiListSize() {
    return (this.piList == null) ? 0 : this.piList.size();
  }

  public java.util.Iterator<ProcessInfo> getPiListIterator() {
    return (this.piList == null) ? null : this.piList.iterator();
  }

  public void addToPiList(ProcessInfo elem) {
    if (this.piList == null) {
      this.piList = new ArrayList<ProcessInfo>();
    }
    this.piList.add(elem);
  }

  public List<ProcessInfo> getPiList() {
    return this.piList;
  }

  public Sample setPiList(List<ProcessInfo> piList) {
    this.piList = piList;
    return this;
  }

  public void unsetPiList() {
    this.piList = null;
  }

  /** Returns true if field piList is set (has been assigned a value) and false otherwise */
  public boolean isSetPiList() {
    return this.piList != null;
  }

  public void setPiListIsSet(boolean value) {
    if (!value) {
      this.piList = null;
    }
  }

  public String getBatteryState() {
    return this.batteryState;
  }

  public Sample setBatteryState(String batteryState) {
    this.batteryState = batteryState;
    return this;
  }

  public void unsetBatteryState() {
    this.batteryState = null;
  }

  /** Returns true if field batteryState is set (has been assigned a value) and false otherwise */
  public boolean isSetBatteryState() {
    return this.batteryState != null;
  }

  public void setBatteryStateIsSet(boolean value) {
    if (!value) {
      this.batteryState = null;
    }
  }

  public double getBatteryLevel() {
    return this.batteryLevel;
  }

  public Sample setBatteryLevel(double batteryLevel) {
    this.batteryLevel = batteryLevel;
    setBatteryLevelIsSet(true);
    return this;
  }

  public void unsetBatteryLevel() {
    __isset_bit_vector.clear(__BATTERYLEVEL_ISSET_ID);
  }

  /** Returns true if field batteryLevel is set (has been assigned a value) and false otherwise */
  public boolean isSetBatteryLevel() {
    return __isset_bit_vector.get(__BATTERYLEVEL_ISSET_ID);
  }

  public void setBatteryLevelIsSet(boolean value) {
    __isset_bit_vector.set(__BATTERYLEVEL_ISSET_ID, value);
  }

  public int getMemoryWired() {
    return this.memoryWired;
  }

  public Sample setMemoryWired(int memoryWired) {
    this.memoryWired = memoryWired;
    setMemoryWiredIsSet(true);
    return this;
  }

  public void unsetMemoryWired() {
    __isset_bit_vector.clear(__MEMORYWIRED_ISSET_ID);
  }

  /** Returns true if field memoryWired is set (has been assigned a value) and false otherwise */
  public boolean isSetMemoryWired() {
    return __isset_bit_vector.get(__MEMORYWIRED_ISSET_ID);
  }

  public void setMemoryWiredIsSet(boolean value) {
    __isset_bit_vector.set(__MEMORYWIRED_ISSET_ID, value);
  }

  public int getMemoryActive() {
    return this.memoryActive;
  }

  public Sample setMemoryActive(int memoryActive) {
    this.memoryActive = memoryActive;
    setMemoryActiveIsSet(true);
    return this;
  }

  public void unsetMemoryActive() {
    __isset_bit_vector.clear(__MEMORYACTIVE_ISSET_ID);
  }

  /** Returns true if field memoryActive is set (has been assigned a value) and false otherwise */
  public boolean isSetMemoryActive() {
    return __isset_bit_vector.get(__MEMORYACTIVE_ISSET_ID);
  }

  public void setMemoryActiveIsSet(boolean value) {
    __isset_bit_vector.set(__MEMORYACTIVE_ISSET_ID, value);
  }

  public int getMemoryInactive() {
    return this.memoryInactive;
  }

  public Sample setMemoryInactive(int memoryInactive) {
    this.memoryInactive = memoryInactive;
    setMemoryInactiveIsSet(true);
    return this;
  }

  public void unsetMemoryInactive() {
    __isset_bit_vector.clear(__MEMORYINACTIVE_ISSET_ID);
  }

  /** Returns true if field memoryInactive is set (has been assigned a value) and false otherwise */
  public boolean isSetMemoryInactive() {
    return __isset_bit_vector.get(__MEMORYINACTIVE_ISSET_ID);
  }

  public void setMemoryInactiveIsSet(boolean value) {
    __isset_bit_vector.set(__MEMORYINACTIVE_ISSET_ID, value);
  }

  public int getMemoryFree() {
    return this.memoryFree;
  }

  public Sample setMemoryFree(int memoryFree) {
    this.memoryFree = memoryFree;
    setMemoryFreeIsSet(true);
    return this;
  }

  public void unsetMemoryFree() {
    __isset_bit_vector.clear(__MEMORYFREE_ISSET_ID);
  }

  /** Returns true if field memoryFree is set (has been assigned a value) and false otherwise */
  public boolean isSetMemoryFree() {
    return __isset_bit_vector.get(__MEMORYFREE_ISSET_ID);
  }

  public void setMemoryFreeIsSet(boolean value) {
    __isset_bit_vector.set(__MEMORYFREE_ISSET_ID, value);
  }

  public int getMemoryUser() {
    return this.memoryUser;
  }

  public Sample setMemoryUser(int memoryUser) {
    this.memoryUser = memoryUser;
    setMemoryUserIsSet(true);
    return this;
  }

  public void unsetMemoryUser() {
    __isset_bit_vector.clear(__MEMORYUSER_ISSET_ID);
  }

  /** Returns true if field memoryUser is set (has been assigned a value) and false otherwise */
  public boolean isSetMemoryUser() {
    return __isset_bit_vector.get(__MEMORYUSER_ISSET_ID);
  }

  public void setMemoryUserIsSet(boolean value) {
    __isset_bit_vector.set(__MEMORYUSER_ISSET_ID, value);
  }

  public String getTriggeredBy() {
    return this.triggeredBy;
  }

  public Sample setTriggeredBy(String triggeredBy) {
    this.triggeredBy = triggeredBy;
    return this;
  }

  public void unsetTriggeredBy() {
    this.triggeredBy = null;
  }

  /** Returns true if field triggeredBy is set (has been assigned a value) and false otherwise */
  public boolean isSetTriggeredBy() {
    return this.triggeredBy != null;
  }

  public void setTriggeredByIsSet(boolean value) {
    if (!value) {
      this.triggeredBy = null;
    }
  }

  public String getNetworkStatus() {
    return this.networkStatus;
  }

  public Sample setNetworkStatus(String networkStatus) {
    this.networkStatus = networkStatus;
    return this;
  }

  public void unsetNetworkStatus() {
    this.networkStatus = null;
  }

  /** Returns true if field networkStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetNetworkStatus() {
    return this.networkStatus != null;
  }

  public void setNetworkStatusIsSet(boolean value) {
    if (!value) {
      this.networkStatus = null;
    }
  }

  public double getDistanceTraveled() {
    return this.distanceTraveled;
  }

  public Sample setDistanceTraveled(double distanceTraveled) {
    this.distanceTraveled = distanceTraveled;
    setDistanceTraveledIsSet(true);
    return this;
  }

  public void unsetDistanceTraveled() {
    __isset_bit_vector.clear(__DISTANCETRAVELED_ISSET_ID);
  }

  /** Returns true if field distanceTraveled is set (has been assigned a value) and false otherwise */
  public boolean isSetDistanceTraveled() {
    return __isset_bit_vector.get(__DISTANCETRAVELED_ISSET_ID);
  }

  public void setDistanceTraveledIsSet(boolean value) {
    __isset_bit_vector.set(__DISTANCETRAVELED_ISSET_ID, value);
  }

  public int getScreenBrightness() {
    return this.screenBrightness;
  }

  public Sample setScreenBrightness(int screenBrightness) {
    this.screenBrightness = screenBrightness;
    setScreenBrightnessIsSet(true);
    return this;
  }

  public void unsetScreenBrightness() {
    __isset_bit_vector.clear(__SCREENBRIGHTNESS_ISSET_ID);
  }

  /** Returns true if field screenBrightness is set (has been assigned a value) and false otherwise */
  public boolean isSetScreenBrightness() {
    return __isset_bit_vector.get(__SCREENBRIGHTNESS_ISSET_ID);
  }

  public void setScreenBrightnessIsSet(boolean value) {
    __isset_bit_vector.set(__SCREENBRIGHTNESS_ISSET_ID, value);
  }

  public String getNetworkType() {
    return this.networkType;
  }

  public Sample setNetworkType(String networkType) {
    this.networkType = networkType;
    return this;
  }

  public void unsetNetworkType() {
    this.networkType = null;
  }

  /** Returns true if field networkType is set (has been assigned a value) and false otherwise */
  public boolean isSetNetworkType() {
    return this.networkType != null;
  }

  public void setNetworkTypeIsSet(boolean value) {
    if (!value) {
      this.networkType = null;
    }
  }

  public String getMobileNetworkType() {
    return this.mobileNetworkType;
  }

  public Sample setMobileNetworkType(String mobileNetworkType) {
    this.mobileNetworkType = mobileNetworkType;
    return this;
  }

  public void unsetMobileNetworkType() {
    this.mobileNetworkType = null;
  }

  /** Returns true if field mobileNetworkType is set (has been assigned a value) and false otherwise */
  public boolean isSetMobileNetworkType() {
    return this.mobileNetworkType != null;
  }

  public void setMobileNetworkTypeIsSet(boolean value) {
    if (!value) {
      this.mobileNetworkType = null;
    }
  }

  public String getMobileDataStatus() {
    return this.mobileDataStatus;
  }

  public Sample setMobileDataStatus(String mobileDataStatus) {
    this.mobileDataStatus = mobileDataStatus;
    return this;
  }

  public void unsetMobileDataStatus() {
    this.mobileDataStatus = null;
  }

  /** Returns true if field mobileDataStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetMobileDataStatus() {
    return this.mobileDataStatus != null;
  }

  public void setMobileDataStatusIsSet(boolean value) {
    if (!value) {
      this.mobileDataStatus = null;
    }
  }

  public String getMobileDataActivity() {
    return this.mobileDataActivity;
  }

  public Sample setMobileDataActivity(String mobileDataActivity) {
    this.mobileDataActivity = mobileDataActivity;
    return this;
  }

  public void unsetMobileDataActivity() {
    this.mobileDataActivity = null;
  }

  /** Returns true if field mobileDataActivity is set (has been assigned a value) and false otherwise */
  public boolean isSetMobileDataActivity() {
    return this.mobileDataActivity != null;
  }

  public void setMobileDataActivityIsSet(boolean value) {
    if (!value) {
      this.mobileDataActivity = null;
    }
  }

  public boolean isRoamingEnabled() {
    return this.roamingEnabled;
  }

  public Sample setRoamingEnabled(boolean roamingEnabled) {
    this.roamingEnabled = roamingEnabled;
    setRoamingEnabledIsSet(true);
    return this;
  }

  public void unsetRoamingEnabled() {
    __isset_bit_vector.clear(__ROAMINGENABLED_ISSET_ID);
  }

  /** Returns true if field roamingEnabled is set (has been assigned a value) and false otherwise */
  public boolean isSetRoamingEnabled() {
    return __isset_bit_vector.get(__ROAMINGENABLED_ISSET_ID);
  }

  public void setRoamingEnabledIsSet(boolean value) {
    __isset_bit_vector.set(__ROAMINGENABLED_ISSET_ID, value);
  }

  public String getBatteryCharger() {
    return this.batteryCharger;
  }

  public Sample setBatteryCharger(String batteryCharger) {
    this.batteryCharger = batteryCharger;
    return this;
  }

  public void unsetBatteryCharger() {
    this.batteryCharger = null;
  }

  /** Returns true if field batteryCharger is set (has been assigned a value) and false otherwise */
  public boolean isSetBatteryCharger() {
    return this.batteryCharger != null;
  }

  public void setBatteryChargerIsSet(boolean value) {
    if (!value) {
      this.batteryCharger = null;
    }
  }

  public String getBatteryHealth() {
    return this.batteryHealth;
  }

  public Sample setBatteryHealth(String batteryHealth) {
    this.batteryHealth = batteryHealth;
    return this;
  }

  public void unsetBatteryHealth() {
    this.batteryHealth = null;
  }

  /** Returns true if field batteryHealth is set (has been assigned a value) and false otherwise */
  public boolean isSetBatteryHealth() {
    return this.batteryHealth != null;
  }

  public void setBatteryHealthIsSet(boolean value) {
    if (!value) {
      this.batteryHealth = null;
    }
  }

  public double getBatteryVoltage() {
    return this.batteryVoltage;
  }

  public Sample setBatteryVoltage(double batteryVoltage) {
    this.batteryVoltage = batteryVoltage;
    setBatteryVoltageIsSet(true);
    return this;
  }

  public void unsetBatteryVoltage() {
    __isset_bit_vector.clear(__BATTERYVOLTAGE_ISSET_ID);
  }

  /** Returns true if field batteryVoltage is set (has been assigned a value) and false otherwise */
  public boolean isSetBatteryVoltage() {
    return __isset_bit_vector.get(__BATTERYVOLTAGE_ISSET_ID);
  }

  public void setBatteryVoltageIsSet(boolean value) {
    __isset_bit_vector.set(__BATTERYVOLTAGE_ISSET_ID, value);
  }

  public double getBatteryTemperature() {
    return this.batteryTemperature;
  }

  public Sample setBatteryTemperature(double batteryTemperature) {
    this.batteryTemperature = batteryTemperature;
    setBatteryTemperatureIsSet(true);
    return this;
  }

  public void unsetBatteryTemperature() {
    __isset_bit_vector.clear(__BATTERYTEMPERATURE_ISSET_ID);
  }

  /** Returns true if field batteryTemperature is set (has been assigned a value) and false otherwise */
  public boolean isSetBatteryTemperature() {
    return __isset_bit_vector.get(__BATTERYTEMPERATURE_ISSET_ID);
  }

  public void setBatteryTemperatureIsSet(boolean value) {
    __isset_bit_vector.set(__BATTERYTEMPERATURE_ISSET_ID, value);
  }

  public String getBatteryTechnology() {
    return this.batteryTechnology;
  }

  public Sample setBatteryTechnology(String batteryTechnology) {
    this.batteryTechnology = batteryTechnology;
    return this;
  }

  public void unsetBatteryTechnology() {
    this.batteryTechnology = null;
  }

  /** Returns true if field batteryTechnology is set (has been assigned a value) and false otherwise */
  public boolean isSetBatteryTechnology() {
    return this.batteryTechnology != null;
  }

  public void setBatteryTechnologyIsSet(boolean value) {
    if (!value) {
      this.batteryTechnology = null;
    }
  }

  public double getCpuTime() {
    return this.cpuTime;
  }

  public Sample setCpuTime(double cpuTime) {
    this.cpuTime = cpuTime;
    setCpuTimeIsSet(true);
    return this;
  }

  public void unsetCpuTime() {
    __isset_bit_vector.clear(__CPUTIME_ISSET_ID);
  }

  /** Returns true if field cpuTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCpuTime() {
    return __isset_bit_vector.get(__CPUTIME_ISSET_ID);
  }

  public void setCpuTimeIsSet(boolean value) {
    __isset_bit_vector.set(__CPUTIME_ISSET_ID, value);
  }

  public double getIdleTime() {
    return this.idleTime;
  }

  public Sample setIdleTime(double idleTime) {
    this.idleTime = idleTime;
    setIdleTimeIsSet(true);
    return this;
  }

  public void unsetIdleTime() {
    __isset_bit_vector.clear(__IDLETIME_ISSET_ID);
  }

  /** Returns true if field idleTime is set (has been assigned a value) and false otherwise */
  public boolean isSetIdleTime() {
    return __isset_bit_vector.get(__IDLETIME_ISSET_ID);
  }

  public void setIdleTimeIsSet(boolean value) {
    __isset_bit_vector.set(__IDLETIME_ISSET_ID, value);
  }

  public double getUptime() {
    return this.uptime;
  }

  public Sample setUptime(double uptime) {
    this.uptime = uptime;
    setUptimeIsSet(true);
    return this;
  }

  public void unsetUptime() {
    __isset_bit_vector.clear(__UPTIME_ISSET_ID);
  }

  /** Returns true if field uptime is set (has been assigned a value) and false otherwise */
  public boolean isSetUptime() {
    return __isset_bit_vector.get(__UPTIME_ISSET_ID);
  }

  public void setUptimeIsSet(boolean value) {
    __isset_bit_vector.set(__UPTIME_ISSET_ID, value);
  }

  public boolean isWifiEnabled() {
    return this.wifiEnabled;
  }

  public Sample setWifiEnabled(boolean wifiEnabled) {
    this.wifiEnabled = wifiEnabled;
    setWifiEnabledIsSet(true);
    return this;
  }

  public void unsetWifiEnabled() {
    __isset_bit_vector.clear(__WIFIENABLED_ISSET_ID);
  }

  /** Returns true if field wifiEnabled is set (has been assigned a value) and false otherwise */
  public boolean isSetWifiEnabled() {
    return __isset_bit_vector.get(__WIFIENABLED_ISSET_ID);
  }

  public void setWifiEnabledIsSet(boolean value) {
    __isset_bit_vector.set(__WIFIENABLED_ISSET_ID, value);
  }

  public int getWifiSignalStrength() {
    return this.wifiSignalStrength;
  }

  public Sample setWifiSignalStrength(int wifiSignalStrength) {
    this.wifiSignalStrength = wifiSignalStrength;
    setWifiSignalStrengthIsSet(true);
    return this;
  }

  public void unsetWifiSignalStrength() {
    __isset_bit_vector.clear(__WIFISIGNALSTRENGTH_ISSET_ID);
  }

  /** Returns true if field wifiSignalStrength is set (has been assigned a value) and false otherwise */
  public boolean isSetWifiSignalStrength() {
    return __isset_bit_vector.get(__WIFISIGNALSTRENGTH_ISSET_ID);
  }

  public void setWifiSignalStrengthIsSet(boolean value) {
    __isset_bit_vector.set(__WIFISIGNALSTRENGTH_ISSET_ID, value);
  }

  public int getWifiLinkSpeed() {
    return this.wifiLinkSpeed;
  }

  public Sample setWifiLinkSpeed(int wifiLinkSpeed) {
    this.wifiLinkSpeed = wifiLinkSpeed;
    setWifiLinkSpeedIsSet(true);
    return this;
  }

  public void unsetWifiLinkSpeed() {
    __isset_bit_vector.clear(__WIFILINKSPEED_ISSET_ID);
  }

  /** Returns true if field wifiLinkSpeed is set (has been assigned a value) and false otherwise */
  public boolean isSetWifiLinkSpeed() {
    return __isset_bit_vector.get(__WIFILINKSPEED_ISSET_ID);
  }

  public void setWifiLinkSpeedIsSet(boolean value) {
    __isset_bit_vector.set(__WIFILINKSPEED_ISSET_ID, value);
  }

  public int getLocationProvidersSize() {
    return (this.locationProviders == null) ? 0 : this.locationProviders.size();
  }

  public java.util.Iterator<String> getLocationProvidersIterator() {
    return (this.locationProviders == null) ? null : this.locationProviders.iterator();
  }

  public void addToLocationProviders(String elem) {
    if (this.locationProviders == null) {
      this.locationProviders = new ArrayList<String>();
    }
    this.locationProviders.add(elem);
  }

  public List<String> getLocationProviders() {
    return this.locationProviders;
  }

  public Sample setLocationProviders(List<String> locationProviders) {
    this.locationProviders = locationProviders;
    return this;
  }

  public void unsetLocationProviders() {
    this.locationProviders = null;
  }

  /** Returns true if field locationProviders is set (has been assigned a value) and false otherwise */
  public boolean isSetLocationProviders() {
    return this.locationProviders != null;
  }

  public void setLocationProvidersIsSet(boolean value) {
    if (!value) {
      this.locationProviders = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case UU_ID:
      if (value == null) {
        unsetUuId();
      } else {
        setUuId((String)value);
      }
      break;

    case TIMESTAMP:
      if (value == null) {
        unsetTimestamp();
      } else {
        setTimestamp((Double)value);
      }
      break;

    case PI_LIST:
      if (value == null) {
        unsetPiList();
      } else {
        setPiList((List<ProcessInfo>)value);
      }
      break;

    case BATTERY_STATE:
      if (value == null) {
        unsetBatteryState();
      } else {
        setBatteryState((String)value);
      }
      break;

    case BATTERY_LEVEL:
      if (value == null) {
        unsetBatteryLevel();
      } else {
        setBatteryLevel((Double)value);
      }
      break;

    case MEMORY_WIRED:
      if (value == null) {
        unsetMemoryWired();
      } else {
        setMemoryWired((Integer)value);
      }
      break;

    case MEMORY_ACTIVE:
      if (value == null) {
        unsetMemoryActive();
      } else {
        setMemoryActive((Integer)value);
      }
      break;

    case MEMORY_INACTIVE:
      if (value == null) {
        unsetMemoryInactive();
      } else {
        setMemoryInactive((Integer)value);
      }
      break;

    case MEMORY_FREE:
      if (value == null) {
        unsetMemoryFree();
      } else {
        setMemoryFree((Integer)value);
      }
      break;

    case MEMORY_USER:
      if (value == null) {
        unsetMemoryUser();
      } else {
        setMemoryUser((Integer)value);
      }
      break;

    case TRIGGERED_BY:
      if (value == null) {
        unsetTriggeredBy();
      } else {
        setTriggeredBy((String)value);
      }
      break;

    case NETWORK_STATUS:
      if (value == null) {
        unsetNetworkStatus();
      } else {
        setNetworkStatus((String)value);
      }
      break;

    case DISTANCE_TRAVELED:
      if (value == null) {
        unsetDistanceTraveled();
      } else {
        setDistanceTraveled((Double)value);
      }
      break;

    case SCREEN_BRIGHTNESS:
      if (value == null) {
        unsetScreenBrightness();
      } else {
        setScreenBrightness((Integer)value);
      }
      break;

    case NETWORK_TYPE:
      if (value == null) {
        unsetNetworkType();
      } else {
        setNetworkType((String)value);
      }
      break;

    case MOBILE_NETWORK_TYPE:
      if (value == null) {
        unsetMobileNetworkType();
      } else {
        setMobileNetworkType((String)value);
      }
      break;

    case MOBILE_DATA_STATUS:
      if (value == null) {
        unsetMobileDataStatus();
      } else {
        setMobileDataStatus((String)value);
      }
      break;

    case MOBILE_DATA_ACTIVITY:
      if (value == null) {
        unsetMobileDataActivity();
      } else {
        setMobileDataActivity((String)value);
      }
      break;

    case ROAMING_ENABLED:
      if (value == null) {
        unsetRoamingEnabled();
      } else {
        setRoamingEnabled((Boolean)value);
      }
      break;

    case BATTERY_CHARGER:
      if (value == null) {
        unsetBatteryCharger();
      } else {
        setBatteryCharger((String)value);
      }
      break;

    case BATTERY_HEALTH:
      if (value == null) {
        unsetBatteryHealth();
      } else {
        setBatteryHealth((String)value);
      }
      break;

    case BATTERY_VOLTAGE:
      if (value == null) {
        unsetBatteryVoltage();
      } else {
        setBatteryVoltage((Double)value);
      }
      break;

    case BATTERY_TEMPERATURE:
      if (value == null) {
        unsetBatteryTemperature();
      } else {
        setBatteryTemperature((Double)value);
      }
      break;

    case BATTERY_TECHNOLOGY:
      if (value == null) {
        unsetBatteryTechnology();
      } else {
        setBatteryTechnology((String)value);
      }
      break;

    case CPU_TIME:
      if (value == null) {
        unsetCpuTime();
      } else {
        setCpuTime((Double)value);
      }
      break;

    case IDLE_TIME:
      if (value == null) {
        unsetIdleTime();
      } else {
        setIdleTime((Double)value);
      }
      break;

    case UPTIME:
      if (value == null) {
        unsetUptime();
      } else {
        setUptime((Double)value);
      }
      break;

    case WIFI_ENABLED:
      if (value == null) {
        unsetWifiEnabled();
      } else {
        setWifiEnabled((Boolean)value);
      }
      break;

    case WIFI_SIGNAL_STRENGTH:
      if (value == null) {
        unsetWifiSignalStrength();
      } else {
        setWifiSignalStrength((Integer)value);
      }
      break;

    case WIFI_LINK_SPEED:
      if (value == null) {
        unsetWifiLinkSpeed();
      } else {
        setWifiLinkSpeed((Integer)value);
      }
      break;

    case LOCATION_PROVIDERS:
      if (value == null) {
        unsetLocationProviders();
      } else {
        setLocationProviders((List<String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case UU_ID:
      return getUuId();

    case TIMESTAMP:
      return Double.valueOf(getTimestamp());

    case PI_LIST:
      return getPiList();

    case BATTERY_STATE:
      return getBatteryState();

    case BATTERY_LEVEL:
      return Double.valueOf(getBatteryLevel());

    case MEMORY_WIRED:
      return Integer.valueOf(getMemoryWired());

    case MEMORY_ACTIVE:
      return Integer.valueOf(getMemoryActive());

    case MEMORY_INACTIVE:
      return Integer.valueOf(getMemoryInactive());

    case MEMORY_FREE:
      return Integer.valueOf(getMemoryFree());

    case MEMORY_USER:
      return Integer.valueOf(getMemoryUser());

    case TRIGGERED_BY:
      return getTriggeredBy();

    case NETWORK_STATUS:
      return getNetworkStatus();

    case DISTANCE_TRAVELED:
      return Double.valueOf(getDistanceTraveled());

    case SCREEN_BRIGHTNESS:
      return Integer.valueOf(getScreenBrightness());

    case NETWORK_TYPE:
      return getNetworkType();

    case MOBILE_NETWORK_TYPE:
      return getMobileNetworkType();

    case MOBILE_DATA_STATUS:
      return getMobileDataStatus();

    case MOBILE_DATA_ACTIVITY:
      return getMobileDataActivity();

    case ROAMING_ENABLED:
      return Boolean.valueOf(isRoamingEnabled());

    case BATTERY_CHARGER:
      return getBatteryCharger();

    case BATTERY_HEALTH:
      return getBatteryHealth();

    case BATTERY_VOLTAGE:
      return Double.valueOf(getBatteryVoltage());

    case BATTERY_TEMPERATURE:
      return Double.valueOf(getBatteryTemperature());

    case BATTERY_TECHNOLOGY:
      return getBatteryTechnology();

    case CPU_TIME:
      return Double.valueOf(getCpuTime());

    case IDLE_TIME:
      return Double.valueOf(getIdleTime());

    case UPTIME:
      return Double.valueOf(getUptime());

    case WIFI_ENABLED:
      return Boolean.valueOf(isWifiEnabled());

    case WIFI_SIGNAL_STRENGTH:
      return Integer.valueOf(getWifiSignalStrength());

    case WIFI_LINK_SPEED:
      return Integer.valueOf(getWifiLinkSpeed());

    case LOCATION_PROVIDERS:
      return getLocationProviders();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case UU_ID:
      return isSetUuId();
    case TIMESTAMP:
      return isSetTimestamp();
    case PI_LIST:
      return isSetPiList();
    case BATTERY_STATE:
      return isSetBatteryState();
    case BATTERY_LEVEL:
      return isSetBatteryLevel();
    case MEMORY_WIRED:
      return isSetMemoryWired();
    case MEMORY_ACTIVE:
      return isSetMemoryActive();
    case MEMORY_INACTIVE:
      return isSetMemoryInactive();
    case MEMORY_FREE:
      return isSetMemoryFree();
    case MEMORY_USER:
      return isSetMemoryUser();
    case TRIGGERED_BY:
      return isSetTriggeredBy();
    case NETWORK_STATUS:
      return isSetNetworkStatus();
    case DISTANCE_TRAVELED:
      return isSetDistanceTraveled();
    case SCREEN_BRIGHTNESS:
      return isSetScreenBrightness();
    case NETWORK_TYPE:
      return isSetNetworkType();
    case MOBILE_NETWORK_TYPE:
      return isSetMobileNetworkType();
    case MOBILE_DATA_STATUS:
      return isSetMobileDataStatus();
    case MOBILE_DATA_ACTIVITY:
      return isSetMobileDataActivity();
    case ROAMING_ENABLED:
      return isSetRoamingEnabled();
    case BATTERY_CHARGER:
      return isSetBatteryCharger();
    case BATTERY_HEALTH:
      return isSetBatteryHealth();
    case BATTERY_VOLTAGE:
      return isSetBatteryVoltage();
    case BATTERY_TEMPERATURE:
      return isSetBatteryTemperature();
    case BATTERY_TECHNOLOGY:
      return isSetBatteryTechnology();
    case CPU_TIME:
      return isSetCpuTime();
    case IDLE_TIME:
      return isSetIdleTime();
    case UPTIME:
      return isSetUptime();
    case WIFI_ENABLED:
      return isSetWifiEnabled();
    case WIFI_SIGNAL_STRENGTH:
      return isSetWifiSignalStrength();
    case WIFI_LINK_SPEED:
      return isSetWifiLinkSpeed();
    case LOCATION_PROVIDERS:
      return isSetLocationProviders();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Sample)
      return this.equals((Sample)that);
    return false;
  }

  public boolean equals(Sample that) {
    if (that == null)
      return false;

    boolean this_present_uuId = true && this.isSetUuId();
    boolean that_present_uuId = true && that.isSetUuId();
    if (this_present_uuId || that_present_uuId) {
      if (!(this_present_uuId && that_present_uuId))
        return false;
      if (!this.uuId.equals(that.uuId))
        return false;
    }

    boolean this_present_timestamp = true && this.isSetTimestamp();
    boolean that_present_timestamp = true && that.isSetTimestamp();
    if (this_present_timestamp || that_present_timestamp) {
      if (!(this_present_timestamp && that_present_timestamp))
        return false;
      if (this.timestamp != that.timestamp)
        return false;
    }

    boolean this_present_piList = true && this.isSetPiList();
    boolean that_present_piList = true && that.isSetPiList();
    if (this_present_piList || that_present_piList) {
      if (!(this_present_piList && that_present_piList))
        return false;
      if (!this.piList.equals(that.piList))
        return false;
    }

    boolean this_present_batteryState = true && this.isSetBatteryState();
    boolean that_present_batteryState = true && that.isSetBatteryState();
    if (this_present_batteryState || that_present_batteryState) {
      if (!(this_present_batteryState && that_present_batteryState))
        return false;
      if (!this.batteryState.equals(that.batteryState))
        return false;
    }

    boolean this_present_batteryLevel = true && this.isSetBatteryLevel();
    boolean that_present_batteryLevel = true && that.isSetBatteryLevel();
    if (this_present_batteryLevel || that_present_batteryLevel) {
      if (!(this_present_batteryLevel && that_present_batteryLevel))
        return false;
      if (this.batteryLevel != that.batteryLevel)
        return false;
    }

    boolean this_present_memoryWired = true && this.isSetMemoryWired();
    boolean that_present_memoryWired = true && that.isSetMemoryWired();
    if (this_present_memoryWired || that_present_memoryWired) {
      if (!(this_present_memoryWired && that_present_memoryWired))
        return false;
      if (this.memoryWired != that.memoryWired)
        return false;
    }

    boolean this_present_memoryActive = true && this.isSetMemoryActive();
    boolean that_present_memoryActive = true && that.isSetMemoryActive();
    if (this_present_memoryActive || that_present_memoryActive) {
      if (!(this_present_memoryActive && that_present_memoryActive))
        return false;
      if (this.memoryActive != that.memoryActive)
        return false;
    }

    boolean this_present_memoryInactive = true && this.isSetMemoryInactive();
    boolean that_present_memoryInactive = true && that.isSetMemoryInactive();
    if (this_present_memoryInactive || that_present_memoryInactive) {
      if (!(this_present_memoryInactive && that_present_memoryInactive))
        return false;
      if (this.memoryInactive != that.memoryInactive)
        return false;
    }

    boolean this_present_memoryFree = true && this.isSetMemoryFree();
    boolean that_present_memoryFree = true && that.isSetMemoryFree();
    if (this_present_memoryFree || that_present_memoryFree) {
      if (!(this_present_memoryFree && that_present_memoryFree))
        return false;
      if (this.memoryFree != that.memoryFree)
        return false;
    }

    boolean this_present_memoryUser = true && this.isSetMemoryUser();
    boolean that_present_memoryUser = true && that.isSetMemoryUser();
    if (this_present_memoryUser || that_present_memoryUser) {
      if (!(this_present_memoryUser && that_present_memoryUser))
        return false;
      if (this.memoryUser != that.memoryUser)
        return false;
    }

    boolean this_present_triggeredBy = true && this.isSetTriggeredBy();
    boolean that_present_triggeredBy = true && that.isSetTriggeredBy();
    if (this_present_triggeredBy || that_present_triggeredBy) {
      if (!(this_present_triggeredBy && that_present_triggeredBy))
        return false;
      if (!this.triggeredBy.equals(that.triggeredBy))
        return false;
    }

    boolean this_present_networkStatus = true && this.isSetNetworkStatus();
    boolean that_present_networkStatus = true && that.isSetNetworkStatus();
    if (this_present_networkStatus || that_present_networkStatus) {
      if (!(this_present_networkStatus && that_present_networkStatus))
        return false;
      if (!this.networkStatus.equals(that.networkStatus))
        return false;
    }

    boolean this_present_distanceTraveled = true && this.isSetDistanceTraveled();
    boolean that_present_distanceTraveled = true && that.isSetDistanceTraveled();
    if (this_present_distanceTraveled || that_present_distanceTraveled) {
      if (!(this_present_distanceTraveled && that_present_distanceTraveled))
        return false;
      if (this.distanceTraveled != that.distanceTraveled)
        return false;
    }

    boolean this_present_screenBrightness = true && this.isSetScreenBrightness();
    boolean that_present_screenBrightness = true && that.isSetScreenBrightness();
    if (this_present_screenBrightness || that_present_screenBrightness) {
      if (!(this_present_screenBrightness && that_present_screenBrightness))
        return false;
      if (this.screenBrightness != that.screenBrightness)
        return false;
    }

    boolean this_present_networkType = true && this.isSetNetworkType();
    boolean that_present_networkType = true && that.isSetNetworkType();
    if (this_present_networkType || that_present_networkType) {
      if (!(this_present_networkType && that_present_networkType))
        return false;
      if (!this.networkType.equals(that.networkType))
        return false;
    }

    boolean this_present_mobileNetworkType = true && this.isSetMobileNetworkType();
    boolean that_present_mobileNetworkType = true && that.isSetMobileNetworkType();
    if (this_present_mobileNetworkType || that_present_mobileNetworkType) {
      if (!(this_present_mobileNetworkType && that_present_mobileNetworkType))
        return false;
      if (!this.mobileNetworkType.equals(that.mobileNetworkType))
        return false;
    }

    boolean this_present_mobileDataStatus = true && this.isSetMobileDataStatus();
    boolean that_present_mobileDataStatus = true && that.isSetMobileDataStatus();
    if (this_present_mobileDataStatus || that_present_mobileDataStatus) {
      if (!(this_present_mobileDataStatus && that_present_mobileDataStatus))
        return false;
      if (!this.mobileDataStatus.equals(that.mobileDataStatus))
        return false;
    }

    boolean this_present_mobileDataActivity = true && this.isSetMobileDataActivity();
    boolean that_present_mobileDataActivity = true && that.isSetMobileDataActivity();
    if (this_present_mobileDataActivity || that_present_mobileDataActivity) {
      if (!(this_present_mobileDataActivity && that_present_mobileDataActivity))
        return false;
      if (!this.mobileDataActivity.equals(that.mobileDataActivity))
        return false;
    }

    boolean this_present_roamingEnabled = true && this.isSetRoamingEnabled();
    boolean that_present_roamingEnabled = true && that.isSetRoamingEnabled();
    if (this_present_roamingEnabled || that_present_roamingEnabled) {
      if (!(this_present_roamingEnabled && that_present_roamingEnabled))
        return false;
      if (this.roamingEnabled != that.roamingEnabled)
        return false;
    }

    boolean this_present_batteryCharger = true && this.isSetBatteryCharger();
    boolean that_present_batteryCharger = true && that.isSetBatteryCharger();
    if (this_present_batteryCharger || that_present_batteryCharger) {
      if (!(this_present_batteryCharger && that_present_batteryCharger))
        return false;
      if (!this.batteryCharger.equals(that.batteryCharger))
        return false;
    }

    boolean this_present_batteryHealth = true && this.isSetBatteryHealth();
    boolean that_present_batteryHealth = true && that.isSetBatteryHealth();
    if (this_present_batteryHealth || that_present_batteryHealth) {
      if (!(this_present_batteryHealth && that_present_batteryHealth))
        return false;
      if (!this.batteryHealth.equals(that.batteryHealth))
        return false;
    }

    boolean this_present_batteryVoltage = true && this.isSetBatteryVoltage();
    boolean that_present_batteryVoltage = true && that.isSetBatteryVoltage();
    if (this_present_batteryVoltage || that_present_batteryVoltage) {
      if (!(this_present_batteryVoltage && that_present_batteryVoltage))
        return false;
      if (this.batteryVoltage != that.batteryVoltage)
        return false;
    }

    boolean this_present_batteryTemperature = true && this.isSetBatteryTemperature();
    boolean that_present_batteryTemperature = true && that.isSetBatteryTemperature();
    if (this_present_batteryTemperature || that_present_batteryTemperature) {
      if (!(this_present_batteryTemperature && that_present_batteryTemperature))
        return false;
      if (this.batteryTemperature != that.batteryTemperature)
        return false;
    }

    boolean this_present_batteryTechnology = true && this.isSetBatteryTechnology();
    boolean that_present_batteryTechnology = true && that.isSetBatteryTechnology();
    if (this_present_batteryTechnology || that_present_batteryTechnology) {
      if (!(this_present_batteryTechnology && that_present_batteryTechnology))
        return false;
      if (!this.batteryTechnology.equals(that.batteryTechnology))
        return false;
    }

    boolean this_present_cpuTime = true && this.isSetCpuTime();
    boolean that_present_cpuTime = true && that.isSetCpuTime();
    if (this_present_cpuTime || that_present_cpuTime) {
      if (!(this_present_cpuTime && that_present_cpuTime))
        return false;
      if (this.cpuTime != that.cpuTime)
        return false;
    }

    boolean this_present_idleTime = true && this.isSetIdleTime();
    boolean that_present_idleTime = true && that.isSetIdleTime();
    if (this_present_idleTime || that_present_idleTime) {
      if (!(this_present_idleTime && that_present_idleTime))
        return false;
      if (this.idleTime != that.idleTime)
        return false;
    }

    boolean this_present_uptime = true && this.isSetUptime();
    boolean that_present_uptime = true && that.isSetUptime();
    if (this_present_uptime || that_present_uptime) {
      if (!(this_present_uptime && that_present_uptime))
        return false;
      if (this.uptime != that.uptime)
        return false;
    }

    boolean this_present_wifiEnabled = true && this.isSetWifiEnabled();
    boolean that_present_wifiEnabled = true && that.isSetWifiEnabled();
    if (this_present_wifiEnabled || that_present_wifiEnabled) {
      if (!(this_present_wifiEnabled && that_present_wifiEnabled))
        return false;
      if (this.wifiEnabled != that.wifiEnabled)
        return false;
    }

    boolean this_present_wifiSignalStrength = true && this.isSetWifiSignalStrength();
    boolean that_present_wifiSignalStrength = true && that.isSetWifiSignalStrength();
    if (this_present_wifiSignalStrength || that_present_wifiSignalStrength) {
      if (!(this_present_wifiSignalStrength && that_present_wifiSignalStrength))
        return false;
      if (this.wifiSignalStrength != that.wifiSignalStrength)
        return false;
    }

    boolean this_present_wifiLinkSpeed = true && this.isSetWifiLinkSpeed();
    boolean that_present_wifiLinkSpeed = true && that.isSetWifiLinkSpeed();
    if (this_present_wifiLinkSpeed || that_present_wifiLinkSpeed) {
      if (!(this_present_wifiLinkSpeed && that_present_wifiLinkSpeed))
        return false;
      if (this.wifiLinkSpeed != that.wifiLinkSpeed)
        return false;
    }

    boolean this_present_locationProviders = true && this.isSetLocationProviders();
    boolean that_present_locationProviders = true && that.isSetLocationProviders();
    if (this_present_locationProviders || that_present_locationProviders) {
      if (!(this_present_locationProviders && that_present_locationProviders))
        return false;
      if (!this.locationProviders.equals(that.locationProviders))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(Sample other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Sample typedOther = (Sample)other;

    lastComparison = Boolean.valueOf(isSetUuId()).compareTo(typedOther.isSetUuId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUuId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uuId, typedOther.uuId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTimestamp()).compareTo(typedOther.isSetTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, typedOther.timestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPiList()).compareTo(typedOther.isSetPiList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPiList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.piList, typedOther.piList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBatteryState()).compareTo(typedOther.isSetBatteryState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBatteryState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.batteryState, typedOther.batteryState);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBatteryLevel()).compareTo(typedOther.isSetBatteryLevel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBatteryLevel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.batteryLevel, typedOther.batteryLevel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMemoryWired()).compareTo(typedOther.isSetMemoryWired());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMemoryWired()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.memoryWired, typedOther.memoryWired);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMemoryActive()).compareTo(typedOther.isSetMemoryActive());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMemoryActive()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.memoryActive, typedOther.memoryActive);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMemoryInactive()).compareTo(typedOther.isSetMemoryInactive());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMemoryInactive()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.memoryInactive, typedOther.memoryInactive);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMemoryFree()).compareTo(typedOther.isSetMemoryFree());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMemoryFree()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.memoryFree, typedOther.memoryFree);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMemoryUser()).compareTo(typedOther.isSetMemoryUser());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMemoryUser()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.memoryUser, typedOther.memoryUser);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTriggeredBy()).compareTo(typedOther.isSetTriggeredBy());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTriggeredBy()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.triggeredBy, typedOther.triggeredBy);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNetworkStatus()).compareTo(typedOther.isSetNetworkStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNetworkStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.networkStatus, typedOther.networkStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDistanceTraveled()).compareTo(typedOther.isSetDistanceTraveled());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDistanceTraveled()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.distanceTraveled, typedOther.distanceTraveled);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetScreenBrightness()).compareTo(typedOther.isSetScreenBrightness());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetScreenBrightness()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.screenBrightness, typedOther.screenBrightness);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNetworkType()).compareTo(typedOther.isSetNetworkType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNetworkType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.networkType, typedOther.networkType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMobileNetworkType()).compareTo(typedOther.isSetMobileNetworkType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMobileNetworkType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mobileNetworkType, typedOther.mobileNetworkType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMobileDataStatus()).compareTo(typedOther.isSetMobileDataStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMobileDataStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mobileDataStatus, typedOther.mobileDataStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMobileDataActivity()).compareTo(typedOther.isSetMobileDataActivity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMobileDataActivity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mobileDataActivity, typedOther.mobileDataActivity);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRoamingEnabled()).compareTo(typedOther.isSetRoamingEnabled());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRoamingEnabled()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.roamingEnabled, typedOther.roamingEnabled);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBatteryCharger()).compareTo(typedOther.isSetBatteryCharger());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBatteryCharger()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.batteryCharger, typedOther.batteryCharger);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBatteryHealth()).compareTo(typedOther.isSetBatteryHealth());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBatteryHealth()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.batteryHealth, typedOther.batteryHealth);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBatteryVoltage()).compareTo(typedOther.isSetBatteryVoltage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBatteryVoltage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.batteryVoltage, typedOther.batteryVoltage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBatteryTemperature()).compareTo(typedOther.isSetBatteryTemperature());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBatteryTemperature()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.batteryTemperature, typedOther.batteryTemperature);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBatteryTechnology()).compareTo(typedOther.isSetBatteryTechnology());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBatteryTechnology()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.batteryTechnology, typedOther.batteryTechnology);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCpuTime()).compareTo(typedOther.isSetCpuTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCpuTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cpuTime, typedOther.cpuTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIdleTime()).compareTo(typedOther.isSetIdleTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIdleTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.idleTime, typedOther.idleTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUptime()).compareTo(typedOther.isSetUptime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUptime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uptime, typedOther.uptime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWifiEnabled()).compareTo(typedOther.isSetWifiEnabled());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWifiEnabled()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.wifiEnabled, typedOther.wifiEnabled);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWifiSignalStrength()).compareTo(typedOther.isSetWifiSignalStrength());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWifiSignalStrength()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.wifiSignalStrength, typedOther.wifiSignalStrength);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWifiLinkSpeed()).compareTo(typedOther.isSetWifiLinkSpeed());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWifiLinkSpeed()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.wifiLinkSpeed, typedOther.wifiLinkSpeed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLocationProviders()).compareTo(typedOther.isSetLocationProviders());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLocationProviders()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.locationProviders, typedOther.locationProviders);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Sample(");
    boolean first = true;

    sb.append("uuId:");
    if (this.uuId == null) {
      sb.append("null");
    } else {
      sb.append(this.uuId);
    }
    first = false;
    if (isSetTimestamp()) {
      if (!first) sb.append(", ");
      sb.append("timestamp:");
      sb.append(this.timestamp);
      first = false;
    }
    if (isSetPiList()) {
      if (!first) sb.append(", ");
      sb.append("piList:");
      if (this.piList == null) {
        sb.append("null");
      } else {
        sb.append(this.piList);
      }
      first = false;
    }
    if (isSetBatteryState()) {
      if (!first) sb.append(", ");
      sb.append("batteryState:");
      if (this.batteryState == null) {
        sb.append("null");
      } else {
        sb.append(this.batteryState);
      }
      first = false;
    }
    if (isSetBatteryLevel()) {
      if (!first) sb.append(", ");
      sb.append("batteryLevel:");
      sb.append(this.batteryLevel);
      first = false;
    }
    if (isSetMemoryWired()) {
      if (!first) sb.append(", ");
      sb.append("memoryWired:");
      sb.append(this.memoryWired);
      first = false;
    }
    if (isSetMemoryActive()) {
      if (!first) sb.append(", ");
      sb.append("memoryActive:");
      sb.append(this.memoryActive);
      first = false;
    }
    if (isSetMemoryInactive()) {
      if (!first) sb.append(", ");
      sb.append("memoryInactive:");
      sb.append(this.memoryInactive);
      first = false;
    }
    if (isSetMemoryFree()) {
      if (!first) sb.append(", ");
      sb.append("memoryFree:");
      sb.append(this.memoryFree);
      first = false;
    }
    if (isSetMemoryUser()) {
      if (!first) sb.append(", ");
      sb.append("memoryUser:");
      sb.append(this.memoryUser);
      first = false;
    }
    if (isSetTriggeredBy()) {
      if (!first) sb.append(", ");
      sb.append("triggeredBy:");
      if (this.triggeredBy == null) {
        sb.append("null");
      } else {
        sb.append(this.triggeredBy);
      }
      first = false;
    }
    if (isSetNetworkStatus()) {
      if (!first) sb.append(", ");
      sb.append("networkStatus:");
      if (this.networkStatus == null) {
        sb.append("null");
      } else {
        sb.append(this.networkStatus);
      }
      first = false;
    }
    if (isSetDistanceTraveled()) {
      if (!first) sb.append(", ");
      sb.append("distanceTraveled:");
      sb.append(this.distanceTraveled);
      first = false;
    }
    if (isSetScreenBrightness()) {
      if (!first) sb.append(", ");
      sb.append("screenBrightness:");
      sb.append(this.screenBrightness);
      first = false;
    }
    if (isSetNetworkType()) {
      if (!first) sb.append(", ");
      sb.append("networkType:");
      if (this.networkType == null) {
        sb.append("null");
      } else {
        sb.append(this.networkType);
      }
      first = false;
    }
    if (isSetMobileNetworkType()) {
      if (!first) sb.append(", ");
      sb.append("mobileNetworkType:");
      if (this.mobileNetworkType == null) {
        sb.append("null");
      } else {
        sb.append(this.mobileNetworkType);
      }
      first = false;
    }
    if (isSetMobileDataStatus()) {
      if (!first) sb.append(", ");
      sb.append("mobileDataStatus:");
      if (this.mobileDataStatus == null) {
        sb.append("null");
      } else {
        sb.append(this.mobileDataStatus);
      }
      first = false;
    }
    if (isSetMobileDataActivity()) {
      if (!first) sb.append(", ");
      sb.append("mobileDataActivity:");
      if (this.mobileDataActivity == null) {
        sb.append("null");
      } else {
        sb.append(this.mobileDataActivity);
      }
      first = false;
    }
    if (isSetRoamingEnabled()) {
      if (!first) sb.append(", ");
      sb.append("roamingEnabled:");
      sb.append(this.roamingEnabled);
      first = false;
    }
    if (isSetBatteryCharger()) {
      if (!first) sb.append(", ");
      sb.append("batteryCharger:");
      if (this.batteryCharger == null) {
        sb.append("null");
      } else {
        sb.append(this.batteryCharger);
      }
      first = false;
    }
    if (isSetBatteryHealth()) {
      if (!first) sb.append(", ");
      sb.append("batteryHealth:");
      if (this.batteryHealth == null) {
        sb.append("null");
      } else {
        sb.append(this.batteryHealth);
      }
      first = false;
    }
    if (isSetBatteryVoltage()) {
      if (!first) sb.append(", ");
      sb.append("batteryVoltage:");
      sb.append(this.batteryVoltage);
      first = false;
    }
    if (isSetBatteryTemperature()) {
      if (!first) sb.append(", ");
      sb.append("batteryTemperature:");
      sb.append(this.batteryTemperature);
      first = false;
    }
    if (isSetBatteryTechnology()) {
      if (!first) sb.append(", ");
      sb.append("batteryTechnology:");
      if (this.batteryTechnology == null) {
        sb.append("null");
      } else {
        sb.append(this.batteryTechnology);
      }
      first = false;
    }
    if (isSetCpuTime()) {
      if (!first) sb.append(", ");
      sb.append("cpuTime:");
      sb.append(this.cpuTime);
      first = false;
    }
    if (isSetIdleTime()) {
      if (!first) sb.append(", ");
      sb.append("idleTime:");
      sb.append(this.idleTime);
      first = false;
    }
    if (isSetUptime()) {
      if (!first) sb.append(", ");
      sb.append("uptime:");
      sb.append(this.uptime);
      first = false;
    }
    if (isSetWifiEnabled()) {
      if (!first) sb.append(", ");
      sb.append("wifiEnabled:");
      sb.append(this.wifiEnabled);
      first = false;
    }
    if (isSetWifiSignalStrength()) {
      if (!first) sb.append(", ");
      sb.append("wifiSignalStrength:");
      sb.append(this.wifiSignalStrength);
      first = false;
    }
    if (isSetWifiLinkSpeed()) {
      if (!first) sb.append(", ");
      sb.append("wifiLinkSpeed:");
      sb.append(this.wifiLinkSpeed);
      first = false;
    }
    if (isSetLocationProviders()) {
      if (!first) sb.append(", ");
      sb.append("locationProviders:");
      if (this.locationProviders == null) {
        sb.append("null");
      } else {
        sb.append(this.locationProviders);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (uuId == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'uuId' was not present! Struct: " + toString());
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te.getMessage());
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te.getMessage());
    }
  }

  private static class SampleStandardSchemeFactory implements SchemeFactory {
    public SampleStandardScheme getScheme() {
      return new SampleStandardScheme();
    }
  }

  private static class SampleStandardScheme extends StandardScheme<Sample> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Sample struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // UU_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.uuId = iprot.readString();
              struct.setUuIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.timestamp = iprot.readDouble();
              struct.setTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PI_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.piList = new ArrayList<ProcessInfo>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  ProcessInfo _elem2; // required
                  _elem2 = new ProcessInfo();
                  _elem2.read(iprot);
                  struct.piList.add(_elem2);
                }
                iprot.readListEnd();
              }
              struct.setPiListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // BATTERY_STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.batteryState = iprot.readString();
              struct.setBatteryStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // BATTERY_LEVEL
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.batteryLevel = iprot.readDouble();
              struct.setBatteryLevelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // MEMORY_WIRED
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.memoryWired = iprot.readI32();
              struct.setMemoryWiredIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // MEMORY_ACTIVE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.memoryActive = iprot.readI32();
              struct.setMemoryActiveIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // MEMORY_INACTIVE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.memoryInactive = iprot.readI32();
              struct.setMemoryInactiveIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // MEMORY_FREE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.memoryFree = iprot.readI32();
              struct.setMemoryFreeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // MEMORY_USER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.memoryUser = iprot.readI32();
              struct.setMemoryUserIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // TRIGGERED_BY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.triggeredBy = iprot.readString();
              struct.setTriggeredByIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // NETWORK_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.networkStatus = iprot.readString();
              struct.setNetworkStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // DISTANCE_TRAVELED
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.distanceTraveled = iprot.readDouble();
              struct.setDistanceTraveledIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // SCREEN_BRIGHTNESS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.screenBrightness = iprot.readI32();
              struct.setScreenBrightnessIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // NETWORK_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.networkType = iprot.readString();
              struct.setNetworkTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // MOBILE_NETWORK_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.mobileNetworkType = iprot.readString();
              struct.setMobileNetworkTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // MOBILE_DATA_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.mobileDataStatus = iprot.readString();
              struct.setMobileDataStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // MOBILE_DATA_ACTIVITY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.mobileDataActivity = iprot.readString();
              struct.setMobileDataActivityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // ROAMING_ENABLED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.roamingEnabled = iprot.readBool();
              struct.setRoamingEnabledIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // BATTERY_CHARGER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.batteryCharger = iprot.readString();
              struct.setBatteryChargerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // BATTERY_HEALTH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.batteryHealth = iprot.readString();
              struct.setBatteryHealthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // BATTERY_VOLTAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.batteryVoltage = iprot.readDouble();
              struct.setBatteryVoltageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // BATTERY_TEMPERATURE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.batteryTemperature = iprot.readDouble();
              struct.setBatteryTemperatureIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // BATTERY_TECHNOLOGY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.batteryTechnology = iprot.readString();
              struct.setBatteryTechnologyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // CPU_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.cpuTime = iprot.readDouble();
              struct.setCpuTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // IDLE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.idleTime = iprot.readDouble();
              struct.setIdleTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // UPTIME
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.uptime = iprot.readDouble();
              struct.setUptimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // WIFI_ENABLED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.wifiEnabled = iprot.readBool();
              struct.setWifiEnabledIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 29: // WIFI_SIGNAL_STRENGTH
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.wifiSignalStrength = iprot.readI32();
              struct.setWifiSignalStrengthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // WIFI_LINK_SPEED
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.wifiLinkSpeed = iprot.readI32();
              struct.setWifiLinkSpeedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 31: // LOCATION_PROVIDERS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.locationProviders = new ArrayList<String>(_list3.size);
                for (int _i4 = 0; _i4 < _list3.size; ++_i4)
                {
                  String _elem5; // required
                  _elem5 = iprot.readString();
                  struct.locationProviders.add(_elem5);
                }
                iprot.readListEnd();
              }
              struct.setLocationProvidersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Sample struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.uuId != null) {
        oprot.writeFieldBegin(UU_ID_FIELD_DESC);
        oprot.writeString(struct.uuId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTimestamp()) {
        oprot.writeFieldBegin(TIMESTAMP_FIELD_DESC);
        oprot.writeDouble(struct.timestamp);
        oprot.writeFieldEnd();
      }
      if (struct.piList != null) {
        if (struct.isSetPiList()) {
          oprot.writeFieldBegin(PI_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.piList.size()));
            for (ProcessInfo _iter6 : struct.piList)
            {
              _iter6.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.batteryState != null) {
        if (struct.isSetBatteryState()) {
          oprot.writeFieldBegin(BATTERY_STATE_FIELD_DESC);
          oprot.writeString(struct.batteryState);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetBatteryLevel()) {
        oprot.writeFieldBegin(BATTERY_LEVEL_FIELD_DESC);
        oprot.writeDouble(struct.batteryLevel);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMemoryWired()) {
        oprot.writeFieldBegin(MEMORY_WIRED_FIELD_DESC);
        oprot.writeI32(struct.memoryWired);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMemoryActive()) {
        oprot.writeFieldBegin(MEMORY_ACTIVE_FIELD_DESC);
        oprot.writeI32(struct.memoryActive);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMemoryInactive()) {
        oprot.writeFieldBegin(MEMORY_INACTIVE_FIELD_DESC);
        oprot.writeI32(struct.memoryInactive);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMemoryFree()) {
        oprot.writeFieldBegin(MEMORY_FREE_FIELD_DESC);
        oprot.writeI32(struct.memoryFree);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMemoryUser()) {
        oprot.writeFieldBegin(MEMORY_USER_FIELD_DESC);
        oprot.writeI32(struct.memoryUser);
        oprot.writeFieldEnd();
      }
      if (struct.triggeredBy != null) {
        if (struct.isSetTriggeredBy()) {
          oprot.writeFieldBegin(TRIGGERED_BY_FIELD_DESC);
          oprot.writeString(struct.triggeredBy);
          oprot.writeFieldEnd();
        }
      }
      if (struct.networkStatus != null) {
        if (struct.isSetNetworkStatus()) {
          oprot.writeFieldBegin(NETWORK_STATUS_FIELD_DESC);
          oprot.writeString(struct.networkStatus);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetDistanceTraveled()) {
        oprot.writeFieldBegin(DISTANCE_TRAVELED_FIELD_DESC);
        oprot.writeDouble(struct.distanceTraveled);
        oprot.writeFieldEnd();
      }
      if (struct.isSetScreenBrightness()) {
        oprot.writeFieldBegin(SCREEN_BRIGHTNESS_FIELD_DESC);
        oprot.writeI32(struct.screenBrightness);
        oprot.writeFieldEnd();
      }
      if (struct.networkType != null) {
        if (struct.isSetNetworkType()) {
          oprot.writeFieldBegin(NETWORK_TYPE_FIELD_DESC);
          oprot.writeString(struct.networkType);
          oprot.writeFieldEnd();
        }
      }
      if (struct.mobileNetworkType != null) {
        if (struct.isSetMobileNetworkType()) {
          oprot.writeFieldBegin(MOBILE_NETWORK_TYPE_FIELD_DESC);
          oprot.writeString(struct.mobileNetworkType);
          oprot.writeFieldEnd();
        }
      }
      if (struct.mobileDataStatus != null) {
        if (struct.isSetMobileDataStatus()) {
          oprot.writeFieldBegin(MOBILE_DATA_STATUS_FIELD_DESC);
          oprot.writeString(struct.mobileDataStatus);
          oprot.writeFieldEnd();
        }
      }
      if (struct.mobileDataActivity != null) {
        if (struct.isSetMobileDataActivity()) {
          oprot.writeFieldBegin(MOBILE_DATA_ACTIVITY_FIELD_DESC);
          oprot.writeString(struct.mobileDataActivity);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetRoamingEnabled()) {
        oprot.writeFieldBegin(ROAMING_ENABLED_FIELD_DESC);
        oprot.writeBool(struct.roamingEnabled);
        oprot.writeFieldEnd();
      }
      if (struct.batteryCharger != null) {
        if (struct.isSetBatteryCharger()) {
          oprot.writeFieldBegin(BATTERY_CHARGER_FIELD_DESC);
          oprot.writeString(struct.batteryCharger);
          oprot.writeFieldEnd();
        }
      }
      if (struct.batteryHealth != null) {
        if (struct.isSetBatteryHealth()) {
          oprot.writeFieldBegin(BATTERY_HEALTH_FIELD_DESC);
          oprot.writeString(struct.batteryHealth);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetBatteryVoltage()) {
        oprot.writeFieldBegin(BATTERY_VOLTAGE_FIELD_DESC);
        oprot.writeDouble(struct.batteryVoltage);
        oprot.writeFieldEnd();
      }
      if (struct.isSetBatteryTemperature()) {
        oprot.writeFieldBegin(BATTERY_TEMPERATURE_FIELD_DESC);
        oprot.writeDouble(struct.batteryTemperature);
        oprot.writeFieldEnd();
      }
      if (struct.batteryTechnology != null) {
        if (struct.isSetBatteryTechnology()) {
          oprot.writeFieldBegin(BATTERY_TECHNOLOGY_FIELD_DESC);
          oprot.writeString(struct.batteryTechnology);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetCpuTime()) {
        oprot.writeFieldBegin(CPU_TIME_FIELD_DESC);
        oprot.writeDouble(struct.cpuTime);
        oprot.writeFieldEnd();
      }
      if (struct.isSetIdleTime()) {
        oprot.writeFieldBegin(IDLE_TIME_FIELD_DESC);
        oprot.writeDouble(struct.idleTime);
        oprot.writeFieldEnd();
      }
      if (struct.isSetUptime()) {
        oprot.writeFieldBegin(UPTIME_FIELD_DESC);
        oprot.writeDouble(struct.uptime);
        oprot.writeFieldEnd();
      }
      if (struct.isSetWifiEnabled()) {
        oprot.writeFieldBegin(WIFI_ENABLED_FIELD_DESC);
        oprot.writeBool(struct.wifiEnabled);
        oprot.writeFieldEnd();
      }
      if (struct.isSetWifiSignalStrength()) {
        oprot.writeFieldBegin(WIFI_SIGNAL_STRENGTH_FIELD_DESC);
        oprot.writeI32(struct.wifiSignalStrength);
        oprot.writeFieldEnd();
      }
      if (struct.isSetWifiLinkSpeed()) {
        oprot.writeFieldBegin(WIFI_LINK_SPEED_FIELD_DESC);
        oprot.writeI32(struct.wifiLinkSpeed);
        oprot.writeFieldEnd();
      }
      if (struct.locationProviders != null) {
        if (struct.isSetLocationProviders()) {
          oprot.writeFieldBegin(LOCATION_PROVIDERS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.locationProviders.size()));
            for (String _iter7 : struct.locationProviders)
            {
              oprot.writeString(_iter7);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SampleTupleSchemeFactory implements SchemeFactory {
    public SampleTupleScheme getScheme() {
      return new SampleTupleScheme();
    }
  }

  private static class SampleTupleScheme extends TupleScheme<Sample> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Sample struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.uuId);
      BitSet optionals = new BitSet();
      if (struct.isSetTimestamp()) {
        optionals.set(0);
      }
      if (struct.isSetPiList()) {
        optionals.set(1);
      }
      if (struct.isSetBatteryState()) {
        optionals.set(2);
      }
      if (struct.isSetBatteryLevel()) {
        optionals.set(3);
      }
      if (struct.isSetMemoryWired()) {
        optionals.set(4);
      }
      if (struct.isSetMemoryActive()) {
        optionals.set(5);
      }
      if (struct.isSetMemoryInactive()) {
        optionals.set(6);
      }
      if (struct.isSetMemoryFree()) {
        optionals.set(7);
      }
      if (struct.isSetMemoryUser()) {
        optionals.set(8);
      }
      if (struct.isSetTriggeredBy()) {
        optionals.set(9);
      }
      if (struct.isSetNetworkStatus()) {
        optionals.set(10);
      }
      if (struct.isSetDistanceTraveled()) {
        optionals.set(11);
      }
      if (struct.isSetScreenBrightness()) {
        optionals.set(12);
      }
      if (struct.isSetNetworkType()) {
        optionals.set(13);
      }
      if (struct.isSetMobileNetworkType()) {
        optionals.set(14);
      }
      if (struct.isSetMobileDataStatus()) {
        optionals.set(15);
      }
      if (struct.isSetMobileDataActivity()) {
        optionals.set(16);
      }
      if (struct.isSetRoamingEnabled()) {
        optionals.set(17);
      }
      if (struct.isSetBatteryCharger()) {
        optionals.set(18);
      }
      if (struct.isSetBatteryHealth()) {
        optionals.set(19);
      }
      if (struct.isSetBatteryVoltage()) {
        optionals.set(20);
      }
      if (struct.isSetBatteryTemperature()) {
        optionals.set(21);
      }
      if (struct.isSetBatteryTechnology()) {
        optionals.set(22);
      }
      if (struct.isSetCpuTime()) {
        optionals.set(23);
      }
      if (struct.isSetIdleTime()) {
        optionals.set(24);
      }
      if (struct.isSetUptime()) {
        optionals.set(25);
      }
      if (struct.isSetWifiEnabled()) {
        optionals.set(26);
      }
      if (struct.isSetWifiSignalStrength()) {
        optionals.set(27);
      }
      if (struct.isSetWifiLinkSpeed()) {
        optionals.set(28);
      }
      if (struct.isSetLocationProviders()) {
        optionals.set(29);
      }
      oprot.writeBitSet(optionals, 30);
      if (struct.isSetTimestamp()) {
        oprot.writeDouble(struct.timestamp);
      }
      if (struct.isSetPiList()) {
        {
          oprot.writeI32(struct.piList.size());
          for (ProcessInfo _iter8 : struct.piList)
          {
            _iter8.write(oprot);
          }
        }
      }
      if (struct.isSetBatteryState()) {
        oprot.writeString(struct.batteryState);
      }
      if (struct.isSetBatteryLevel()) {
        oprot.writeDouble(struct.batteryLevel);
      }
      if (struct.isSetMemoryWired()) {
        oprot.writeI32(struct.memoryWired);
      }
      if (struct.isSetMemoryActive()) {
        oprot.writeI32(struct.memoryActive);
      }
      if (struct.isSetMemoryInactive()) {
        oprot.writeI32(struct.memoryInactive);
      }
      if (struct.isSetMemoryFree()) {
        oprot.writeI32(struct.memoryFree);
      }
      if (struct.isSetMemoryUser()) {
        oprot.writeI32(struct.memoryUser);
      }
      if (struct.isSetTriggeredBy()) {
        oprot.writeString(struct.triggeredBy);
      }
      if (struct.isSetNetworkStatus()) {
        oprot.writeString(struct.networkStatus);
      }
      if (struct.isSetDistanceTraveled()) {
        oprot.writeDouble(struct.distanceTraveled);
      }
      if (struct.isSetScreenBrightness()) {
        oprot.writeI32(struct.screenBrightness);
      }
      if (struct.isSetNetworkType()) {
        oprot.writeString(struct.networkType);
      }
      if (struct.isSetMobileNetworkType()) {
        oprot.writeString(struct.mobileNetworkType);
      }
      if (struct.isSetMobileDataStatus()) {
        oprot.writeString(struct.mobileDataStatus);
      }
      if (struct.isSetMobileDataActivity()) {
        oprot.writeString(struct.mobileDataActivity);
      }
      if (struct.isSetRoamingEnabled()) {
        oprot.writeBool(struct.roamingEnabled);
      }
      if (struct.isSetBatteryCharger()) {
        oprot.writeString(struct.batteryCharger);
      }
      if (struct.isSetBatteryHealth()) {
        oprot.writeString(struct.batteryHealth);
      }
      if (struct.isSetBatteryVoltage()) {
        oprot.writeDouble(struct.batteryVoltage);
      }
      if (struct.isSetBatteryTemperature()) {
        oprot.writeDouble(struct.batteryTemperature);
      }
      if (struct.isSetBatteryTechnology()) {
        oprot.writeString(struct.batteryTechnology);
      }
      if (struct.isSetCpuTime()) {
        oprot.writeDouble(struct.cpuTime);
      }
      if (struct.isSetIdleTime()) {
        oprot.writeDouble(struct.idleTime);
      }
      if (struct.isSetUptime()) {
        oprot.writeDouble(struct.uptime);
      }
      if (struct.isSetWifiEnabled()) {
        oprot.writeBool(struct.wifiEnabled);
      }
      if (struct.isSetWifiSignalStrength()) {
        oprot.writeI32(struct.wifiSignalStrength);
      }
      if (struct.isSetWifiLinkSpeed()) {
        oprot.writeI32(struct.wifiLinkSpeed);
      }
      if (struct.isSetLocationProviders()) {
        {
          oprot.writeI32(struct.locationProviders.size());
          for (String _iter9 : struct.locationProviders)
          {
            oprot.writeString(_iter9);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Sample struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.uuId = iprot.readString();
      struct.setUuIdIsSet(true);
      BitSet incoming = iprot.readBitSet(30);
      if (incoming.get(0)) {
        struct.timestamp = iprot.readDouble();
        struct.setTimestampIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list10 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.piList = new ArrayList<ProcessInfo>(_list10.size);
          for (int _i11 = 0; _i11 < _list10.size; ++_i11)
          {
            ProcessInfo _elem12; // required
            _elem12 = new ProcessInfo();
            _elem12.read(iprot);
            struct.piList.add(_elem12);
          }
        }
        struct.setPiListIsSet(true);
      }
      if (incoming.get(2)) {
        struct.batteryState = iprot.readString();
        struct.setBatteryStateIsSet(true);
      }
      if (incoming.get(3)) {
        struct.batteryLevel = iprot.readDouble();
        struct.setBatteryLevelIsSet(true);
      }
      if (incoming.get(4)) {
        struct.memoryWired = iprot.readI32();
        struct.setMemoryWiredIsSet(true);
      }
      if (incoming.get(5)) {
        struct.memoryActive = iprot.readI32();
        struct.setMemoryActiveIsSet(true);
      }
      if (incoming.get(6)) {
        struct.memoryInactive = iprot.readI32();
        struct.setMemoryInactiveIsSet(true);
      }
      if (incoming.get(7)) {
        struct.memoryFree = iprot.readI32();
        struct.setMemoryFreeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.memoryUser = iprot.readI32();
        struct.setMemoryUserIsSet(true);
      }
      if (incoming.get(9)) {
        struct.triggeredBy = iprot.readString();
        struct.setTriggeredByIsSet(true);
      }
      if (incoming.get(10)) {
        struct.networkStatus = iprot.readString();
        struct.setNetworkStatusIsSet(true);
      }
      if (incoming.get(11)) {
        struct.distanceTraveled = iprot.readDouble();
        struct.setDistanceTraveledIsSet(true);
      }
      if (incoming.get(12)) {
        struct.screenBrightness = iprot.readI32();
        struct.setScreenBrightnessIsSet(true);
      }
      if (incoming.get(13)) {
        struct.networkType = iprot.readString();
        struct.setNetworkTypeIsSet(true);
      }
      if (incoming.get(14)) {
        struct.mobileNetworkType = iprot.readString();
        struct.setMobileNetworkTypeIsSet(true);
      }
      if (incoming.get(15)) {
        struct.mobileDataStatus = iprot.readString();
        struct.setMobileDataStatusIsSet(true);
      }
      if (incoming.get(16)) {
        struct.mobileDataActivity = iprot.readString();
        struct.setMobileDataActivityIsSet(true);
      }
      if (incoming.get(17)) {
        struct.roamingEnabled = iprot.readBool();
        struct.setRoamingEnabledIsSet(true);
      }
      if (incoming.get(18)) {
        struct.batteryCharger = iprot.readString();
        struct.setBatteryChargerIsSet(true);
      }
      if (incoming.get(19)) {
        struct.batteryHealth = iprot.readString();
        struct.setBatteryHealthIsSet(true);
      }
      if (incoming.get(20)) {
        struct.batteryVoltage = iprot.readDouble();
        struct.setBatteryVoltageIsSet(true);
      }
      if (incoming.get(21)) {
        struct.batteryTemperature = iprot.readDouble();
        struct.setBatteryTemperatureIsSet(true);
      }
      if (incoming.get(22)) {
        struct.batteryTechnology = iprot.readString();
        struct.setBatteryTechnologyIsSet(true);
      }
      if (incoming.get(23)) {
        struct.cpuTime = iprot.readDouble();
        struct.setCpuTimeIsSet(true);
      }
      if (incoming.get(24)) {
        struct.idleTime = iprot.readDouble();
        struct.setIdleTimeIsSet(true);
      }
      if (incoming.get(25)) {
        struct.uptime = iprot.readDouble();
        struct.setUptimeIsSet(true);
      }
      if (incoming.get(26)) {
        struct.wifiEnabled = iprot.readBool();
        struct.setWifiEnabledIsSet(true);
      }
      if (incoming.get(27)) {
        struct.wifiSignalStrength = iprot.readI32();
        struct.setWifiSignalStrengthIsSet(true);
      }
      if (incoming.get(28)) {
        struct.wifiLinkSpeed = iprot.readI32();
        struct.setWifiLinkSpeedIsSet(true);
      }
      if (incoming.get(29)) {
        {
          org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.locationProviders = new ArrayList<String>(_list13.size);
          for (int _i14 = 0; _i14 < _list13.size; ++_i14)
          {
            String _elem15; // required
            _elem15 = iprot.readString();
            struct.locationProviders.add(_elem15);
          }
        }
        struct.setLocationProvidersIsSet(true);
      }
    }
  }

}


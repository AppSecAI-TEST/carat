/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */

#import <Foundation/Foundation.h>

#import "Thrift/protocol/TProtocol.h"
#import "Thrift/TApplicationException.h"
#import "Thrift/protocol/TProtocolUtil.h"
#import "Thrift/TProcessor.h"


#import "CaratProtocol.h"

@implementation Registration

- (id) initWithUuId: (NSString *) uuId timestamp: (double) timestamp platformId: (NSString *) platformId systemVersion: (NSString *) systemVersion systemDistribution: (NSString *) systemDistribution kernelVersion: (NSString *) kernelVersion
{
    self = [super init];
    __uuId = [uuId retain];
    __uuId_isset = YES;
    __timestamp = timestamp;
    __timestamp_isset = YES;
    __platformId = [platformId retain];
    __platformId_isset = YES;
    __systemVersion = [systemVersion retain];
    __systemVersion_isset = YES;
    __systemDistribution = [systemDistribution retain];
    __systemDistribution_isset = YES;
    __kernelVersion = [kernelVersion retain];
    __kernelVersion_isset = YES;
    return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
    self = [super init];
    if ([decoder containsValueForKey: @"uuId"])
    {
        __uuId = [[decoder decodeObjectForKey: @"uuId"] retain];
        __uuId_isset = YES;
    }
    if ([decoder containsValueForKey: @"timestamp"])
    {
        __timestamp = [decoder decodeDoubleForKey: @"timestamp"];
        __timestamp_isset = YES;
    }
    if ([decoder containsValueForKey: @"platformId"])
    {
        __platformId = [[decoder decodeObjectForKey: @"platformId"] retain];
        __platformId_isset = YES;
    }
    if ([decoder containsValueForKey: @"systemVersion"])
    {
        __systemVersion = [[decoder decodeObjectForKey: @"systemVersion"] retain];
        __systemVersion_isset = YES;
    }
    if ([decoder containsValueForKey: @"systemDistribution"])
    {
        __systemDistribution = [[decoder decodeObjectForKey: @"systemDistribution"] retain];
        __systemDistribution_isset = YES;
    }
    if ([decoder containsValueForKey: @"kernelVersion"])
    {
        __kernelVersion = [[decoder decodeObjectForKey: @"kernelVersion"] retain];
        __kernelVersion_isset = YES;
    }
    return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
    if (__uuId_isset)
    {
        [encoder encodeObject: __uuId forKey: @"uuId"];
    }
    if (__timestamp_isset)
    {
        [encoder encodeDouble: __timestamp forKey: @"timestamp"];
    }
    if (__platformId_isset)
    {
        [encoder encodeObject: __platformId forKey: @"platformId"];
    }
    if (__systemVersion_isset)
    {
        [encoder encodeObject: __systemVersion forKey: @"systemVersion"];
    }
    if (__systemDistribution_isset)
    {
        [encoder encodeObject: __systemDistribution forKey: @"systemDistribution"];
    }
    if (__kernelVersion_isset)
    {
        [encoder encodeObject: __kernelVersion forKey: @"kernelVersion"];
    }
}

- (void) dealloc
{
    [__uuId release];
    [__platformId release];
    [__systemVersion release];
    [__systemDistribution release];
    [__kernelVersion release];
    [super dealloc];
}

- (NSString *) uuId {
    return [[__uuId retain] autorelease];
}

- (void) setUuId: (NSString *) uuId {
    [uuId retain];
    [__uuId release];
    __uuId = uuId;
    __uuId_isset = YES;
}

- (BOOL) uuIdIsSet {
    return __uuId_isset;
}

- (void) unsetUuId {
    [__uuId release];
    __uuId = nil;
    __uuId_isset = NO;
}

- (double) timestamp {
    return __timestamp;
}

- (void) setTimestamp: (double) timestamp {
    __timestamp = timestamp;
    __timestamp_isset = YES;
}

- (BOOL) timestampIsSet {
    return __timestamp_isset;
}

- (void) unsetTimestamp {
    __timestamp_isset = NO;
}

- (NSString *) platformId {
    return [[__platformId retain] autorelease];
}

- (void) setPlatformId: (NSString *) platformId {
    [platformId retain];
    [__platformId release];
    __platformId = platformId;
    __platformId_isset = YES;
}

- (BOOL) platformIdIsSet {
    return __platformId_isset;
}

- (void) unsetPlatformId {
    [__platformId release];
    __platformId = nil;
    __platformId_isset = NO;
}

- (NSString *) systemVersion {
    return [[__systemVersion retain] autorelease];
}

- (void) setSystemVersion: (NSString *) systemVersion {
    [systemVersion retain];
    [__systemVersion release];
    __systemVersion = systemVersion;
    __systemVersion_isset = YES;
}

- (BOOL) systemVersionIsSet {
    return __systemVersion_isset;
}

- (void) unsetSystemVersion {
    [__systemVersion release];
    __systemVersion = nil;
    __systemVersion_isset = NO;
}

- (NSString *) systemDistribution {
    return [[__systemDistribution retain] autorelease];
}

- (void) setSystemDistribution: (NSString *) systemDistribution {
    [systemDistribution retain];
    [__systemDistribution release];
    __systemDistribution = systemDistribution;
    __systemDistribution_isset = YES;
}

- (BOOL) systemDistributionIsSet {
    return __systemDistribution_isset;
}

- (void) unsetSystemDistribution {
    [__systemDistribution release];
    __systemDistribution = nil;
    __systemDistribution_isset = NO;
}

- (NSString *) kernelVersion {
    return [[__kernelVersion retain] autorelease];
}

- (void) setKernelVersion: (NSString *) kernelVersion {
    [kernelVersion retain];
    [__kernelVersion release];
    __kernelVersion = kernelVersion;
    __kernelVersion_isset = YES;
}

- (BOOL) kernelVersionIsSet {
    return __kernelVersion_isset;
}

- (void) unsetKernelVersion {
    [__kernelVersion release];
    __kernelVersion = nil;
    __kernelVersion_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
    NSString * fieldName;
    int fieldType;
    int fieldID;
    
    [inProtocol readStructBeginReturningName: NULL];
    while (true)
    {
        [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
        if (fieldType == TType_STOP) {
            break;
        }
        switch (fieldID)
        {
            case 1:
                if (fieldType == TType_STRING) {
                    NSString * fieldValue = [inProtocol readString];
                    [self setUuId: fieldValue];
                } else {
                    [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
                }
                break;
            case 2:
                if (fieldType == TType_DOUBLE) {
                    double fieldValue = [inProtocol readDouble];
                    [self setTimestamp: fieldValue];
                } else {
                    [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
                }
                break;
            case 3:
                if (fieldType == TType_STRING) {
                    NSString * fieldValue = [inProtocol readString];
                    [self setPlatformId: fieldValue];
                } else {
                    [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
                }
                break;
            case 4:
                if (fieldType == TType_STRING) {
                    NSString * fieldValue = [inProtocol readString];
                    [self setSystemVersion: fieldValue];
                } else {
                    [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
                }
                break;
            case 5:
                if (fieldType == TType_STRING) {
                    NSString * fieldValue = [inProtocol readString];
                    [self setSystemDistribution: fieldValue];
                } else {
                    [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
                }
                break;
            case 6:
                if (fieldType == TType_STRING) {
                    NSString * fieldValue = [inProtocol readString];
                    [self setKernelVersion: fieldValue];
                } else {
                    [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
                }
                break;
            default:
                [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
                break;
        }
        [inProtocol readFieldEnd];
    }
    [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
    [outProtocol writeStructBeginWithName: @"Registration"];
    if (__uuId_isset) {
        if (__uuId != nil) {
            [outProtocol writeFieldBeginWithName: @"uuId" type: TType_STRING fieldID: 1];
            [outProtocol writeString: __uuId];
            [outProtocol writeFieldEnd];
        }
    }
    if (__timestamp_isset) {
        [outProtocol writeFieldBeginWithName: @"timestamp" type: TType_DOUBLE fieldID: 2];
        [outProtocol writeDouble: __timestamp];
        [outProtocol writeFieldEnd];
    }
    if (__platformId_isset) {
        if (__platformId != nil) {
            [outProtocol writeFieldBeginWithName: @"platformId" type: TType_STRING fieldID: 3];
            [outProtocol writeString: __platformId];
            [outProtocol writeFieldEnd];
        }
    }
    if (__systemVersion_isset) {
        if (__systemVersion != nil) {
            [outProtocol writeFieldBeginWithName: @"systemVersion" type: TType_STRING fieldID: 4];
            [outProtocol writeString: __systemVersion];
            [outProtocol writeFieldEnd];
        }
    }
    if (__systemDistribution_isset) {
        if (__systemDistribution != nil) {
            [outProtocol writeFieldBeginWithName: @"systemDistribution" type: TType_STRING fieldID: 5];
            [outProtocol writeString: __systemDistribution];
            [outProtocol writeFieldEnd];
        }
    }
    if (__kernelVersion_isset) {
        if (__kernelVersion != nil) {
            [outProtocol writeFieldBeginWithName: @"kernelVersion" type: TType_STRING fieldID: 6];
            [outProtocol writeString: __kernelVersion];
            [outProtocol writeFieldEnd];
        }
    }
    [outProtocol writeFieldStop];
    [outProtocol writeStructEnd];
}

- (NSString *) description {
    NSMutableString * ms = [NSMutableString stringWithString: @"Registration("];
    [ms appendString: @"uuId:"];
    [ms appendFormat: @"\"%@\"", __uuId];
    [ms appendString: @",timestamp:"];
    [ms appendFormat: @"%f", __timestamp];
    [ms appendString: @",platformId:"];
    [ms appendFormat: @"\"%@\"", __platformId];
    [ms appendString: @",systemVersion:"];
    [ms appendFormat: @"\"%@\"", __systemVersion];
    [ms appendString: @",systemDistribution:"];
    [ms appendFormat: @"\"%@\"", __systemDistribution];
    [ms appendString: @",kernelVersion:"];
    [ms appendFormat: @"\"%@\"", __kernelVersion];
    [ms appendString: @")"];
    return [NSString stringWithString: ms];
}

@end

@implementation ProcessInfo

- (id) initWithPId: (int32_t) pId pName: (NSString *) pName applicationLabel: (NSString *) applicationLabel isSystemApp: (BOOL) isSystemApp importance: (NSString *) importance
{
    self = [super init];
    __pId = pId;
    __pId_isset = YES;
    __pName = [pName retain];
    __pName_isset = YES;
    __applicationLabel = [applicationLabel retain];
    __applicationLabel_isset = YES;
    __isSystemApp = isSystemApp;
    __isSystemApp_isset = YES;
    __importance = [importance retain];
    __importance_isset = YES;
    return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
    self = [super init];
    if ([decoder containsValueForKey: @"pId"])
    {
        __pId = [decoder decodeInt32ForKey: @"pId"];
        __pId_isset = YES;
    }
    if ([decoder containsValueForKey: @"pName"])
    {
        __pName = [[decoder decodeObjectForKey: @"pName"] retain];
        __pName_isset = YES;
    }
    if ([decoder containsValueForKey: @"applicationLabel"])
    {
        __applicationLabel = [[decoder decodeObjectForKey: @"applicationLabel"] retain];
        __applicationLabel_isset = YES;
    }
    if ([decoder containsValueForKey: @"isSystemApp"])
    {
        __isSystemApp = [decoder decodeBoolForKey: @"isSystemApp"];
        __isSystemApp_isset = YES;
    }
    if ([decoder containsValueForKey: @"importance"])
    {
        __importance = [[decoder decodeObjectForKey: @"importance"] retain];
        __importance_isset = YES;
    }
    return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
    if (__pId_isset)
    {
        [encoder encodeInt32: __pId forKey: @"pId"];
    }
    if (__pName_isset)
    {
        [encoder encodeObject: __pName forKey: @"pName"];
    }
    if (__applicationLabel_isset)
    {
        [encoder encodeObject: __applicationLabel forKey: @"applicationLabel"];
    }
    if (__isSystemApp_isset)
    {
        [encoder encodeBool: __isSystemApp forKey: @"isSystemApp"];
    }
    if (__importance_isset)
    {
        [encoder encodeObject: __importance forKey: @"importance"];
    }
}

- (void) dealloc
{
    [__pName release];
    [__applicationLabel release];
    [__importance release];
    [super dealloc];
}

- (int32_t) pId {
    return __pId;
}

- (void) setPId: (int32_t) pId {
    __pId = pId;
    __pId_isset = YES;
}

- (BOOL) pIdIsSet {
    return __pId_isset;
}

- (void) unsetPId {
    __pId_isset = NO;
}

- (NSString *) pName {
    return [[__pName retain] autorelease];
}

- (void) setPName: (NSString *) pName {
    [pName retain];
    [__pName release];
    __pName = pName;
    __pName_isset = YES;
}

- (BOOL) pNameIsSet {
    return __pName_isset;
}

- (void) unsetPName {
    [__pName release];
    __pName = nil;
    __pName_isset = NO;
}

- (NSString *) applicationLabel {
    return [[__applicationLabel retain] autorelease];
}

- (void) setApplicationLabel: (NSString *) applicationLabel {
    [applicationLabel retain];
    [__applicationLabel release];
    __applicationLabel = applicationLabel;
    __applicationLabel_isset = YES;
}

- (BOOL) applicationLabelIsSet {
    return __applicationLabel_isset;
}

- (void) unsetApplicationLabel {
    [__applicationLabel release];
    __applicationLabel = nil;
    __applicationLabel_isset = NO;
}

- (BOOL) isSystemApp {
    return __isSystemApp;
}

- (void) setIsSystemApp: (BOOL) isSystemApp {
    __isSystemApp = isSystemApp;
    __isSystemApp_isset = YES;
}

- (BOOL) isSystemAppIsSet {
    return __isSystemApp_isset;
}

- (void) unsetIsSystemApp {
    __isSystemApp_isset = NO;
}

- (NSString *) importance {
    return [[__importance retain] autorelease];
}

- (void) setImportance: (NSString *) importance {
    [importance retain];
    [__importance release];
    __importance = importance;
    __importance_isset = YES;
}

- (BOOL) importanceIsSet {
    return __importance_isset;
}

- (void) unsetImportance {
    [__importance release];
    __importance = nil;
    __importance_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
    NSString * fieldName;
    int fieldType;
    int fieldID;
    
    [inProtocol readStructBeginReturningName: NULL];
    while (true)
    {
        [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
        if (fieldType == TType_STOP) {
            break;
        }
        switch (fieldID)
        {
            case 1:
                if (fieldType == TType_I32) {
                    int32_t fieldValue = [inProtocol readI32];
                    [self setPId: fieldValue];
                } else {
                    [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
                }
                break;
            case 2:
                if (fieldType == TType_STRING) {
                    NSString * fieldValue = [inProtocol readString];
                    [self setPName: fieldValue];
                } else {
                    [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
                }
                break;
            case 3:
                if (fieldType == TType_STRING) {
                    NSString * fieldValue = [inProtocol readString];
                    [self setApplicationLabel: fieldValue];
                } else {
                    [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
                }
                break;
            case 4:
                if (fieldType == TType_BOOL) {
                    BOOL fieldValue = [inProtocol readBool];
                    [self setIsSystemApp: fieldValue];
                } else {
                    [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
                }
                break;
            case 5:
                if (fieldType == TType_STRING) {
                    NSString * fieldValue = [inProtocol readString];
                    [self setImportance: fieldValue];
                } else {
                    [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
                }
                break;
            default:
                [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
                break;
        }
        [inProtocol readFieldEnd];
    }
    [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
    [outProtocol writeStructBeginWithName: @"ProcessInfo"];
    if (__pId_isset) {
        [outProtocol writeFieldBeginWithName: @"pId" type: TType_I32 fieldID: 1];
        [outProtocol writeI32: __pId];
        [outProtocol writeFieldEnd];
    }
    if (__pName_isset) {
        if (__pName != nil) {
            [outProtocol writeFieldBeginWithName: @"pName" type: TType_STRING fieldID: 2];
            [outProtocol writeString: __pName];
            [outProtocol writeFieldEnd];
        }
    }
    if (__applicationLabel_isset) {
        if (__applicationLabel != nil) {
            [outProtocol writeFieldBeginWithName: @"applicationLabel" type: TType_STRING fieldID: 3];
            [outProtocol writeString: __applicationLabel];
            [outProtocol writeFieldEnd];
        }
    }
    if (__isSystemApp_isset) {
        [outProtocol writeFieldBeginWithName: @"isSystemApp" type: TType_BOOL fieldID: 4];
        [outProtocol writeBool: __isSystemApp];
        [outProtocol writeFieldEnd];
    }
    if (__importance_isset) {
        if (__importance != nil) {
            [outProtocol writeFieldBeginWithName: @"importance" type: TType_STRING fieldID: 5];
            [outProtocol writeString: __importance];
            [outProtocol writeFieldEnd];
        }
    }
    [outProtocol writeFieldStop];
    [outProtocol writeStructEnd];
}

- (NSString *) description {
    NSMutableString * ms = [NSMutableString stringWithString: @"ProcessInfo("];
    [ms appendString: @"pId:"];
    [ms appendFormat: @"%i", __pId];
    [ms appendString: @",pName:"];
    [ms appendFormat: @"\"%@\"", __pName];
    [ms appendString: @",applicationLabel:"];
    [ms appendFormat: @"\"%@\"", __applicationLabel];
    [ms appendString: @",isSystemApp:"];
    [ms appendFormat: @"%i", __isSystemApp];
    [ms appendString: @",importance:"];
    [ms appendFormat: @"\"%@\"", __importance];
    [ms appendString: @")"];
    return [NSString stringWithString: ms];
}

@end

@implementation NetworkDetails

- (id) initWithNetworkType: (NSString *) networkType mobileNetworkType: (NSString *) mobileNetworkType mobileDataStatus: (NSString *) mobileDataStatus mobileDataActivity: (NSString *) mobileDataActivity roamingEnabled: (BOOL) roamingEnabled wifiStatus: (NSString *) wifiStatus wifiSignalStrength: (int32_t) wifiSignalStrength wifiLinkSpeed: (int32_t) wifiLinkSpeed
{
    self = [super init];
    __networkType = [networkType retain];
    __networkType_isset = YES;
    __mobileNetworkType = [mobileNetworkType retain];
    __mobileNetworkType_isset = YES;
    __mobileDataStatus = [mobileDataStatus retain];
    __mobileDataStatus_isset = YES;
    __mobileDataActivity = [mobileDataActivity retain];
    __mobileDataActivity_isset = YES;
    __roamingEnabled = roamingEnabled;
    __roamingEnabled_isset = YES;
    __wifiStatus = [wifiStatus retain];
    __wifiStatus_isset = YES;
    __wifiSignalStrength = wifiSignalStrength;
    __wifiSignalStrength_isset = YES;
    __wifiLinkSpeed = wifiLinkSpeed;
    __wifiLinkSpeed_isset = YES;
    return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
    self = [super init];
    if ([decoder containsValueForKey: @"networkType"])
    {
        __networkType = [[decoder decodeObjectForKey: @"networkType"] retain];
        __networkType_isset = YES;
    }
    if ([decoder containsValueForKey: @"mobileNetworkType"])
    {
        __mobileNetworkType = [[decoder decodeObjectForKey: @"mobileNetworkType"] retain];
        __mobileNetworkType_isset = YES;
    }
    if ([decoder containsValueForKey: @"mobileDataStatus"])
    {
        __mobileDataStatus = [[decoder decodeObjectForKey: @"mobileDataStatus"] retain];
        __mobileDataStatus_isset = YES;
    }
    if ([decoder containsValueForKey: @"mobileDataActivity"])
    {
        __mobileDataActivity = [[decoder decodeObjectForKey: @"mobileDataActivity"] retain];
        __mobileDataActivity_isset = YES;
    }
    if ([decoder containsValueForKey: @"roamingEnabled"])
    {
        __roamingEnabled = [decoder decodeBoolForKey: @"roamingEnabled"];
        __roamingEnabled_isset = YES;
    }
    if ([decoder containsValueForKey: @"wifiStatus"])
    {
        __wifiStatus = [[decoder decodeObjectForKey: @"wifiStatus"] retain];
        __wifiStatus_isset = YES;
    }
    if ([decoder containsValueForKey: @"wifiSignalStrength"])
    {
        __wifiSignalStrength = [decoder decodeInt32ForKey: @"wifiSignalStrength"];
        __wifiSignalStrength_isset = YES;
    }
    if ([decoder containsValueForKey: @"wifiLinkSpeed"])
    {
        __wifiLinkSpeed = [decoder decodeInt32ForKey: @"wifiLinkSpeed"];
        __wifiLinkSpeed_isset = YES;
    }
    return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
    if (__networkType_isset)
    {
        [encoder encodeObject: __networkType forKey: @"networkType"];
    }
    if (__mobileNetworkType_isset)
    {
        [encoder encodeObject: __mobileNetworkType forKey: @"mobileNetworkType"];
    }
    if (__mobileDataStatus_isset)
    {
        [encoder encodeObject: __mobileDataStatus forKey: @"mobileDataStatus"];
    }
    if (__mobileDataActivity_isset)
    {
        [encoder encodeObject: __mobileDataActivity forKey: @"mobileDataActivity"];
    }
    if (__roamingEnabled_isset)
    {
        [encoder encodeBool: __roamingEnabled forKey: @"roamingEnabled"];
    }
    if (__wifiStatus_isset)
    {
        [encoder encodeObject: __wifiStatus forKey: @"wifiStatus"];
    }
    if (__wifiSignalStrength_isset)
    {
        [encoder encodeInt32: __wifiSignalStrength forKey: @"wifiSignalStrength"];
    }
    if (__wifiLinkSpeed_isset)
    {
        [encoder encodeInt32: __wifiLinkSpeed forKey: @"wifiLinkSpeed"];
    }
}

- (void) dealloc
{
    [__networkType release];
    [__mobileNetworkType release];
    [__mobileDataStatus release];
    [__mobileDataActivity release];
    [__wifiStatus release];
    [super dealloc];
}

- (NSString *) networkType {
    return [[__networkType retain] autorelease];
}

- (void) setNetworkType: (NSString *) networkType {
    [networkType retain];
    [__networkType release];
    __networkType = networkType;
    __networkType_isset = YES;
}

- (BOOL) networkTypeIsSet {
    return __networkType_isset;
}

- (void) unsetNetworkType {
    [__networkType release];
    __networkType = nil;
    __networkType_isset = NO;
}

- (NSString *) mobileNetworkType {
    return [[__mobileNetworkType retain] autorelease];
}

- (void) setMobileNetworkType: (NSString *) mobileNetworkType {
    [mobileNetworkType retain];
    [__mobileNetworkType release];
    __mobileNetworkType = mobileNetworkType;
    __mobileNetworkType_isset = YES;
}

- (BOOL) mobileNetworkTypeIsSet {
    return __mobileNetworkType_isset;
}

- (void) unsetMobileNetworkType {
    [__mobileNetworkType release];
    __mobileNetworkType = nil;
    __mobileNetworkType_isset = NO;
}

- (NSString *) mobileDataStatus {
    return [[__mobileDataStatus retain] autorelease];
}

- (void) setMobileDataStatus: (NSString *) mobileDataStatus {
    [mobileDataStatus retain];
    [__mobileDataStatus release];
    __mobileDataStatus = mobileDataStatus;
    __mobileDataStatus_isset = YES;
}

- (BOOL) mobileDataStatusIsSet {
    return __mobileDataStatus_isset;
}

- (void) unsetMobileDataStatus {
    [__mobileDataStatus release];
    __mobileDataStatus = nil;
    __mobileDataStatus_isset = NO;
}

- (NSString *) mobileDataActivity {
    return [[__mobileDataActivity retain] autorelease];
}

- (void) setMobileDataActivity: (NSString *) mobileDataActivity {
    [mobileDataActivity retain];
    [__mobileDataActivity release];
    __mobileDataActivity = mobileDataActivity;
    __mobileDataActivity_isset = YES;
}

- (BOOL) mobileDataActivityIsSet {
    return __mobileDataActivity_isset;
}

- (void) unsetMobileDataActivity {
    [__mobileDataActivity release];
    __mobileDataActivity = nil;
    __mobileDataActivity_isset = NO;
}

- (BOOL) roamingEnabled {
    return __roamingEnabled;
}

- (void) setRoamingEnabled: (BOOL) roamingEnabled {
    __roamingEnabled = roamingEnabled;
    __roamingEnabled_isset = YES;
}

- (BOOL) roamingEnabledIsSet {
    return __roamingEnabled_isset;
}

- (void) unsetRoamingEnabled {
    __roamingEnabled_isset = NO;
}

- (NSString *) wifiStatus {
    return [[__wifiStatus retain] autorelease];
}

- (void) setWifiStatus: (NSString *) wifiStatus {
    [wifiStatus retain];
    [__wifiStatus release];
    __wifiStatus = wifiStatus;
    __wifiStatus_isset = YES;
}

- (BOOL) wifiStatusIsSet {
    return __wifiStatus_isset;
}

- (void) unsetWifiStatus {
    [__wifiStatus release];
    __wifiStatus = nil;
    __wifiStatus_isset = NO;
}

- (int32_t) wifiSignalStrength {
    return __wifiSignalStrength;
}

- (void) setWifiSignalStrength: (int32_t) wifiSignalStrength {
    __wifiSignalStrength = wifiSignalStrength;
    __wifiSignalStrength_isset = YES;
}

- (BOOL) wifiSignalStrengthIsSet {
    return __wifiSignalStrength_isset;
}

- (void) unsetWifiSignalStrength {
    __wifiSignalStrength_isset = NO;
}

- (int32_t) wifiLinkSpeed {
    return __wifiLinkSpeed;
}

- (void) setWifiLinkSpeed: (int32_t) wifiLinkSpeed {
    __wifiLinkSpeed = wifiLinkSpeed;
    __wifiLinkSpeed_isset = YES;
}

- (BOOL) wifiLinkSpeedIsSet {
    return __wifiLinkSpeed_isset;
}

- (void) unsetWifiLinkSpeed {
    __wifiLinkSpeed_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
    NSString * fieldName;
    int fieldType;
    int fieldID;
    
    [inProtocol readStructBeginReturningName: NULL];
    while (true)
    {
        [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
        if (fieldType == TType_STOP) {
            break;
        }
        switch (fieldID)
        {
            case 1:
                if (fieldType == TType_STRING) {
                    NSString * fieldValue = [inProtocol readString];
                    [self setNetworkType: fieldValue];
                } else {
                    [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
                }
                break;
            case 2:
                if (fieldType == TType_STRING) {
                    NSString * fieldValue = [inProtocol readString];
                    [self setMobileNetworkType: fieldValue];
                } else {
                    [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
                }
                break;
            case 3:
                if (fieldType == TType_STRING) {
                    NSString * fieldValue = [inProtocol readString];
                    [self setMobileDataStatus: fieldValue];
                } else {
                    [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
                }
                break;
            case 4:
                if (fieldType == TType_STRING) {
                    NSString * fieldValue = [inProtocol readString];
                    [self setMobileDataActivity: fieldValue];
                } else {
                    [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
                }
                break;
            case 5:
                if (fieldType == TType_BOOL) {
                    BOOL fieldValue = [inProtocol readBool];
                    [self setRoamingEnabled: fieldValue];
                } else {
                    [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
                }
                break;
            case 6:
                if (fieldType == TType_STRING) {
                    NSString * fieldValue = [inProtocol readString];
                    [self setWifiStatus: fieldValue];
                } else {
                    [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
                }
                break;
            case 7:
                if (fieldType == TType_I32) {
                    int32_t fieldValue = [inProtocol readI32];
                    [self setWifiSignalStrength: fieldValue];
                } else {
                    [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
                }
                break;
            case 8:
                if (fieldType == TType_I32) {
                    int32_t fieldValue = [inProtocol readI32];
                    [self setWifiLinkSpeed: fieldValue];
                } else {
                    [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
                }
                break;
            default:
                [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
                break;
        }
        [inProtocol readFieldEnd];
    }
    [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
    [outProtocol writeStructBeginWithName: @"NetworkDetails"];
    if (__networkType_isset) {
        if (__networkType != nil) {
            [outProtocol writeFieldBeginWithName: @"networkType" type: TType_STRING fieldID: 1];
            [outProtocol writeString: __networkType];
            [outProtocol writeFieldEnd];
        }
    }
    if (__mobileNetworkType_isset) {
        if (__mobileNetworkType != nil) {
            [outProtocol writeFieldBeginWithName: @"mobileNetworkType" type: TType_STRING fieldID: 2];
            [outProtocol writeString: __mobileNetworkType];
            [outProtocol writeFieldEnd];
        }
    }
    if (__mobileDataStatus_isset) {
        if (__mobileDataStatus != nil) {
            [outProtocol writeFieldBeginWithName: @"mobileDataStatus" type: TType_STRING fieldID: 3];
            [outProtocol writeString: __mobileDataStatus];
            [outProtocol writeFieldEnd];
        }
    }
    if (__mobileDataActivity_isset) {
        if (__mobileDataActivity != nil) {
            [outProtocol writeFieldBeginWithName: @"mobileDataActivity" type: TType_STRING fieldID: 4];
            [outProtocol writeString: __mobileDataActivity];
            [outProtocol writeFieldEnd];
        }
    }
    if (__roamingEnabled_isset) {
        [outProtocol writeFieldBeginWithName: @"roamingEnabled" type: TType_BOOL fieldID: 5];
        [outProtocol writeBool: __roamingEnabled];
        [outProtocol writeFieldEnd];
    }
    if (__wifiStatus_isset) {
        if (__wifiStatus != nil) {
            [outProtocol writeFieldBeginWithName: @"wifiStatus" type: TType_STRING fieldID: 6];
            [outProtocol writeString: __wifiStatus];
            [outProtocol writeFieldEnd];
        }
    }
    if (__wifiSignalStrength_isset) {
        [outProtocol writeFieldBeginWithName: @"wifiSignalStrength" type: TType_I32 fieldID: 7];
        [outProtocol writeI32: __wifiSignalStrength];
        [outProtocol writeFieldEnd];
    }
    if (__wifiLinkSpeed_isset) {
        [outProtocol writeFieldBeginWithName: @"wifiLinkSpeed" type: TType_I32 fieldID: 8];
        [outProtocol writeI32: __wifiLinkSpeed];
        [outProtocol writeFieldEnd];
    }
    [outProtocol writeFieldStop];
    [outProtocol writeStructEnd];
}

- (NSString *) description {
    NSMutableString * ms = [NSMutableString stringWithString: @"NetworkDetails("];
    [ms appendString: @"networkType:"];
    [ms appendFormat: @"\"%@\"", __networkType];
    [ms appendString: @",mobileNetworkType:"];
    [ms appendFormat: @"\"%@\"", __mobileNetworkType];
    [ms appendString: @",mobileDataStatus:"];
    [ms appendFormat: @"\"%@\"", __mobileDataStatus];
    [ms appendString: @",mobileDataActivity:"];
    [ms appendFormat: @"\"%@\"", __mobileDataActivity];
    [ms appendString: @",roamingEnabled:"];
    [ms appendFormat: @"%i", __roamingEnabled];
    [ms appendString: @",wifiStatus:"];
    [ms appendFormat: @"\"%@\"", __wifiStatus];
    [ms appendString: @",wifiSignalStrength:"];
    [ms appendFormat: @"%i", __wifiSignalStrength];
    [ms appendString: @",wifiLinkSpeed:"];
    [ms appendFormat: @"%i", __wifiLinkSpeed];
    [ms appendString: @")"];
    return [NSString stringWithString: ms];
}

@end

@implementation BatteryDetails

- (id) initWithBatteryCharger: (NSString *) batteryCharger batteryHealth: (NSString *) batteryHealth batteryVoltage: (double) batteryVoltage batteryTemperature: (double) batteryTemperature batteryTechnology: (NSString *) batteryTechnology batteryCapacity: (double) batteryCapacity
{
    self = [super init];
    __batteryCharger = [batteryCharger retain];
    __batteryCharger_isset = YES;
    __batteryHealth = [batteryHealth retain];
    __batteryHealth_isset = YES;
    __batteryVoltage = batteryVoltage;
    __batteryVoltage_isset = YES;
    __batteryTemperature = batteryTemperature;
    __batteryTemperature_isset = YES;
    __batteryTechnology = [batteryTechnology retain];
    __batteryTechnology_isset = YES;
    __batteryCapacity = batteryCapacity;
    __batteryCapacity_isset = YES;
    return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
    self = [super init];
    if ([decoder containsValueForKey: @"batteryCharger"])
    {
        __batteryCharger = [[decoder decodeObjectForKey: @"batteryCharger"] retain];
        __batteryCharger_isset = YES;
    }
    if ([decoder containsValueForKey: @"batteryHealth"])
    {
        __batteryHealth = [[decoder decodeObjectForKey: @"batteryHealth"] retain];
        __batteryHealth_isset = YES;
    }
    if ([decoder containsValueForKey: @"batteryVoltage"])
    {
        __batteryVoltage = [decoder decodeDoubleForKey: @"batteryVoltage"];
        __batteryVoltage_isset = YES;
    }
    if ([decoder containsValueForKey: @"batteryTemperature"])
    {
        __batteryTemperature = [decoder decodeDoubleForKey: @"batteryTemperature"];
        __batteryTemperature_isset = YES;
    }
    if ([decoder containsValueForKey: @"batteryTechnology"])
    {
        __batteryTechnology = [[decoder decodeObjectForKey: @"batteryTechnology"] retain];
        __batteryTechnology_isset = YES;
    }
    if ([decoder containsValueForKey: @"batteryCapacity"])
    {
        __batteryCapacity = [decoder decodeDoubleForKey: @"batteryCapacity"];
        __batteryCapacity_isset = YES;
    }
    return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
    if (__batteryCharger_isset)
    {
        [encoder encodeObject: __batteryCharger forKey: @"batteryCharger"];
    }
    if (__batteryHealth_isset)
    {
        [encoder encodeObject: __batteryHealth forKey: @"batteryHealth"];
    }
    if (__batteryVoltage_isset)
    {
        [encoder encodeDouble: __batteryVoltage forKey: @"batteryVoltage"];
    }
    if (__batteryTemperature_isset)
    {
        [encoder encodeDouble: __batteryTemperature forKey: @"batteryTemperature"];
    }
    if (__batteryTechnology_isset)
    {
        [encoder encodeObject: __batteryTechnology forKey: @"batteryTechnology"];
    }
    if (__batteryCapacity_isset)
    {
        [encoder encodeDouble: __batteryCapacity forKey: @"batteryCapacity"];
    }
}

- (void) dealloc
{
    [__batteryCharger release];
    [__batteryHealth release];
    [__batteryTechnology release];
    [super dealloc];
}

- (NSString *) batteryCharger {
    return [[__batteryCharger retain] autorelease];
}

- (void) setBatteryCharger: (NSString *) batteryCharger {
    [batteryCharger retain];
    [__batteryCharger release];
    __batteryCharger = batteryCharger;
    __batteryCharger_isset = YES;
}

- (BOOL) batteryChargerIsSet {
    return __batteryCharger_isset;
}

- (void) unsetBatteryCharger {
    [__batteryCharger release];
    __batteryCharger = nil;
    __batteryCharger_isset = NO;
}

- (NSString *) batteryHealth {
    return [[__batteryHealth retain] autorelease];
}

- (void) setBatteryHealth: (NSString *) batteryHealth {
    [batteryHealth retain];
    [__batteryHealth release];
    __batteryHealth = batteryHealth;
    __batteryHealth_isset = YES;
}

- (BOOL) batteryHealthIsSet {
    return __batteryHealth_isset;
}

- (void) unsetBatteryHealth {
    [__batteryHealth release];
    __batteryHealth = nil;
    __batteryHealth_isset = NO;
}

- (double) batteryVoltage {
    return __batteryVoltage;
}

- (void) setBatteryVoltage: (double) batteryVoltage {
    __batteryVoltage = batteryVoltage;
    __batteryVoltage_isset = YES;
}

- (BOOL) batteryVoltageIsSet {
    return __batteryVoltage_isset;
}

- (void) unsetBatteryVoltage {
    __batteryVoltage_isset = NO;
}

- (double) batteryTemperature {
    return __batteryTemperature;
}

- (void) setBatteryTemperature: (double) batteryTemperature {
    __batteryTemperature = batteryTemperature;
    __batteryTemperature_isset = YES;
}

- (BOOL) batteryTemperatureIsSet {
    return __batteryTemperature_isset;
}

- (void) unsetBatteryTemperature {
    __batteryTemperature_isset = NO;
}

- (NSString *) batteryTechnology {
    return [[__batteryTechnology retain] autorelease];
}

- (void) setBatteryTechnology: (NSString *) batteryTechnology {
    [batteryTechnology retain];
    [__batteryTechnology release];
    __batteryTechnology = batteryTechnology;
    __batteryTechnology_isset = YES;
}

- (BOOL) batteryTechnologyIsSet {
    return __batteryTechnology_isset;
}

- (void) unsetBatteryTechnology {
    [__batteryTechnology release];
    __batteryTechnology = nil;
    __batteryTechnology_isset = NO;
}

- (double) batteryCapacity {
    return __batteryCapacity;
}

- (void) setBatteryCapacity: (double) batteryCapacity {
    __batteryCapacity = batteryCapacity;
    __batteryCapacity_isset = YES;
}

- (BOOL) batteryCapacityIsSet {
    return __batteryCapacity_isset;
}

- (void) unsetBatteryCapacity {
    __batteryCapacity_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
    NSString * fieldName;
    int fieldType;
    int fieldID;
    
    [inProtocol readStructBeginReturningName: NULL];
    while (true)
    {
        [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
        if (fieldType == TType_STOP) {
            break;
        }
        switch (fieldID)
        {
            case 1:
                if (fieldType == TType_STRING) {
                    NSString * fieldValue = [inProtocol readString];
                    [self setBatteryCharger: fieldValue];
                } else {
                    [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
                }
                break;
            case 2:
                if (fieldType == TType_STRING) {
                    NSString * fieldValue = [inProtocol readString];
                    [self setBatteryHealth: fieldValue];
                } else {
                    [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
                }
                break;
            case 3:
                if (fieldType == TType_DOUBLE) {
                    double fieldValue = [inProtocol readDouble];
                    [self setBatteryVoltage: fieldValue];
                } else {
                    [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
                }
                break;
            case 4:
                if (fieldType == TType_DOUBLE) {
                    double fieldValue = [inProtocol readDouble];
                    [self setBatteryTemperature: fieldValue];
                } else {
                    [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
                }
                break;
            case 5:
                if (fieldType == TType_STRING) {
                    NSString * fieldValue = [inProtocol readString];
                    [self setBatteryTechnology: fieldValue];
                } else {
                    [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
                }
                break;
            case 6:
                if (fieldType == TType_DOUBLE) {
                    double fieldValue = [inProtocol readDouble];
                    [self setBatteryCapacity: fieldValue];
                } else {
                    [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
                }
                break;
            default:
                [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
                break;
        }
        [inProtocol readFieldEnd];
    }
    [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
    [outProtocol writeStructBeginWithName: @"BatteryDetails"];
    if (__batteryCharger_isset) {
        if (__batteryCharger != nil) {
            [outProtocol writeFieldBeginWithName: @"batteryCharger" type: TType_STRING fieldID: 1];
            [outProtocol writeString: __batteryCharger];
            [outProtocol writeFieldEnd];
        }
    }
    if (__batteryHealth_isset) {
        if (__batteryHealth != nil) {
            [outProtocol writeFieldBeginWithName: @"batteryHealth" type: TType_STRING fieldID: 2];
            [outProtocol writeString: __batteryHealth];
            [outProtocol writeFieldEnd];
        }
    }
    if (__batteryVoltage_isset) {
        [outProtocol writeFieldBeginWithName: @"batteryVoltage" type: TType_DOUBLE fieldID: 3];
        [outProtocol writeDouble: __batteryVoltage];
        [outProtocol writeFieldEnd];
    }
    if (__batteryTemperature_isset) {
        [outProtocol writeFieldBeginWithName: @"batteryTemperature" type: TType_DOUBLE fieldID: 4];
        [outProtocol writeDouble: __batteryTemperature];
        [outProtocol writeFieldEnd];
    }
    if (__batteryTechnology_isset) {
        if (__batteryTechnology != nil) {
            [outProtocol writeFieldBeginWithName: @"batteryTechnology" type: TType_STRING fieldID: 5];
            [outProtocol writeString: __batteryTechnology];
            [outProtocol writeFieldEnd];
        }
    }
    if (__batteryCapacity_isset) {
        [outProtocol writeFieldBeginWithName: @"batteryCapacity" type: TType_DOUBLE fieldID: 6];
        [outProtocol writeDouble: __batteryCapacity];
        [outProtocol writeFieldEnd];
    }
    [outProtocol writeFieldStop];
    [outProtocol writeStructEnd];
}

- (NSString *) description {
    NSMutableString * ms = [NSMutableString stringWithString: @"BatteryDetails("];
    [ms appendString: @"batteryCharger:"];
    [ms appendFormat: @"\"%@\"", __batteryCharger];
    [ms appendString: @",batteryHealth:"];
    [ms appendFormat: @"\"%@\"", __batteryHealth];
    [ms appendString: @",batteryVoltage:"];
    [ms appendFormat: @"%f", __batteryVoltage];
    [ms appendString: @",batteryTemperature:"];
    [ms appendFormat: @"%f", __batteryTemperature];
    [ms appendString: @",batteryTechnology:"];
    [ms appendFormat: @"\"%@\"", __batteryTechnology];
    [ms appendString: @",batteryCapacity:"];
    [ms appendFormat: @"%f", __batteryCapacity];
    [ms appendString: @")"];
    return [NSString stringWithString: ms];
}

@end

@implementation CpuStatus

- (id) initWithCpuUsage: (double) cpuUsage uptime: (double) uptime
{
    self = [super init];
    __cpuUsage = cpuUsage;
    __cpuUsage_isset = YES;
    __uptime = uptime;
    __uptime_isset = YES;
    return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
    self = [super init];
    if ([decoder containsValueForKey: @"cpuUsage"])
    {
        __cpuUsage = [decoder decodeDoubleForKey: @"cpuUsage"];
        __cpuUsage_isset = YES;
    }
    if ([decoder containsValueForKey: @"uptime"])
    {
        __uptime = [decoder decodeDoubleForKey: @"uptime"];
        __uptime_isset = YES;
    }
    return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
    if (__cpuUsage_isset)
    {
        [encoder encodeDouble: __cpuUsage forKey: @"cpuUsage"];
    }
    if (__uptime_isset)
    {
        [encoder encodeDouble: __uptime forKey: @"uptime"];
    }
}

- (void) dealloc
{
    [super dealloc];
}

- (double) cpuUsage {
    return __cpuUsage;
}

- (void) setCpuUsage: (double) cpuUsage {
    __cpuUsage = cpuUsage;
    __cpuUsage_isset = YES;
}

- (BOOL) cpuUsageIsSet {
    return __cpuUsage_isset;
}

- (void) unsetCpuUsage {
    __cpuUsage_isset = NO;
}

- (double) uptime {
    return __uptime;
}

- (void) setUptime: (double) uptime {
    __uptime = uptime;
    __uptime_isset = YES;
}

- (BOOL) uptimeIsSet {
    return __uptime_isset;
}

- (void) unsetUptime {
    __uptime_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
    NSString * fieldName;
    int fieldType;
    int fieldID;
    
    [inProtocol readStructBeginReturningName: NULL];
    while (true)
    {
        [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
        if (fieldType == TType_STOP) {
            break;
        }
        switch (fieldID)
        {
            case 1:
                if (fieldType == TType_DOUBLE) {
                    double fieldValue = [inProtocol readDouble];
                    [self setCpuUsage: fieldValue];
                } else {
                    [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
                }
                break;
            case 2:
                if (fieldType == TType_DOUBLE) {
                    double fieldValue = [inProtocol readDouble];
                    [self setUptime: fieldValue];
                } else {
                    [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
                }
                break;
            default:
                [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
                break;
        }
        [inProtocol readFieldEnd];
    }
    [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
    [outProtocol writeStructBeginWithName: @"CpuStatus"];
    if (__cpuUsage_isset) {
        [outProtocol writeFieldBeginWithName: @"cpuUsage" type: TType_DOUBLE fieldID: 1];
        [outProtocol writeDouble: __cpuUsage];
        [outProtocol writeFieldEnd];
    }
    if (__uptime_isset) {
        [outProtocol writeFieldBeginWithName: @"uptime" type: TType_DOUBLE fieldID: 2];
        [outProtocol writeDouble: __uptime];
        [outProtocol writeFieldEnd];
    }
    [outProtocol writeFieldStop];
    [outProtocol writeStructEnd];
}

- (NSString *) description {
    NSMutableString * ms = [NSMutableString stringWithString: @"CpuStatus("];
    [ms appendString: @"cpuUsage:"];
    [ms appendFormat: @"%f", __cpuUsage];
    [ms appendString: @",uptime:"];
    [ms appendFormat: @"%f", __uptime];
    [ms appendString: @")"];
    return [NSString stringWithString: ms];
}

@end

@implementation CallInfo

- (id) initWithIncomingCallTime: (double) incomingCallTime outgoingCallTime: (double) outgoingCallTime nonCallTime: (double) nonCallTime callStatus: (NSString *) callStatus
{
    self = [super init];
    __incomingCallTime = incomingCallTime;
    __incomingCallTime_isset = YES;
    __outgoingCallTime = outgoingCallTime;
    __outgoingCallTime_isset = YES;
    __nonCallTime = nonCallTime;
    __nonCallTime_isset = YES;
    __callStatus = [callStatus retain];
    __callStatus_isset = YES;
    return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
    self = [super init];
    if ([decoder containsValueForKey: @"incomingCallTime"])
    {
        __incomingCallTime = [decoder decodeDoubleForKey: @"incomingCallTime"];
        __incomingCallTime_isset = YES;
    }
    if ([decoder containsValueForKey: @"outgoingCallTime"])
    {
        __outgoingCallTime = [decoder decodeDoubleForKey: @"outgoingCallTime"];
        __outgoingCallTime_isset = YES;
    }
    if ([decoder containsValueForKey: @"nonCallTime"])
    {
        __nonCallTime = [decoder decodeDoubleForKey: @"nonCallTime"];
        __nonCallTime_isset = YES;
    }
    if ([decoder containsValueForKey: @"callStatus"])
    {
        __callStatus = [[decoder decodeObjectForKey: @"callStatus"] retain];
        __callStatus_isset = YES;
    }
    return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
    if (__incomingCallTime_isset)
    {
        [encoder encodeDouble: __incomingCallTime forKey: @"incomingCallTime"];
    }
    if (__outgoingCallTime_isset)
    {
        [encoder encodeDouble: __outgoingCallTime forKey: @"outgoingCallTime"];
    }
    if (__nonCallTime_isset)
    {
        [encoder encodeDouble: __nonCallTime forKey: @"nonCallTime"];
    }
    if (__callStatus_isset)
    {
        [encoder encodeObject: __callStatus forKey: @"callStatus"];
    }
}

- (void) dealloc
{
    [__callStatus release];
    [super dealloc];
}

- (double) incomingCallTime {
    return __incomingCallTime;
}

- (void) setIncomingCallTime: (double) incomingCallTime {
    __incomingCallTime = incomingCallTime;
    __incomingCallTime_isset = YES;
}

- (BOOL) incomingCallTimeIsSet {
    return __incomingCallTime_isset;
}

- (void) unsetIncomingCallTime {
    __incomingCallTime_isset = NO;
}

- (double) outgoingCallTime {
    return __outgoingCallTime;
}

- (void) setOutgoingCallTime: (double) outgoingCallTime {
    __outgoingCallTime = outgoingCallTime;
    __outgoingCallTime_isset = YES;
}

- (BOOL) outgoingCallTimeIsSet {
    return __outgoingCallTime_isset;
}

- (void) unsetOutgoingCallTime {
    __outgoingCallTime_isset = NO;
}

- (double) nonCallTime {
    return __nonCallTime;
}

- (void) setNonCallTime: (double) nonCallTime {
    __nonCallTime = nonCallTime;
    __nonCallTime_isset = YES;
}

- (BOOL) nonCallTimeIsSet {
    return __nonCallTime_isset;
}

- (void) unsetNonCallTime {
    __nonCallTime_isset = NO;
}

- (NSString *) callStatus {
    return [[__callStatus retain] autorelease];
}

- (void) setCallStatus: (NSString *) callStatus {
    [callStatus retain];
    [__callStatus release];
    __callStatus = callStatus;
    __callStatus_isset = YES;
}

- (BOOL) callStatusIsSet {
    return __callStatus_isset;
}

- (void) unsetCallStatus {
    [__callStatus release];
    __callStatus = nil;
    __callStatus_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
    NSString * fieldName;
    int fieldType;
    int fieldID;
    
    [inProtocol readStructBeginReturningName: NULL];
    while (true)
    {
        [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
        if (fieldType == TType_STOP) {
            break;
        }
        switch (fieldID)
        {
            case 1:
                if (fieldType == TType_DOUBLE) {
                    double fieldValue = [inProtocol readDouble];
                    [self setIncomingCallTime: fieldValue];
                } else {
                    [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
                }
                break;
            case 2:
                if (fieldType == TType_DOUBLE) {
                    double fieldValue = [inProtocol readDouble];
                    [self setOutgoingCallTime: fieldValue];
                } else {
                    [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
                }
                break;
            case 3:
                if (fieldType == TType_DOUBLE) {
                    double fieldValue = [inProtocol readDouble];
                    [self setNonCallTime: fieldValue];
                } else {
                    [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
                }
                break;
            case 4:
                if (fieldType == TType_STRING) {
                    NSString * fieldValue = [inProtocol readString];
                    [self setCallStatus: fieldValue];
                } else {
                    [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
                }
                break;
            default:
                [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
                break;
        }
        [inProtocol readFieldEnd];
    }
    [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
    [outProtocol writeStructBeginWithName: @"CallInfo"];
    if (__incomingCallTime_isset) {
        [outProtocol writeFieldBeginWithName: @"incomingCallTime" type: TType_DOUBLE fieldID: 1];
        [outProtocol writeDouble: __incomingCallTime];
        [outProtocol writeFieldEnd];
    }
    if (__outgoingCallTime_isset) {
        [outProtocol writeFieldBeginWithName: @"outgoingCallTime" type: TType_DOUBLE fieldID: 2];
        [outProtocol writeDouble: __outgoingCallTime];
        [outProtocol writeFieldEnd];
    }
    if (__nonCallTime_isset) {
        [outProtocol writeFieldBeginWithName: @"nonCallTime" type: TType_DOUBLE fieldID: 3];
        [outProtocol writeDouble: __nonCallTime];
        [outProtocol writeFieldEnd];
    }
    if (__callStatus_isset) {
        if (__callStatus != nil) {
            [outProtocol writeFieldBeginWithName: @"callStatus" type: TType_STRING fieldID: 4];
            [outProtocol writeString: __callStatus];
            [outProtocol writeFieldEnd];
        }
    }
    [outProtocol writeFieldStop];
    [outProtocol writeStructEnd];
}

- (NSString *) description {
    NSMutableString * ms = [NSMutableString stringWithString: @"CallInfo("];
    [ms appendString: @"incomingCallTime:"];
    [ms appendFormat: @"%f", __incomingCallTime];
    [ms appendString: @",outgoingCallTime:"];
    [ms appendFormat: @"%f", __outgoingCallTime];
    [ms appendString: @",nonCallTime:"];
    [ms appendFormat: @"%f", __nonCallTime];
    [ms appendString: @",callStatus:"];
    [ms appendFormat: @"\"%@\"", __callStatus];
    [ms appendString: @")"];
    return [NSString stringWithString: ms];
}

@end

@implementation Sample

- (id) initWithUuId: (NSString *) uuId timestamp: (double) timestamp piList: (ProcessInfoList) piList batteryState: (NSString *) batteryState batteryLevel: (double) batteryLevel memoryWired: (int32_t) memoryWired memoryActive: (int32_t) memoryActive memoryInactive: (int32_t) memoryInactive memoryFree: (int32_t) memoryFree memoryUser: (int32_t) memoryUser triggeredBy: (NSString *) triggeredBy networkStatus: (NSString *) networkStatus distanceTraveled: (double) distanceTraveled screenBrightness: (int32_t) screenBrightness networkDetails: (NetworkDetails *) networkDetails batteryDetails: (BatteryDetails *) batteryDetails cpuStatus: (CpuStatus *) cpuStatus locationProviders: (NSArray *) locationProviders callInfo: (CallInfo *) callInfo
{
    self = [super init];
    __uuId = [uuId retain];
    __uuId_isset = YES;
    __timestamp = timestamp;
    __timestamp_isset = YES;
    __piList = [piList retain];
    __piList_isset = YES;
    __batteryState = [batteryState retain];
    __batteryState_isset = YES;
    __batteryLevel = batteryLevel;
    __batteryLevel_isset = YES;
    __memoryWired = memoryWired;
    __memoryWired_isset = YES;
    __memoryActive = memoryActive;
    __memoryActive_isset = YES;
    __memoryInactive = memoryInactive;
    __memoryInactive_isset = YES;
    __memoryFree = memoryFree;
    __memoryFree_isset = YES;
    __memoryUser = memoryUser;
    __memoryUser_isset = YES;
    __triggeredBy = [triggeredBy retain];
    __triggeredBy_isset = YES;
    __networkStatus = [networkStatus retain];
    __networkStatus_isset = YES;
    __distanceTraveled = distanceTraveled;
    __distanceTraveled_isset = YES;
    __screenBrightness = screenBrightness;
    __screenBrightness_isset = YES;
    __networkDetails = [networkDetails retain];
    __networkDetails_isset = YES;
    __batteryDetails = [batteryDetails retain];
    __batteryDetails_isset = YES;
    __cpuStatus = [cpuStatus retain];
    __cpuStatus_isset = YES;
    __locationProviders = [locationProviders retain];
    __locationProviders_isset = YES;
    __callInfo = [callInfo retain];
    __callInfo_isset = YES;
    return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
    self = [super init];
    if ([decoder containsValueForKey: @"uuId"])
    {
        __uuId = [[decoder decodeObjectForKey: @"uuId"] retain];
        __uuId_isset = YES;
    }
    if ([decoder containsValueForKey: @"timestamp"])
    {
        __timestamp = [decoder decodeDoubleForKey: @"timestamp"];
        __timestamp_isset = YES;
    }
    if ([decoder containsValueForKey: @"piList"])
    {
        __piList = [[decoder decodeObjectForKey: @"piList"] retain];
        __piList_isset = YES;
    }
    if ([decoder containsValueForKey: @"batteryState"])
    {
        __batteryState = [[decoder decodeObjectForKey: @"batteryState"] retain];
        __batteryState_isset = YES;
    }
    if ([decoder containsValueForKey: @"batteryLevel"])
    {
        __batteryLevel = [decoder decodeDoubleForKey: @"batteryLevel"];
        __batteryLevel_isset = YES;
    }
    if ([decoder containsValueForKey: @"memoryWired"])
    {
        __memoryWired = [decoder decodeInt32ForKey: @"memoryWired"];
        __memoryWired_isset = YES;
    }
    if ([decoder containsValueForKey: @"memoryActive"])
    {
        __memoryActive = [decoder decodeInt32ForKey: @"memoryActive"];
        __memoryActive_isset = YES;
    }
    if ([decoder containsValueForKey: @"memoryInactive"])
    {
        __memoryInactive = [decoder decodeInt32ForKey: @"memoryInactive"];
        __memoryInactive_isset = YES;
    }
    if ([decoder containsValueForKey: @"memoryFree"])
    {
        __memoryFree = [decoder decodeInt32ForKey: @"memoryFree"];
        __memoryFree_isset = YES;
    }
    if ([decoder containsValueForKey: @"memoryUser"])
    {
        __memoryUser = [decoder decodeInt32ForKey: @"memoryUser"];
        __memoryUser_isset = YES;
    }
    if ([decoder containsValueForKey: @"triggeredBy"])
    {
        __triggeredBy = [[decoder decodeObjectForKey: @"triggeredBy"] retain];
        __triggeredBy_isset = YES;
    }
    if ([decoder containsValueForKey: @"networkStatus"])
    {
        __networkStatus = [[decoder decodeObjectForKey: @"networkStatus"] retain];
        __networkStatus_isset = YES;
    }
    if ([decoder containsValueForKey: @"distanceTraveled"])
    {
        __distanceTraveled = [decoder decodeDoubleForKey: @"distanceTraveled"];
        __distanceTraveled_isset = YES;
    }
    if ([decoder containsValueForKey: @"screenBrightness"])
    {
        __screenBrightness = [decoder decodeInt32ForKey: @"screenBrightness"];
        __screenBrightness_isset = YES;
    }
    if ([decoder containsValueForKey: @"networkDetails"])
    {
        __networkDetails = [[decoder decodeObjectForKey: @"networkDetails"] retain];
        __networkDetails_isset = YES;
    }
    if ([decoder containsValueForKey: @"batteryDetails"])
    {
        __batteryDetails = [[decoder decodeObjectForKey: @"batteryDetails"] retain];
        __batteryDetails_isset = YES;
    }
    if ([decoder containsValueForKey: @"cpuStatus"])
    {
        __cpuStatus = [[decoder decodeObjectForKey: @"cpuStatus"] retain];
        __cpuStatus_isset = YES;
    }
    if ([decoder containsValueForKey: @"locationProviders"])
    {
        __locationProviders = [[decoder decodeObjectForKey: @"locationProviders"] retain];
        __locationProviders_isset = YES;
    }
    if ([decoder containsValueForKey: @"callInfo"])
    {
        __callInfo = [[decoder decodeObjectForKey: @"callInfo"] retain];
        __callInfo_isset = YES;
    }
    return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
    if (__uuId_isset)
    {
        [encoder encodeObject: __uuId forKey: @"uuId"];
    }
    if (__timestamp_isset)
    {
        [encoder encodeDouble: __timestamp forKey: @"timestamp"];
    }
    if (__piList_isset)
    {
        [encoder encodeObject: __piList forKey: @"piList"];
    }
    if (__batteryState_isset)
    {
        [encoder encodeObject: __batteryState forKey: @"batteryState"];
    }
    if (__batteryLevel_isset)
    {
        [encoder encodeDouble: __batteryLevel forKey: @"batteryLevel"];
    }
    if (__memoryWired_isset)
    {
        [encoder encodeInt32: __memoryWired forKey: @"memoryWired"];
    }
    if (__memoryActive_isset)
    {
        [encoder encodeInt32: __memoryActive forKey: @"memoryActive"];
    }
    if (__memoryInactive_isset)
    {
        [encoder encodeInt32: __memoryInactive forKey: @"memoryInactive"];
    }
    if (__memoryFree_isset)
    {
        [encoder encodeInt32: __memoryFree forKey: @"memoryFree"];
    }
    if (__memoryUser_isset)
    {
        [encoder encodeInt32: __memoryUser forKey: @"memoryUser"];
    }
    if (__triggeredBy_isset)
    {
        [encoder encodeObject: __triggeredBy forKey: @"triggeredBy"];
    }
    if (__networkStatus_isset)
    {
        [encoder encodeObject: __networkStatus forKey: @"networkStatus"];
    }
    if (__distanceTraveled_isset)
    {
        [encoder encodeDouble: __distanceTraveled forKey: @"distanceTraveled"];
    }
    if (__screenBrightness_isset)
    {
        [encoder encodeInt32: __screenBrightness forKey: @"screenBrightness"];
    }
    if (__networkDetails_isset)
    {
        [encoder encodeObject: __networkDetails forKey: @"networkDetails"];
    }
    if (__batteryDetails_isset)
    {
        [encoder encodeObject: __batteryDetails forKey: @"batteryDetails"];
    }
    if (__cpuStatus_isset)
    {
        [encoder encodeObject: __cpuStatus forKey: @"cpuStatus"];
    }
    if (__locationProviders_isset)
    {
        [encoder encodeObject: __locationProviders forKey: @"locationProviders"];
    }
    if (__callInfo_isset)
    {
        [encoder encodeObject: __callInfo forKey: @"callInfo"];
    }
}

- (void) dealloc
{
    [__uuId release];
    [__piList release];
    [__batteryState release];
    [__triggeredBy release];
    [__networkStatus release];
    [__networkDetails release];
    [__batteryDetails release];
    [__cpuStatus release];
    [__locationProviders release];
    [__callInfo release];
    [super dealloc];
}

- (NSString *) uuId {
    return [[__uuId retain] autorelease];
}

- (void) setUuId: (NSString *) uuId {
    [uuId retain];
    [__uuId release];
    __uuId = uuId;
    __uuId_isset = YES;
}

- (BOOL) uuIdIsSet {
    return __uuId_isset;
}

- (void) unsetUuId {
    [__uuId release];
    __uuId = nil;
    __uuId_isset = NO;
}

- (double) timestamp {
    return __timestamp;
}

- (void) setTimestamp: (double) timestamp {
    __timestamp = timestamp;
    __timestamp_isset = YES;
}

- (BOOL) timestampIsSet {
    return __timestamp_isset;
}

- (void) unsetTimestamp {
    __timestamp_isset = NO;
}

- (NSArray *) piList {
    return [[__piList retain] autorelease];
}

- (void) setPiList: (NSArray *) piList {
    [piList retain];
    [__piList release];
    __piList = piList;
    __piList_isset = YES;
}

- (BOOL) piListIsSet {
    return __piList_isset;
}

- (void) unsetPiList {
    [__piList release];
    __piList = nil;
    __piList_isset = NO;
}

- (NSString *) batteryState {
    return [[__batteryState retain] autorelease];
}

- (void) setBatteryState: (NSString *) batteryState {
    [batteryState retain];
    [__batteryState release];
    __batteryState = batteryState;
    __batteryState_isset = YES;
}

- (BOOL) batteryStateIsSet {
    return __batteryState_isset;
}

- (void) unsetBatteryState {
    [__batteryState release];
    __batteryState = nil;
    __batteryState_isset = NO;
}

- (double) batteryLevel {
    return __batteryLevel;
}

- (void) setBatteryLevel: (double) batteryLevel {
    __batteryLevel = batteryLevel;
    __batteryLevel_isset = YES;
}

- (BOOL) batteryLevelIsSet {
    return __batteryLevel_isset;
}

- (void) unsetBatteryLevel {
    __batteryLevel_isset = NO;
}

- (int32_t) memoryWired {
    return __memoryWired;
}

- (void) setMemoryWired: (int32_t) memoryWired {
    __memoryWired = memoryWired;
    __memoryWired_isset = YES;
}

- (BOOL) memoryWiredIsSet {
    return __memoryWired_isset;
}

- (void) unsetMemoryWired {
    __memoryWired_isset = NO;
}

- (int32_t) memoryActive {
    return __memoryActive;
}

- (void) setMemoryActive: (int32_t) memoryActive {
    __memoryActive = memoryActive;
    __memoryActive_isset = YES;
}

- (BOOL) memoryActiveIsSet {
    return __memoryActive_isset;
}

- (void) unsetMemoryActive {
    __memoryActive_isset = NO;
}

- (int32_t) memoryInactive {
    return __memoryInactive;
}

- (void) setMemoryInactive: (int32_t) memoryInactive {
    __memoryInactive = memoryInactive;
    __memoryInactive_isset = YES;
}

- (BOOL) memoryInactiveIsSet {
    return __memoryInactive_isset;
}

- (void) unsetMemoryInactive {
    __memoryInactive_isset = NO;
}

- (int32_t) memoryFree {
    return __memoryFree;
}

- (void) setMemoryFree: (int32_t) memoryFree {
    __memoryFree = memoryFree;
    __memoryFree_isset = YES;
}

- (BOOL) memoryFreeIsSet {
    return __memoryFree_isset;
}

- (void) unsetMemoryFree {
    __memoryFree_isset = NO;
}

- (int32_t) memoryUser {
    return __memoryUser;
}

- (void) setMemoryUser: (int32_t) memoryUser {
    __memoryUser = memoryUser;
    __memoryUser_isset = YES;
}

- (BOOL) memoryUserIsSet {
    return __memoryUser_isset;
}

- (void) unsetMemoryUser {
    __memoryUser_isset = NO;
}

- (NSString *) triggeredBy {
    return [[__triggeredBy retain] autorelease];
}

- (void) setTriggeredBy: (NSString *) triggeredBy {
    [triggeredBy retain];
    [__triggeredBy release];
    __triggeredBy = triggeredBy;
    __triggeredBy_isset = YES;
}

- (BOOL) triggeredByIsSet {
    return __triggeredBy_isset;
}

- (void) unsetTriggeredBy {
    [__triggeredBy release];
    __triggeredBy = nil;
    __triggeredBy_isset = NO;
}

- (NSString *) networkStatus {
    return [[__networkStatus retain] autorelease];
}

- (void) setNetworkStatus: (NSString *) networkStatus {
    [networkStatus retain];
    [__networkStatus release];
    __networkStatus = networkStatus;
    __networkStatus_isset = YES;
}

- (BOOL) networkStatusIsSet {
    return __networkStatus_isset;
}

- (void) unsetNetworkStatus {
    [__networkStatus release];
    __networkStatus = nil;
    __networkStatus_isset = NO;
}

- (double) distanceTraveled {
    return __distanceTraveled;
}

- (void) setDistanceTraveled: (double) distanceTraveled {
    __distanceTraveled = distanceTraveled;
    __distanceTraveled_isset = YES;
}

- (BOOL) distanceTraveledIsSet {
    return __distanceTraveled_isset;
}

- (void) unsetDistanceTraveled {
    __distanceTraveled_isset = NO;
}

- (int32_t) screenBrightness {
    return __screenBrightness;
}

- (void) setScreenBrightness: (int32_t) screenBrightness {
    __screenBrightness = screenBrightness;
    __screenBrightness_isset = YES;
}

- (BOOL) screenBrightnessIsSet {
    return __screenBrightness_isset;
}

- (void) unsetScreenBrightness {
    __screenBrightness_isset = NO;
}

- (NetworkDetails *) networkDetails {
    return [[__networkDetails retain] autorelease];
}

- (void) setNetworkDetails: (NetworkDetails *) networkDetails {
    [networkDetails retain];
    [__networkDetails release];
    __networkDetails = networkDetails;
    __networkDetails_isset = YES;
}

- (BOOL) networkDetailsIsSet {
    return __networkDetails_isset;
}

- (void) unsetNetworkDetails {
    [__networkDetails release];
    __networkDetails = nil;
    __networkDetails_isset = NO;
}

- (BatteryDetails *) batteryDetails {
    return [[__batteryDetails retain] autorelease];
}

- (void) setBatteryDetails: (BatteryDetails *) batteryDetails {
    [batteryDetails retain];
    [__batteryDetails release];
    __batteryDetails = batteryDetails;
    __batteryDetails_isset = YES;
}

- (BOOL) batteryDetailsIsSet {
    return __batteryDetails_isset;
}

- (void) unsetBatteryDetails {
    [__batteryDetails release];
    __batteryDetails = nil;
    __batteryDetails_isset = NO;
}

- (CpuStatus *) cpuStatus {
    return [[__cpuStatus retain] autorelease];
}

- (void) setCpuStatus: (CpuStatus *) cpuStatus {
    [cpuStatus retain];
    [__cpuStatus release];
    __cpuStatus = cpuStatus;
    __cpuStatus_isset = YES;
}

- (BOOL) cpuStatusIsSet {
    return __cpuStatus_isset;
}

- (void) unsetCpuStatus {
    [__cpuStatus release];
    __cpuStatus = nil;
    __cpuStatus_isset = NO;
}

- (NSArray *) locationProviders {
    return [[__locationProviders retain] autorelease];
}

- (void) setLocationProviders: (NSArray *) locationProviders {
    [locationProviders retain];
    [__locationProviders release];
    __locationProviders = locationProviders;
    __locationProviders_isset = YES;
}

- (BOOL) locationProvidersIsSet {
    return __locationProviders_isset;
}

- (void) unsetLocationProviders {
    [__locationProviders release];
    __locationProviders = nil;
    __locationProviders_isset = NO;
}

- (CallInfo *) callInfo {
    return [[__callInfo retain] autorelease];
}

- (void) setCallInfo: (CallInfo *) callInfo {
    [callInfo retain];
    [__callInfo release];
    __callInfo = callInfo;
    __callInfo_isset = YES;
}

- (BOOL) callInfoIsSet {
    return __callInfo_isset;
}

- (void) unsetCallInfo {
    [__callInfo release];
    __callInfo = nil;
    __callInfo_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
    NSString * fieldName;
    int fieldType;
    int fieldID;
    
    [inProtocol readStructBeginReturningName: NULL];
    while (true)
    {
        [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
        if (fieldType == TType_STOP) {
            break;
        }
        switch (fieldID)
        {
            case 1:
                if (fieldType == TType_STRING) {
                    NSString * fieldValue = [inProtocol readString];
                    [self setUuId: fieldValue];
                } else {
                    [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
                }
                break;
            case 2:
                if (fieldType == TType_DOUBLE) {
                    double fieldValue = [inProtocol readDouble];
                    [self setTimestamp: fieldValue];
                } else {
                    [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
                }
                break;
            case 3:
                if (fieldType == TType_LIST) {
                    int _size0;
                    [inProtocol readListBeginReturningElementType: NULL size: &_size0];
                    NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size0];
                    int _i1;
                    for (_i1 = 0; _i1 < _size0; ++_i1)
                    {
                        ProcessInfo *_elem2 = [[ProcessInfo alloc] init];
                        [_elem2 read: inProtocol];
                        [fieldValue addObject: _elem2];
                        [_elem2 release];
                    }
                    [inProtocol readListEnd];
                    [self setPiList: fieldValue];
                    [fieldValue release];
                } else {
                    [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
                }
                break;
            case 4:
                if (fieldType == TType_STRING) {
                    NSString * fieldValue = [inProtocol readString];
                    [self setBatteryState: fieldValue];
                } else {
                    [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
                }
                break;
            case 5:
                if (fieldType == TType_DOUBLE) {
                    double fieldValue = [inProtocol readDouble];
                    [self setBatteryLevel: fieldValue];
                } else {
                    [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
                }
                break;
            case 6:
                if (fieldType == TType_I32) {
                    int32_t fieldValue = [inProtocol readI32];
                    [self setMemoryWired: fieldValue];
                } else {
                    [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
                }
                break;
            case 7:
                if (fieldType == TType_I32) {
                    int32_t fieldValue = [inProtocol readI32];
                    [self setMemoryActive: fieldValue];
                } else {
                    [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
                }
                break;
            case 8:
                if (fieldType == TType_I32) {
                    int32_t fieldValue = [inProtocol readI32];
                    [self setMemoryInactive: fieldValue];
                } else {
                    [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
                }
                break;
            case 9:
                if (fieldType == TType_I32) {
                    int32_t fieldValue = [inProtocol readI32];
                    [self setMemoryFree: fieldValue];
                } else {
                    [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
                }
                break;
            case 10:
                if (fieldType == TType_I32) {
                    int32_t fieldValue = [inProtocol readI32];
                    [self setMemoryUser: fieldValue];
                } else {
                    [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
                }
                break;
            case 11:
                if (fieldType == TType_STRING) {
                    NSString * fieldValue = [inProtocol readString];
                    [self setTriggeredBy: fieldValue];
                } else {
                    [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
                }
                break;
            case 12:
                if (fieldType == TType_STRING) {
                    NSString * fieldValue = [inProtocol readString];
                    [self setNetworkStatus: fieldValue];
                } else {
                    [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
                }
                break;
            case 13:
                if (fieldType == TType_DOUBLE) {
                    double fieldValue = [inProtocol readDouble];
                    [self setDistanceTraveled: fieldValue];
                } else {
                    [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
                }
                break;
            case 14:
                if (fieldType == TType_I32) {
                    int32_t fieldValue = [inProtocol readI32];
                    [self setScreenBrightness: fieldValue];
                } else {
                    [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
                }
                break;
            case 15:
                if (fieldType == TType_STRUCT) {
                    NetworkDetails *fieldValue = [[NetworkDetails alloc] init];
                    [fieldValue read: inProtocol];
                    [self setNetworkDetails: fieldValue];
                    [fieldValue release];
                } else {
                    [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
                }
                break;
            case 16:
                if (fieldType == TType_STRUCT) {
                    BatteryDetails *fieldValue = [[BatteryDetails alloc] init];
                    [fieldValue read: inProtocol];
                    [self setBatteryDetails: fieldValue];
                    [fieldValue release];
                } else {
                    [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
                }
                break;
            case 17:
                if (fieldType == TType_STRUCT) {
                    CpuStatus *fieldValue = [[CpuStatus alloc] init];
                    [fieldValue read: inProtocol];
                    [self setCpuStatus: fieldValue];
                    [fieldValue release];
                } else {
                    [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
                }
                break;
            case 18:
                if (fieldType == TType_LIST) {
                    int _size3;
                    [inProtocol readListBeginReturningElementType: NULL size: &_size3];
                    NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size3];
                    int _i4;
                    for (_i4 = 0; _i4 < _size3; ++_i4)
                    {
                        NSString * _elem5 = [inProtocol readString];
                        [fieldValue addObject: _elem5];
                    }
                    [inProtocol readListEnd];
                    [self setLocationProviders: fieldValue];
                    [fieldValue release];
                } else {
                    [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
                }
                break;
            case 19:
                if (fieldType == TType_STRUCT) {
                    CallInfo *fieldValue = [[CallInfo alloc] init];
                    [fieldValue read: inProtocol];
                    [self setCallInfo: fieldValue];
                    [fieldValue release];
                } else {
                    [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
                }
                break;
            default:
                [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
                break;
        }
        [inProtocol readFieldEnd];
    }
    [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
    [outProtocol writeStructBeginWithName: @"Sample"];
    if (__uuId_isset) {
        if (__uuId != nil) {
            [outProtocol writeFieldBeginWithName: @"uuId" type: TType_STRING fieldID: 1];
            [outProtocol writeString: __uuId];
            [outProtocol writeFieldEnd];
        }
    }
    if (__timestamp_isset) {
        [outProtocol writeFieldBeginWithName: @"timestamp" type: TType_DOUBLE fieldID: 2];
        [outProtocol writeDouble: __timestamp];
        [outProtocol writeFieldEnd];
    }
    if (__piList_isset) {
        if (__piList != nil) {
            [outProtocol writeFieldBeginWithName: @"piList" type: TType_LIST fieldID: 3];
            {
                [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__piList count]];
                int i7;
                for (i7 = 0; i7 < [__piList count]; i7++)
                {
                    [[__piList objectAtIndex: i7] write: outProtocol];
                }
                [outProtocol writeListEnd];
            }
            [outProtocol writeFieldEnd];
        }
    }
    if (__batteryState_isset) {
        if (__batteryState != nil) {
            [outProtocol writeFieldBeginWithName: @"batteryState" type: TType_STRING fieldID: 4];
            [outProtocol writeString: __batteryState];
            [outProtocol writeFieldEnd];
        }
    }
    if (__batteryLevel_isset) {
        [outProtocol writeFieldBeginWithName: @"batteryLevel" type: TType_DOUBLE fieldID: 5];
        [outProtocol writeDouble: __batteryLevel];
        [outProtocol writeFieldEnd];
    }
    if (__memoryWired_isset) {
        [outProtocol writeFieldBeginWithName: @"memoryWired" type: TType_I32 fieldID: 6];
        [outProtocol writeI32: __memoryWired];
        [outProtocol writeFieldEnd];
    }
    if (__memoryActive_isset) {
        [outProtocol writeFieldBeginWithName: @"memoryActive" type: TType_I32 fieldID: 7];
        [outProtocol writeI32: __memoryActive];
        [outProtocol writeFieldEnd];
    }
    if (__memoryInactive_isset) {
        [outProtocol writeFieldBeginWithName: @"memoryInactive" type: TType_I32 fieldID: 8];
        [outProtocol writeI32: __memoryInactive];
        [outProtocol writeFieldEnd];
    }
    if (__memoryFree_isset) {
        [outProtocol writeFieldBeginWithName: @"memoryFree" type: TType_I32 fieldID: 9];
        [outProtocol writeI32: __memoryFree];
        [outProtocol writeFieldEnd];
    }
    if (__memoryUser_isset) {
        [outProtocol writeFieldBeginWithName: @"memoryUser" type: TType_I32 fieldID: 10];
        [outProtocol writeI32: __memoryUser];
        [outProtocol writeFieldEnd];
    }
    if (__triggeredBy_isset) {
        if (__triggeredBy != nil) {
            [outProtocol writeFieldBeginWithName: @"triggeredBy" type: TType_STRING fieldID: 11];
            [outProtocol writeString: __triggeredBy];
            [outProtocol writeFieldEnd];
        }
    }
    if (__networkStatus_isset) {
        if (__networkStatus != nil) {
            [outProtocol writeFieldBeginWithName: @"networkStatus" type: TType_STRING fieldID: 12];
            [outProtocol writeString: __networkStatus];
            [outProtocol writeFieldEnd];
        }
    }
    if (__distanceTraveled_isset) {
        [outProtocol writeFieldBeginWithName: @"distanceTraveled" type: TType_DOUBLE fieldID: 13];
        [outProtocol writeDouble: __distanceTraveled];
        [outProtocol writeFieldEnd];
    }
    if (__screenBrightness_isset) {
        [outProtocol writeFieldBeginWithName: @"screenBrightness" type: TType_I32 fieldID: 14];
        [outProtocol writeI32: __screenBrightness];
        [outProtocol writeFieldEnd];
    }
    if (__networkDetails_isset) {
        if (__networkDetails != nil) {
            [outProtocol writeFieldBeginWithName: @"networkDetails" type: TType_STRUCT fieldID: 15];
            [__networkDetails write: outProtocol];
            [outProtocol writeFieldEnd];
        }
    }
    if (__batteryDetails_isset) {
        if (__batteryDetails != nil) {
            [outProtocol writeFieldBeginWithName: @"batteryDetails" type: TType_STRUCT fieldID: 16];
            [__batteryDetails write: outProtocol];
            [outProtocol writeFieldEnd];
        }
    }
    if (__cpuStatus_isset) {
        if (__cpuStatus != nil) {
            [outProtocol writeFieldBeginWithName: @"cpuStatus" type: TType_STRUCT fieldID: 17];
            [__cpuStatus write: outProtocol];
            [outProtocol writeFieldEnd];
        }
    }
    if (__locationProviders_isset) {
        if (__locationProviders != nil) {
            [outProtocol writeFieldBeginWithName: @"locationProviders" type: TType_LIST fieldID: 18];
            {
                [outProtocol writeListBeginWithElementType: TType_STRING size: [__locationProviders count]];
                int i9;
                for (i9 = 0; i9 < [__locationProviders count]; i9++)
                {
                    [outProtocol writeString: [__locationProviders objectAtIndex: i9]];
                }
                [outProtocol writeListEnd];
            }
            [outProtocol writeFieldEnd];
        }
    }
    if (__callInfo_isset) {
        if (__callInfo != nil) {
            [outProtocol writeFieldBeginWithName: @"callInfo" type: TType_STRUCT fieldID: 19];
            [__callInfo write: outProtocol];
            [outProtocol writeFieldEnd];
        }
    }
    [outProtocol writeFieldStop];
    [outProtocol writeStructEnd];
}

- (NSString *) description {
    NSMutableString * ms = [NSMutableString stringWithString: @"Sample("];
    [ms appendString: @"uuId:"];
    [ms appendFormat: @"\"%@\"", __uuId];
    [ms appendString: @",timestamp:"];
    [ms appendFormat: @"%f", __timestamp];
    [ms appendString: @",piList:"];
    [ms appendFormat: @"%@", __piList];
    [ms appendString: @",batteryState:"];
    [ms appendFormat: @"\"%@\"", __batteryState];
    [ms appendString: @",batteryLevel:"];
    [ms appendFormat: @"%f", __batteryLevel];
    [ms appendString: @",memoryWired:"];
    [ms appendFormat: @"%i", __memoryWired];
    [ms appendString: @",memoryActive:"];
    [ms appendFormat: @"%i", __memoryActive];
    [ms appendString: @",memoryInactive:"];
    [ms appendFormat: @"%i", __memoryInactive];
    [ms appendString: @",memoryFree:"];
    [ms appendFormat: @"%i", __memoryFree];
    [ms appendString: @",memoryUser:"];
    [ms appendFormat: @"%i", __memoryUser];
    [ms appendString: @",triggeredBy:"];
    [ms appendFormat: @"\"%@\"", __triggeredBy];
    [ms appendString: @",networkStatus:"];
    [ms appendFormat: @"\"%@\"", __networkStatus];
    [ms appendString: @",distanceTraveled:"];
    [ms appendFormat: @"%f", __distanceTraveled];
    [ms appendString: @",screenBrightness:"];
    [ms appendFormat: @"%i", __screenBrightness];
    [ms appendString: @",networkDetails:"];
    [ms appendFormat: @"%@", __networkDetails];
    [ms appendString: @",batteryDetails:"];
    [ms appendFormat: @"%@", __batteryDetails];
    [ms appendString: @",cpuStatus:"];
    [ms appendFormat: @"%@", __cpuStatus];
    [ms appendString: @",locationProviders:"];
    [ms appendFormat: @"%@", __locationProviders];
    [ms appendString: @",callInfo:"];
    [ms appendFormat: @"%@", __callInfo];
    [ms appendString: @")"];
    return [NSString stringWithString: ms];
}

@end

@implementation DetailScreenReport

- (id) initWithScore: (double) score xVals: (NSArray *) xVals yVals: (NSArray *) yVals expectedValue: (double) expectedValue error: (double) error errorWithout: (double) errorWithout samples: (double) samples samplesWithout: (double) samplesWithout
{
    self = [super init];
    __score = score;
    __score_isset = YES;
    __xVals = [xVals retain];
    __xVals_isset = YES;
    __yVals = [yVals retain];
    __yVals_isset = YES;
    __expectedValue = expectedValue;
    __expectedValue_isset = YES;
    __error = error;
    __error_isset = YES;
    __errorWithout = errorWithout;
    __errorWithout_isset = YES;
    __samples = samples;
    __samples_isset = YES;
    __samplesWithout = samplesWithout;
    __samplesWithout_isset = YES;
    return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
    self = [super init];
    if ([decoder containsValueForKey: @"score"])
    {
        __score = [decoder decodeDoubleForKey: @"score"];
        __score_isset = YES;
    }
    if ([decoder containsValueForKey: @"xVals"])
    {
        __xVals = [[decoder decodeObjectForKey: @"xVals"] retain];
        __xVals_isset = YES;
    }
    if ([decoder containsValueForKey: @"yVals"])
    {
        __yVals = [[decoder decodeObjectForKey: @"yVals"] retain];
        __yVals_isset = YES;
    }
    if ([decoder containsValueForKey: @"expectedValue"])
    {
        __expectedValue = [decoder decodeDoubleForKey: @"expectedValue"];
        __expectedValue_isset = YES;
    }
    if ([decoder containsValueForKey: @"error"])
    {
        __error = [decoder decodeDoubleForKey: @"error"];
        __error_isset = YES;
    }
    if ([decoder containsValueForKey: @"errorWithout"])
    {
        __errorWithout = [decoder decodeDoubleForKey: @"errorWithout"];
        __errorWithout_isset = YES;
    }
    if ([decoder containsValueForKey: @"samples"])
    {
        __samples = [decoder decodeDoubleForKey: @"samples"];
        __samples_isset = YES;
    }
    if ([decoder containsValueForKey: @"samplesWithout"])
    {
        __samplesWithout = [decoder decodeDoubleForKey: @"samplesWithout"];
        __samplesWithout_isset = YES;
    }
    return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
    if (__score_isset)
    {
        [encoder encodeDouble: __score forKey: @"score"];
    }
    if (__xVals_isset)
    {
        [encoder encodeObject: __xVals forKey: @"xVals"];
    }
    if (__yVals_isset)
    {
        [encoder encodeObject: __yVals forKey: @"yVals"];
    }
    if (__expectedValue_isset)
    {
        [encoder encodeDouble: __expectedValue forKey: @"expectedValue"];
    }
    if (__error_isset)
    {
        [encoder encodeDouble: __error forKey: @"error"];
    }
    if (__errorWithout_isset)
    {
        [encoder encodeDouble: __errorWithout forKey: @"errorWithout"];
    }
    if (__samples_isset)
    {
        [encoder encodeDouble: __samples forKey: @"samples"];
    }
    if (__samplesWithout_isset)
    {
        [encoder encodeDouble: __samplesWithout forKey: @"samplesWithout"];
    }
}

- (void) dealloc
{
    [__xVals release];
    [__yVals release];
    [super dealloc];
}

- (double) score {
    return __score;
}

- (void) setScore: (double) score {
    __score = score;
    __score_isset = YES;
}

- (BOOL) scoreIsSet {
    return __score_isset;
}

- (void) unsetScore {
    __score_isset = NO;
}

- (NSArray *) xVals {
    return [[__xVals retain] autorelease];
}

- (void) setXVals: (NSArray *) xVals {
    [xVals retain];
    [__xVals release];
    __xVals = xVals;
    __xVals_isset = YES;
}

- (BOOL) xValsIsSet {
    return __xVals_isset;
}

- (void) unsetXVals {
    [__xVals release];
    __xVals = nil;
    __xVals_isset = NO;
}

- (NSArray *) yVals {
    return [[__yVals retain] autorelease];
}

- (void) setYVals: (NSArray *) yVals {
    [yVals retain];
    [__yVals release];
    __yVals = yVals;
    __yVals_isset = YES;
}

- (BOOL) yValsIsSet {
    return __yVals_isset;
}

- (void) unsetYVals {
    [__yVals release];
    __yVals = nil;
    __yVals_isset = NO;
}

- (double) expectedValue {
    return __expectedValue;
}

- (void) setExpectedValue: (double) expectedValue {
    __expectedValue = expectedValue;
    __expectedValue_isset = YES;
}

- (BOOL) expectedValueIsSet {
    return __expectedValue_isset;
}

- (void) unsetExpectedValue {
    __expectedValue_isset = NO;
}

- (double) error {
    return __error;
}

- (void) setError: (double) error {
    __error = error;
    __error_isset = YES;
}

- (BOOL) errorIsSet {
    return __error_isset;
}

- (void) unsetError {
    __error_isset = NO;
}

- (double) errorWithout {
    return __errorWithout;
}

- (void) setErrorWithout: (double) errorWithout {
    __errorWithout = errorWithout;
    __errorWithout_isset = YES;
}

- (BOOL) errorWithoutIsSet {
    return __errorWithout_isset;
}

- (void) unsetErrorWithout {
    __errorWithout_isset = NO;
}

- (double) samples {
    return __samples;
}

- (void) setSamples: (double) samples {
    __samples = samples;
    __samples_isset = YES;
}

- (BOOL) samplesIsSet {
    return __samples_isset;
}

- (void) unsetSamples {
    __samples_isset = NO;
}

- (double) samplesWithout {
    return __samplesWithout;
}

- (void) setSamplesWithout: (double) samplesWithout {
    __samplesWithout = samplesWithout;
    __samplesWithout_isset = YES;
}

- (BOOL) samplesWithoutIsSet {
    return __samplesWithout_isset;
}

- (void) unsetSamplesWithout {
    __samplesWithout_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
    NSString * fieldName;
    int fieldType;
    int fieldID;
    
    [inProtocol readStructBeginReturningName: NULL];
    while (true)
    {
        [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
        if (fieldType == TType_STOP) {
            break;
        }
        switch (fieldID)
        {
            case 1:
                if (fieldType == TType_DOUBLE) {
                    double fieldValue = [inProtocol readDouble];
                    [self setScore: fieldValue];
                } else {
                    [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
                }
                break;
            case 2:
                if (fieldType == TType_LIST) {
                    int _size10;
                    [inProtocol readListBeginReturningElementType: NULL size: &_size10];
                    NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size10];
                    int _i11;
                    for (_i11 = 0; _i11 < _size10; ++_i11)
                    {
                        double _elem12 = [inProtocol readDouble];
                        [fieldValue addObject: [NSNumber numberWithDouble: _elem12]];
                    }
                    [inProtocol readListEnd];
                    [self setXVals: fieldValue];
                    [fieldValue release];
                } else {
                    [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
                }
                break;
            case 3:
                if (fieldType == TType_LIST) {
                    int _size13;
                    [inProtocol readListBeginReturningElementType: NULL size: &_size13];
                    NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size13];
                    int _i14;
                    for (_i14 = 0; _i14 < _size13; ++_i14)
                    {
                        double _elem15 = [inProtocol readDouble];
                        [fieldValue addObject: [NSNumber numberWithDouble: _elem15]];
                    }
                    [inProtocol readListEnd];
                    [self setYVals: fieldValue];
                    [fieldValue release];
                } else {
                    [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
                }
                break;
            case 4:
                if (fieldType == TType_DOUBLE) {
                    double fieldValue = [inProtocol readDouble];
                    [self setExpectedValue: fieldValue];
                } else {
                    [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
                }
                break;
            case 5:
                if (fieldType == TType_DOUBLE) {
                    double fieldValue = [inProtocol readDouble];
                    [self setError: fieldValue];
                } else {
                    [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
                }
                break;
            case 6:
                if (fieldType == TType_DOUBLE) {
                    double fieldValue = [inProtocol readDouble];
                    [self setErrorWithout: fieldValue];
                } else {
                    [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
                }
                break;
            case 7:
                if (fieldType == TType_DOUBLE) {
                    double fieldValue = [inProtocol readDouble];
                    [self setSamples: fieldValue];
                } else {
                    [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
                }
                break;
            case 8:
                if (fieldType == TType_DOUBLE) {
                    double fieldValue = [inProtocol readDouble];
                    [self setSamplesWithout: fieldValue];
                } else {
                    [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
                }
                break;
            default:
                [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
                break;
        }
        [inProtocol readFieldEnd];
    }
    [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
    [outProtocol writeStructBeginWithName: @"DetailScreenReport"];
    if (__score_isset) {
        [outProtocol writeFieldBeginWithName: @"score" type: TType_DOUBLE fieldID: 1];
        [outProtocol writeDouble: __score];
        [outProtocol writeFieldEnd];
    }
    if (__xVals_isset) {
        if (__xVals != nil) {
            [outProtocol writeFieldBeginWithName: @"xVals" type: TType_LIST fieldID: 2];
            {
                [outProtocol writeListBeginWithElementType: TType_DOUBLE size: [__xVals count]];
                int i17;
                for (i17 = 0; i17 < [__xVals count]; i17++)
                {
                    [outProtocol writeDouble: [[__xVals objectAtIndex: i17] doubleValue]];
                }
                [outProtocol writeListEnd];
            }
            [outProtocol writeFieldEnd];
        }
    }
    if (__yVals_isset) {
        if (__yVals != nil) {
            [outProtocol writeFieldBeginWithName: @"yVals" type: TType_LIST fieldID: 3];
            {
                [outProtocol writeListBeginWithElementType: TType_DOUBLE size: [__yVals count]];
                int i19;
                for (i19 = 0; i19 < [__yVals count]; i19++)
                {
                    [outProtocol writeDouble: [[__yVals objectAtIndex: i19] doubleValue]];
                }
                [outProtocol writeListEnd];
            }
            [outProtocol writeFieldEnd];
        }
    }
    if (__expectedValue_isset) {
        [outProtocol writeFieldBeginWithName: @"expectedValue" type: TType_DOUBLE fieldID: 4];
        [outProtocol writeDouble: __expectedValue];
        [outProtocol writeFieldEnd];
    }
    if (__error_isset) {
        [outProtocol writeFieldBeginWithName: @"error" type: TType_DOUBLE fieldID: 5];
        [outProtocol writeDouble: __error];
        [outProtocol writeFieldEnd];
    }
    if (__errorWithout_isset) {
        [outProtocol writeFieldBeginWithName: @"errorWithout" type: TType_DOUBLE fieldID: 6];
        [outProtocol writeDouble: __errorWithout];
        [outProtocol writeFieldEnd];
    }
    if (__samples_isset) {
        [outProtocol writeFieldBeginWithName: @"samples" type: TType_DOUBLE fieldID: 7];
        [outProtocol writeDouble: __samples];
        [outProtocol writeFieldEnd];
    }
    if (__samplesWithout_isset) {
        [outProtocol writeFieldBeginWithName: @"samplesWithout" type: TType_DOUBLE fieldID: 8];
        [outProtocol writeDouble: __samplesWithout];
        [outProtocol writeFieldEnd];
    }
    [outProtocol writeFieldStop];
    [outProtocol writeStructEnd];
}

- (NSString *) description {
    NSMutableString * ms = [NSMutableString stringWithString: @"DetailScreenReport("];
    [ms appendString: @"score:"];
    [ms appendFormat: @"%f", __score];
    [ms appendString: @",xVals:"];
    [ms appendFormat: @"%@", __xVals];
    [ms appendString: @",yVals:"];
    [ms appendFormat: @"%@", __yVals];
    [ms appendString: @",expectedValue:"];
    [ms appendFormat: @"%f", __expectedValue];
    [ms appendString: @",error:"];
    [ms appendFormat: @"%f", __error];
    [ms appendString: @",errorWithout:"];
    [ms appendFormat: @"%f", __errorWithout];
    [ms appendString: @",samples:"];
    [ms appendFormat: @"%f", __samples];
    [ms appendString: @",samplesWithout:"];
    [ms appendFormat: @"%f", __samplesWithout];
    [ms appendString: @")"];
    return [NSString stringWithString: ms];
}

@end

@implementation Reports

- (id) initWithJScore: (double) jScore os: (DetailScreenReport *) os osWithout: (DetailScreenReport *) osWithout model: (DetailScreenReport *) model modelWithout: (DetailScreenReport *) modelWithout similarApps: (DetailScreenReport *) similarApps similarAppsWithout: (DetailScreenReport *) similarAppsWithout changeSinceLastWeek: (double) changeSinceLastWeek changeSinceLastWeekPercentage: (double) changeSinceLastWeekPercentage jScoreWith: (DetailScreenReport *) jScoreWith jScoreWithout: (DetailScreenReport *) jScoreWithout
{
    self = [super init];
    __jScore = jScore;
    __jScore_isset = YES;
    __os = [os retain];
    __os_isset = YES;
    __osWithout = [osWithout retain];
    __osWithout_isset = YES;
    __model = [model retain];
    __model_isset = YES;
    __modelWithout = [modelWithout retain];
    __modelWithout_isset = YES;
    __similarApps = [similarApps retain];
    __similarApps_isset = YES;
    __similarAppsWithout = [similarAppsWithout retain];
    __similarAppsWithout_isset = YES;
    __changeSinceLastWeek = changeSinceLastWeek;
    __changeSinceLastWeek_isset = YES;
    __changeSinceLastWeekPercentage = changeSinceLastWeekPercentage;
    __changeSinceLastWeekPercentage_isset = YES;
    __jScoreWith = [jScoreWith retain];
    __jScoreWith_isset = YES;
    __jScoreWithout = [jScoreWithout retain];
    __jScoreWithout_isset = YES;
    return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
    self = [super init];
    if ([decoder containsValueForKey: @"jScore"])
    {
        __jScore = [decoder decodeDoubleForKey: @"jScore"];
        __jScore_isset = YES;
    }
    if ([decoder containsValueForKey: @"os"])
    {
        __os = [[decoder decodeObjectForKey: @"os"] retain];
        __os_isset = YES;
    }
    if ([decoder containsValueForKey: @"osWithout"])
    {
        __osWithout = [[decoder decodeObjectForKey: @"osWithout"] retain];
        __osWithout_isset = YES;
    }
    if ([decoder containsValueForKey: @"model"])
    {
        __model = [[decoder decodeObjectForKey: @"model"] retain];
        __model_isset = YES;
    }
    if ([decoder containsValueForKey: @"modelWithout"])
    {
        __modelWithout = [[decoder decodeObjectForKey: @"modelWithout"] retain];
        __modelWithout_isset = YES;
    }
    if ([decoder containsValueForKey: @"similarApps"])
    {
        __similarApps = [[decoder decodeObjectForKey: @"similarApps"] retain];
        __similarApps_isset = YES;
    }
    if ([decoder containsValueForKey: @"similarAppsWithout"])
    {
        __similarAppsWithout = [[decoder decodeObjectForKey: @"similarAppsWithout"] retain];
        __similarAppsWithout_isset = YES;
    }
    if ([decoder containsValueForKey: @"changeSinceLastWeek"])
    {
        __changeSinceLastWeek = [decoder decodeDoubleForKey: @"changeSinceLastWeek"];
        __changeSinceLastWeek_isset = YES;
    }
    if ([decoder containsValueForKey: @"changeSinceLastWeekPercentage"])
    {
        __changeSinceLastWeekPercentage = [decoder decodeDoubleForKey: @"changeSinceLastWeekPercentage"];
        __changeSinceLastWeekPercentage_isset = YES;
    }
    if ([decoder containsValueForKey: @"jScoreWith"])
    {
        __jScoreWith = [[decoder decodeObjectForKey: @"jScoreWith"] retain];
        __jScoreWith_isset = YES;
    }
    if ([decoder containsValueForKey: @"jScoreWithout"])
    {
        __jScoreWithout = [[decoder decodeObjectForKey: @"jScoreWithout"] retain];
        __jScoreWithout_isset = YES;
    }
    return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
    if (__jScore_isset)
    {
        [encoder encodeDouble: __jScore forKey: @"jScore"];
    }
    if (__os_isset)
    {
        [encoder encodeObject: __os forKey: @"os"];
    }
    if (__osWithout_isset)
    {
        [encoder encodeObject: __osWithout forKey: @"osWithout"];
    }
    if (__model_isset)
    {
        [encoder encodeObject: __model forKey: @"model"];
    }
    if (__modelWithout_isset)
    {
        [encoder encodeObject: __modelWithout forKey: @"modelWithout"];
    }
    if (__similarApps_isset)
    {
        [encoder encodeObject: __similarApps forKey: @"similarApps"];
    }
    if (__similarAppsWithout_isset)
    {
        [encoder encodeObject: __similarAppsWithout forKey: @"similarAppsWithout"];
    }
    if (__changeSinceLastWeek_isset)
    {
        [encoder encodeDouble: __changeSinceLastWeek forKey: @"changeSinceLastWeek"];
    }
    if (__changeSinceLastWeekPercentage_isset)
    {
        [encoder encodeDouble: __changeSinceLastWeekPercentage forKey: @"changeSinceLastWeekPercentage"];
    }
    if (__jScoreWith_isset)
    {
        [encoder encodeObject: __jScoreWith forKey: @"jScoreWith"];
    }
    if (__jScoreWithout_isset)
    {
        [encoder encodeObject: __jScoreWithout forKey: @"jScoreWithout"];
    }
}

- (void) dealloc
{
    [__os release];
    [__osWithout release];
    [__model release];
    [__modelWithout release];
    [__similarApps release];
    [__similarAppsWithout release];
    [__jScoreWith release];
    [__jScoreWithout release];
    [super dealloc];
}

- (double) jScore {
    return __jScore;
}

- (void) setJScore: (double) jScore {
    __jScore = jScore;
    __jScore_isset = YES;
}

- (BOOL) jScoreIsSet {
    return __jScore_isset;
}

- (void) unsetJScore {
    __jScore_isset = NO;
}

- (DetailScreenReport *) os {
    return [[__os retain] autorelease];
}

- (void) setOs: (DetailScreenReport *) os {
    [os retain];
    [__os release];
    __os = os;
    __os_isset = YES;
}

- (BOOL) osIsSet {
    return __os_isset;
}

- (void) unsetOs {
    [__os release];
    __os = nil;
    __os_isset = NO;
}

- (DetailScreenReport *) osWithout {
    return [[__osWithout retain] autorelease];
}

- (void) setOsWithout: (DetailScreenReport *) osWithout {
    [osWithout retain];
    [__osWithout release];
    __osWithout = osWithout;
    __osWithout_isset = YES;
}

- (BOOL) osWithoutIsSet {
    return __osWithout_isset;
}

- (void) unsetOsWithout {
    [__osWithout release];
    __osWithout = nil;
    __osWithout_isset = NO;
}

- (DetailScreenReport *) model {
    return [[__model retain] autorelease];
}

- (void) setModel: (DetailScreenReport *) model {
    [model retain];
    [__model release];
    __model = model;
    __model_isset = YES;
}

- (BOOL) modelIsSet {
    return __model_isset;
}

- (void) unsetModel {
    [__model release];
    __model = nil;
    __model_isset = NO;
}

- (DetailScreenReport *) modelWithout {
    return [[__modelWithout retain] autorelease];
}

- (void) setModelWithout: (DetailScreenReport *) modelWithout {
    [modelWithout retain];
    [__modelWithout release];
    __modelWithout = modelWithout;
    __modelWithout_isset = YES;
}

- (BOOL) modelWithoutIsSet {
    return __modelWithout_isset;
}

- (void) unsetModelWithout {
    [__modelWithout release];
    __modelWithout = nil;
    __modelWithout_isset = NO;
}

- (DetailScreenReport *) similarApps {
    return [[__similarApps retain] autorelease];
}

- (void) setSimilarApps: (DetailScreenReport *) similarApps {
    [similarApps retain];
    [__similarApps release];
    __similarApps = similarApps;
    __similarApps_isset = YES;
}

- (BOOL) similarAppsIsSet {
    return __similarApps_isset;
}

- (void) unsetSimilarApps {
    [__similarApps release];
    __similarApps = nil;
    __similarApps_isset = NO;
}

- (DetailScreenReport *) similarAppsWithout {
    return [[__similarAppsWithout retain] autorelease];
}

- (void) setSimilarAppsWithout: (DetailScreenReport *) similarAppsWithout {
    [similarAppsWithout retain];
    [__similarAppsWithout release];
    __similarAppsWithout = similarAppsWithout;
    __similarAppsWithout_isset = YES;
}

- (BOOL) similarAppsWithoutIsSet {
    return __similarAppsWithout_isset;
}

- (void) unsetSimilarAppsWithout {
    [__similarAppsWithout release];
    __similarAppsWithout = nil;
    __similarAppsWithout_isset = NO;
}

- (double) changeSinceLastWeek {
    return __changeSinceLastWeek;
}

- (void) setChangeSinceLastWeek: (double) changeSinceLastWeek {
    __changeSinceLastWeek = changeSinceLastWeek;
    __changeSinceLastWeek_isset = YES;
}

- (BOOL) changeSinceLastWeekIsSet {
    return __changeSinceLastWeek_isset;
}

- (void) unsetChangeSinceLastWeek {
    __changeSinceLastWeek_isset = NO;
}

- (double) changeSinceLastWeekPercentage {
    return __changeSinceLastWeekPercentage;
}

- (void) setChangeSinceLastWeekPercentage: (double) changeSinceLastWeekPercentage {
    __changeSinceLastWeekPercentage = changeSinceLastWeekPercentage;
    __changeSinceLastWeekPercentage_isset = YES;
}

- (BOOL) changeSinceLastWeekPercentageIsSet {
    return __changeSinceLastWeekPercentage_isset;
}

- (void) unsetChangeSinceLastWeekPercentage {
    __changeSinceLastWeekPercentage_isset = NO;
}

- (DetailScreenReport *) jScoreWith {
    return [[__jScoreWith retain] autorelease];
}

- (void) setJScoreWith: (DetailScreenReport *) jScoreWith {
    [jScoreWith retain];
    [__jScoreWith release];
    __jScoreWith = jScoreWith;
    __jScoreWith_isset = YES;
}

- (BOOL) jScoreWithIsSet {
    return __jScoreWith_isset;
}

- (void) unsetJScoreWith {
    [__jScoreWith release];
    __jScoreWith = nil;
    __jScoreWith_isset = NO;
}

- (DetailScreenReport *) jScoreWithout {
    return [[__jScoreWithout retain] autorelease];
}

- (void) setJScoreWithout: (DetailScreenReport *) jScoreWithout {
    [jScoreWithout retain];
    [__jScoreWithout release];
    __jScoreWithout = jScoreWithout;
    __jScoreWithout_isset = YES;
}

- (BOOL) jScoreWithoutIsSet {
    return __jScoreWithout_isset;
}

- (void) unsetJScoreWithout {
    [__jScoreWithout release];
    __jScoreWithout = nil;
    __jScoreWithout_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
    NSString * fieldName;
    int fieldType;
    int fieldID;
    
    [inProtocol readStructBeginReturningName: NULL];
    while (true)
    {
        [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
        if (fieldType == TType_STOP) {
            break;
        }
        switch (fieldID)
        {
            case 1:
                if (fieldType == TType_DOUBLE) {
                    double fieldValue = [inProtocol readDouble];
                    [self setJScore: fieldValue];
                } else {
                    [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
                }
                break;
            case 2:
                if (fieldType == TType_STRUCT) {
                    DetailScreenReport *fieldValue = [[DetailScreenReport alloc] init];
                    [fieldValue read: inProtocol];
                    [self setOs: fieldValue];
                    [fieldValue release];
                } else {
                    [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
                }
                break;
            case 3:
                if (fieldType == TType_STRUCT) {
                    DetailScreenReport *fieldValue = [[DetailScreenReport alloc] init];
                    [fieldValue read: inProtocol];
                    [self setOsWithout: fieldValue];
                    [fieldValue release];
                } else {
                    [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
                }
                break;
            case 4:
                if (fieldType == TType_STRUCT) {
                    DetailScreenReport *fieldValue = [[DetailScreenReport alloc] init];
                    [fieldValue read: inProtocol];
                    [self setModel: fieldValue];
                    [fieldValue release];
                } else {
                    [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
                }
                break;
            case 5:
                if (fieldType == TType_STRUCT) {
                    DetailScreenReport *fieldValue = [[DetailScreenReport alloc] init];
                    [fieldValue read: inProtocol];
                    [self setModelWithout: fieldValue];
                    [fieldValue release];
                } else {
                    [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
                }
                break;
            case 6:
                if (fieldType == TType_STRUCT) {
                    DetailScreenReport *fieldValue = [[DetailScreenReport alloc] init];
                    [fieldValue read: inProtocol];
                    [self setSimilarApps: fieldValue];
                    [fieldValue release];
                } else {
                    [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
                }
                break;
            case 7:
                if (fieldType == TType_STRUCT) {
                    DetailScreenReport *fieldValue = [[DetailScreenReport alloc] init];
                    [fieldValue read: inProtocol];
                    [self setSimilarAppsWithout: fieldValue];
                    [fieldValue release];
                } else {
                    [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
                }
                break;
            case 8:
                if (fieldType == TType_DOUBLE) {
                    double fieldValue = [inProtocol readDouble];
                    [self setChangeSinceLastWeek: fieldValue];
                } else {
                    [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
                }
                break;
            case 9:
                if (fieldType == TType_DOUBLE) {
                    double fieldValue = [inProtocol readDouble];
                    [self setChangeSinceLastWeekPercentage: fieldValue];
                } else {
                    [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
                }
                break;
            case 10:
                if (fieldType == TType_STRUCT) {
                    DetailScreenReport *fieldValue = [[DetailScreenReport alloc] init];
                    [fieldValue read: inProtocol];
                    [self setJScoreWith: fieldValue];
                    [fieldValue release];
                } else {
                    [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
                }
                break;
            case 11:
                if (fieldType == TType_STRUCT) {
                    DetailScreenReport *fieldValue = [[DetailScreenReport alloc] init];
                    [fieldValue read: inProtocol];
                    [self setJScoreWithout: fieldValue];
                    [fieldValue release];
                } else {
                    [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
                }
                break;
            default:
                [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
                break;
        }
        [inProtocol readFieldEnd];
    }
    [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
    [outProtocol writeStructBeginWithName: @"Reports"];
    if (__jScore_isset) {
        [outProtocol writeFieldBeginWithName: @"jScore" type: TType_DOUBLE fieldID: 1];
        [outProtocol writeDouble: __jScore];
        [outProtocol writeFieldEnd];
    }
    if (__os_isset) {
        if (__os != nil) {
            [outProtocol writeFieldBeginWithName: @"os" type: TType_STRUCT fieldID: 2];
            [__os write: outProtocol];
            [outProtocol writeFieldEnd];
        }
    }
    if (__osWithout_isset) {
        if (__osWithout != nil) {
            [outProtocol writeFieldBeginWithName: @"osWithout" type: TType_STRUCT fieldID: 3];
            [__osWithout write: outProtocol];
            [outProtocol writeFieldEnd];
        }
    }
    if (__model_isset) {
        if (__model != nil) {
            [outProtocol writeFieldBeginWithName: @"model" type: TType_STRUCT fieldID: 4];
            [__model write: outProtocol];
            [outProtocol writeFieldEnd];
        }
    }
    if (__modelWithout_isset) {
        if (__modelWithout != nil) {
            [outProtocol writeFieldBeginWithName: @"modelWithout" type: TType_STRUCT fieldID: 5];
            [__modelWithout write: outProtocol];
            [outProtocol writeFieldEnd];
        }
    }
    if (__similarApps_isset) {
        if (__similarApps != nil) {
            [outProtocol writeFieldBeginWithName: @"similarApps" type: TType_STRUCT fieldID: 6];
            [__similarApps write: outProtocol];
            [outProtocol writeFieldEnd];
        }
    }
    if (__similarAppsWithout_isset) {
        if (__similarAppsWithout != nil) {
            [outProtocol writeFieldBeginWithName: @"similarAppsWithout" type: TType_STRUCT fieldID: 7];
            [__similarAppsWithout write: outProtocol];
            [outProtocol writeFieldEnd];
        }
    }
    if (__changeSinceLastWeek_isset) {
        [outProtocol writeFieldBeginWithName: @"changeSinceLastWeek" type: TType_DOUBLE fieldID: 8];
        [outProtocol writeDouble: __changeSinceLastWeek];
        [outProtocol writeFieldEnd];
    }
    if (__changeSinceLastWeekPercentage_isset) {
        [outProtocol writeFieldBeginWithName: @"changeSinceLastWeekPercentage" type: TType_DOUBLE fieldID: 9];
        [outProtocol writeDouble: __changeSinceLastWeekPercentage];
        [outProtocol writeFieldEnd];
    }
    if (__jScoreWith_isset) {
        if (__jScoreWith != nil) {
            [outProtocol writeFieldBeginWithName: @"jScoreWith" type: TType_STRUCT fieldID: 10];
            [__jScoreWith write: outProtocol];
            [outProtocol writeFieldEnd];
        }
    }
    if (__jScoreWithout_isset) {
        if (__jScoreWithout != nil) {
            [outProtocol writeFieldBeginWithName: @"jScoreWithout" type: TType_STRUCT fieldID: 11];
            [__jScoreWithout write: outProtocol];
            [outProtocol writeFieldEnd];
        }
    }
    [outProtocol writeFieldStop];
    [outProtocol writeStructEnd];
}

- (NSString *) description {
    NSMutableString * ms = [NSMutableString stringWithString: @"Reports("];
    [ms appendString: @"jScore:"];
    [ms appendFormat: @"%f", __jScore];
    [ms appendString: @",os:"];
    [ms appendFormat: @"%@", __os];
    [ms appendString: @",osWithout:"];
    [ms appendFormat: @"%@", __osWithout];
    [ms appendString: @",model:"];
    [ms appendFormat: @"%@", __model];
    [ms appendString: @",modelWithout:"];
    [ms appendFormat: @"%@", __modelWithout];
    [ms appendString: @",similarApps:"];
    [ms appendFormat: @"%@", __similarApps];
    [ms appendString: @",similarAppsWithout:"];
    [ms appendFormat: @"%@", __similarAppsWithout];
    [ms appendString: @",changeSinceLastWeek:"];
    [ms appendFormat: @"%f", __changeSinceLastWeek];
    [ms appendString: @",changeSinceLastWeekPercentage:"];
    [ms appendFormat: @"%f", __changeSinceLastWeekPercentage];
    [ms appendString: @",jScoreWith:"];
    [ms appendFormat: @"%@", __jScoreWith];
    [ms appendString: @",jScoreWithout:"];
    [ms appendFormat: @"%@", __jScoreWithout];
    [ms appendString: @")"];
    return [NSString stringWithString: ms];
}

@end

@implementation HogsBugs

- (id) initWithAppName: (NSString *) appName wDistance: (double) wDistance xVals: (NSArray *) xVals yVals: (NSArray *) yVals xValsWithout: (NSArray *) xValsWithout yValsWithout: (NSArray *) yValsWithout expectedValue: (double) expectedValue expectedValueWithout: (double) expectedValueWithout error: (double) error errorWithout: (double) errorWithout samples: (double) samples samplesWithout: (double) samplesWithout appLabel: (NSString *) appLabel appPriority: (NSString *) appPriority
{
    self = [super init];
    __appName = [appName retain];
    __appName_isset = YES;
    __wDistance = wDistance;
    __wDistance_isset = YES;
    __xVals = [xVals retain];
    __xVals_isset = YES;
    __yVals = [yVals retain];
    __yVals_isset = YES;
    __xValsWithout = [xValsWithout retain];
    __xValsWithout_isset = YES;
    __yValsWithout = [yValsWithout retain];
    __yValsWithout_isset = YES;
    __expectedValue = expectedValue;
    __expectedValue_isset = YES;
    __expectedValueWithout = expectedValueWithout;
    __expectedValueWithout_isset = YES;
    __error = error;
    __error_isset = YES;
    __errorWithout = errorWithout;
    __errorWithout_isset = YES;
    __samples = samples;
    __samples_isset = YES;
    __samplesWithout = samplesWithout;
    __samplesWithout_isset = YES;
    __appLabel = [appLabel retain];
    __appLabel_isset = YES;
    __appPriority = [appPriority retain];
    __appPriority_isset = YES;
    return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
    self = [super init];
    if ([decoder containsValueForKey: @"appName"])
    {
        __appName = [[decoder decodeObjectForKey: @"appName"] retain];
        __appName_isset = YES;
    }
    if ([decoder containsValueForKey: @"wDistance"])
    {
        __wDistance = [decoder decodeDoubleForKey: @"wDistance"];
        __wDistance_isset = YES;
    }
    if ([decoder containsValueForKey: @"xVals"])
    {
        __xVals = [[decoder decodeObjectForKey: @"xVals"] retain];
        __xVals_isset = YES;
    }
    if ([decoder containsValueForKey: @"yVals"])
    {
        __yVals = [[decoder decodeObjectForKey: @"yVals"] retain];
        __yVals_isset = YES;
    }
    if ([decoder containsValueForKey: @"xValsWithout"])
    {
        __xValsWithout = [[decoder decodeObjectForKey: @"xValsWithout"] retain];
        __xValsWithout_isset = YES;
    }
    if ([decoder containsValueForKey: @"yValsWithout"])
    {
        __yValsWithout = [[decoder decodeObjectForKey: @"yValsWithout"] retain];
        __yValsWithout_isset = YES;
    }
    if ([decoder containsValueForKey: @"expectedValue"])
    {
        __expectedValue = [decoder decodeDoubleForKey: @"expectedValue"];
        __expectedValue_isset = YES;
    }
    if ([decoder containsValueForKey: @"expectedValueWithout"])
    {
        __expectedValueWithout = [decoder decodeDoubleForKey: @"expectedValueWithout"];
        __expectedValueWithout_isset = YES;
    }
    if ([decoder containsValueForKey: @"error"])
    {
        __error = [decoder decodeDoubleForKey: @"error"];
        __error_isset = YES;
    }
    if ([decoder containsValueForKey: @"errorWithout"])
    {
        __errorWithout = [decoder decodeDoubleForKey: @"errorWithout"];
        __errorWithout_isset = YES;
    }
    if ([decoder containsValueForKey: @"samples"])
    {
        __samples = [decoder decodeDoubleForKey: @"samples"];
        __samples_isset = YES;
    }
    if ([decoder containsValueForKey: @"samplesWithout"])
    {
        __samplesWithout = [decoder decodeDoubleForKey: @"samplesWithout"];
        __samplesWithout_isset = YES;
    }
    if ([decoder containsValueForKey: @"appLabel"])
    {
        __appLabel = [[decoder decodeObjectForKey: @"appLabel"] retain];
        __appLabel_isset = YES;
    }
    if ([decoder containsValueForKey: @"appPriority"])
    {
        __appPriority = [[decoder decodeObjectForKey: @"appPriority"] retain];
        __appPriority_isset = YES;
    }
    return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
    if (__appName_isset)
    {
        [encoder encodeObject: __appName forKey: @"appName"];
    }
    if (__wDistance_isset)
    {
        [encoder encodeDouble: __wDistance forKey: @"wDistance"];
    }
    if (__xVals_isset)
    {
        [encoder encodeObject: __xVals forKey: @"xVals"];
    }
    if (__yVals_isset)
    {
        [encoder encodeObject: __yVals forKey: @"yVals"];
    }
    if (__xValsWithout_isset)
    {
        [encoder encodeObject: __xValsWithout forKey: @"xValsWithout"];
    }
    if (__yValsWithout_isset)
    {
        [encoder encodeObject: __yValsWithout forKey: @"yValsWithout"];
    }
    if (__expectedValue_isset)
    {
        [encoder encodeDouble: __expectedValue forKey: @"expectedValue"];
    }
    if (__expectedValueWithout_isset)
    {
        [encoder encodeDouble: __expectedValueWithout forKey: @"expectedValueWithout"];
    }
    if (__error_isset)
    {
        [encoder encodeDouble: __error forKey: @"error"];
    }
    if (__errorWithout_isset)
    {
        [encoder encodeDouble: __errorWithout forKey: @"errorWithout"];
    }
    if (__samples_isset)
    {
        [encoder encodeDouble: __samples forKey: @"samples"];
    }
    if (__samplesWithout_isset)
    {
        [encoder encodeDouble: __samplesWithout forKey: @"samplesWithout"];
    }
    if (__appLabel_isset)
    {
        [encoder encodeObject: __appLabel forKey: @"appLabel"];
    }
    if (__appPriority_isset)
    {
        [encoder encodeObject: __appPriority forKey: @"appPriority"];
    }
}

- (void) dealloc
{
    [__appName release];
    [__xVals release];
    [__yVals release];
    [__xValsWithout release];
    [__yValsWithout release];
    [__appLabel release];
    [__appPriority release];
    [super dealloc];
}

- (NSString *) appName {
    return [[__appName retain] autorelease];
}

- (void) setAppName: (NSString *) appName {
    [appName retain];
    [__appName release];
    __appName = appName;
    __appName_isset = YES;
}

- (BOOL) appNameIsSet {
    return __appName_isset;
}

- (void) unsetAppName {
    [__appName release];
    __appName = nil;
    __appName_isset = NO;
}

- (double) wDistance {
    return __wDistance;
}

- (void) setWDistance: (double) wDistance {
    __wDistance = wDistance;
    __wDistance_isset = YES;
}

- (BOOL) wDistanceIsSet {
    return __wDistance_isset;
}

- (void) unsetWDistance {
    __wDistance_isset = NO;
}

- (NSArray *) xVals {
    return [[__xVals retain] autorelease];
}

- (void) setXVals: (NSArray *) xVals {
    [xVals retain];
    [__xVals release];
    __xVals = xVals;
    __xVals_isset = YES;
}

- (BOOL) xValsIsSet {
    return __xVals_isset;
}

- (void) unsetXVals {
    [__xVals release];
    __xVals = nil;
    __xVals_isset = NO;
}

- (NSArray *) yVals {
    return [[__yVals retain] autorelease];
}

- (void) setYVals: (NSArray *) yVals {
    [yVals retain];
    [__yVals release];
    __yVals = yVals;
    __yVals_isset = YES;
}

- (BOOL) yValsIsSet {
    return __yVals_isset;
}

- (void) unsetYVals {
    [__yVals release];
    __yVals = nil;
    __yVals_isset = NO;
}

- (NSArray *) xValsWithout {
    return [[__xValsWithout retain] autorelease];
}

- (void) setXValsWithout: (NSArray *) xValsWithout {
    [xValsWithout retain];
    [__xValsWithout release];
    __xValsWithout = xValsWithout;
    __xValsWithout_isset = YES;
}

- (BOOL) xValsWithoutIsSet {
    return __xValsWithout_isset;
}

- (void) unsetXValsWithout {
    [__xValsWithout release];
    __xValsWithout = nil;
    __xValsWithout_isset = NO;
}

- (NSArray *) yValsWithout {
    return [[__yValsWithout retain] autorelease];
}

- (void) setYValsWithout: (NSArray *) yValsWithout {
    [yValsWithout retain];
    [__yValsWithout release];
    __yValsWithout = yValsWithout;
    __yValsWithout_isset = YES;
}

- (BOOL) yValsWithoutIsSet {
    return __yValsWithout_isset;
}

- (void) unsetYValsWithout {
    [__yValsWithout release];
    __yValsWithout = nil;
    __yValsWithout_isset = NO;
}

- (double) expectedValue {
    return __expectedValue;
}

- (void) setExpectedValue: (double) expectedValue {
    __expectedValue = expectedValue;
    __expectedValue_isset = YES;
}

- (BOOL) expectedValueIsSet {
    return __expectedValue_isset;
}

- (void) unsetExpectedValue {
    __expectedValue_isset = NO;
}

- (double) expectedValueWithout {
    return __expectedValueWithout;
}

- (void) setExpectedValueWithout: (double) expectedValueWithout {
    __expectedValueWithout = expectedValueWithout;
    __expectedValueWithout_isset = YES;
}

- (BOOL) expectedValueWithoutIsSet {
    return __expectedValueWithout_isset;
}

- (void) unsetExpectedValueWithout {
    __expectedValueWithout_isset = NO;
}

- (double) error {
    return __error;
}

- (void) setError: (double) error {
    __error = error;
    __error_isset = YES;
}

- (BOOL) errorIsSet {
    return __error_isset;
}

- (void) unsetError {
    __error_isset = NO;
}

- (double) errorWithout {
    return __errorWithout;
}

- (void) setErrorWithout: (double) errorWithout {
    __errorWithout = errorWithout;
    __errorWithout_isset = YES;
}

- (BOOL) errorWithoutIsSet {
    return __errorWithout_isset;
}

- (void) unsetErrorWithout {
    __errorWithout_isset = NO;
}

- (double) samples {
    return __samples;
}

- (void) setSamples: (double) samples {
    __samples = samples;
    __samples_isset = YES;
}

- (BOOL) samplesIsSet {
    return __samples_isset;
}

- (void) unsetSamples {
    __samples_isset = NO;
}

- (double) samplesWithout {
    return __samplesWithout;
}

- (void) setSamplesWithout: (double) samplesWithout {
    __samplesWithout = samplesWithout;
    __samplesWithout_isset = YES;
}

- (BOOL) samplesWithoutIsSet {
    return __samplesWithout_isset;
}

- (void) unsetSamplesWithout {
    __samplesWithout_isset = NO;
}

- (NSString *) appLabel {
    return [[__appLabel retain] autorelease];
}

- (void) setAppLabel: (NSString *) appLabel {
    [appLabel retain];
    [__appLabel release];
    __appLabel = appLabel;
    __appLabel_isset = YES;
}

- (BOOL) appLabelIsSet {
    return __appLabel_isset;
}

- (void) unsetAppLabel {
    [__appLabel release];
    __appLabel = nil;
    __appLabel_isset = NO;
}

- (NSString *) appPriority {
    return [[__appPriority retain] autorelease];
}

- (void) setAppPriority: (NSString *) appPriority {
    [appPriority retain];
    [__appPriority release];
    __appPriority = appPriority;
    __appPriority_isset = YES;
}

- (BOOL) appPriorityIsSet {
    return __appPriority_isset;
}

- (void) unsetAppPriority {
    [__appPriority release];
    __appPriority = nil;
    __appPriority_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
    NSString * fieldName;
    int fieldType;
    int fieldID;
    
    [inProtocol readStructBeginReturningName: NULL];
    while (true)
    {
        [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
        if (fieldType == TType_STOP) {
            break;
        }
        switch (fieldID)
        {
            case 1:
                if (fieldType == TType_STRING) {
                    NSString * fieldValue = [inProtocol readString];
                    [self setAppName: fieldValue];
                } else {
                    [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
                }
                break;
            case 2:
                if (fieldType == TType_DOUBLE) {
                    double fieldValue = [inProtocol readDouble];
                    [self setWDistance: fieldValue];
                } else {
                    [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
                }
                break;
            case 3:
                if (fieldType == TType_LIST) {
                    int _size20;
                    [inProtocol readListBeginReturningElementType: NULL size: &_size20];
                    NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size20];
                    int _i21;
                    for (_i21 = 0; _i21 < _size20; ++_i21)
                    {
                        double _elem22 = [inProtocol readDouble];
                        [fieldValue addObject: [NSNumber numberWithDouble: _elem22]];
                    }
                    [inProtocol readListEnd];
                    [self setXVals: fieldValue];
                    [fieldValue release];
                } else {
                    [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
                }
                break;
            case 4:
                if (fieldType == TType_LIST) {
                    int _size23;
                    [inProtocol readListBeginReturningElementType: NULL size: &_size23];
                    NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size23];
                    int _i24;
                    for (_i24 = 0; _i24 < _size23; ++_i24)
                    {
                        double _elem25 = [inProtocol readDouble];
                        [fieldValue addObject: [NSNumber numberWithDouble: _elem25]];
                    }
                    [inProtocol readListEnd];
                    [self setYVals: fieldValue];
                    [fieldValue release];
                } else {
                    [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
                }
                break;
            case 5:
                if (fieldType == TType_LIST) {
                    int _size26;
                    [inProtocol readListBeginReturningElementType: NULL size: &_size26];
                    NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size26];
                    int _i27;
                    for (_i27 = 0; _i27 < _size26; ++_i27)
                    {
                        double _elem28 = [inProtocol readDouble];
                        [fieldValue addObject: [NSNumber numberWithDouble: _elem28]];
                    }
                    [inProtocol readListEnd];
                    [self setXValsWithout: fieldValue];
                    [fieldValue release];
                } else {
                    [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
                }
                break;
            case 6:
                if (fieldType == TType_LIST) {
                    int _size29;
                    [inProtocol readListBeginReturningElementType: NULL size: &_size29];
                    NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size29];
                    int _i30;
                    for (_i30 = 0; _i30 < _size29; ++_i30)
                    {
                        double _elem31 = [inProtocol readDouble];
                        [fieldValue addObject: [NSNumber numberWithDouble: _elem31]];
                    }
                    [inProtocol readListEnd];
                    [self setYValsWithout: fieldValue];
                    [fieldValue release];
                } else {
                    [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
                }
                break;
            case 7:
                if (fieldType == TType_DOUBLE) {
                    double fieldValue = [inProtocol readDouble];
                    [self setExpectedValue: fieldValue];
                } else {
                    [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
                }
                break;
            case 8:
                if (fieldType == TType_DOUBLE) {
                    double fieldValue = [inProtocol readDouble];
                    [self setExpectedValueWithout: fieldValue];
                } else {
                    [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
                }
                break;
            case 9:
                if (fieldType == TType_DOUBLE) {
                    double fieldValue = [inProtocol readDouble];
                    [self setError: fieldValue];
                } else {
                    [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
                }
                break;
            case 10:
                if (fieldType == TType_DOUBLE) {
                    double fieldValue = [inProtocol readDouble];
                    [self setErrorWithout: fieldValue];
                } else {
                    [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
                }
                break;
            case 11:
                if (fieldType == TType_DOUBLE) {
                    double fieldValue = [inProtocol readDouble];
                    [self setSamples: fieldValue];
                } else {
                    [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
                }
                break;
            case 12:
                if (fieldType == TType_DOUBLE) {
                    double fieldValue = [inProtocol readDouble];
                    [self setSamplesWithout: fieldValue];
                } else {
                    [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
                }
                break;
            case 13:
                if (fieldType == TType_STRING) {
                    NSString * fieldValue = [inProtocol readString];
                    [self setAppLabel: fieldValue];
                } else {
                    [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
                }
                break;
            case 14:
                if (fieldType == TType_STRING) {
                    NSString * fieldValue = [inProtocol readString];
                    [self setAppPriority: fieldValue];
                } else {
                    [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
                }
                break;
            default:
                [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
                break;
        }
        [inProtocol readFieldEnd];
    }
    [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
    [outProtocol writeStructBeginWithName: @"HogsBugs"];
    if (__appName_isset) {
        if (__appName != nil) {
            [outProtocol writeFieldBeginWithName: @"appName" type: TType_STRING fieldID: 1];
            [outProtocol writeString: __appName];
            [outProtocol writeFieldEnd];
        }
    }
    if (__wDistance_isset) {
        [outProtocol writeFieldBeginWithName: @"wDistance" type: TType_DOUBLE fieldID: 2];
        [outProtocol writeDouble: __wDistance];
        [outProtocol writeFieldEnd];
    }
    if (__xVals_isset) {
        if (__xVals != nil) {
            [outProtocol writeFieldBeginWithName: @"xVals" type: TType_LIST fieldID: 3];
            {
                [outProtocol writeListBeginWithElementType: TType_DOUBLE size: [__xVals count]];
                int i33;
                for (i33 = 0; i33 < [__xVals count]; i33++)
                {
                    [outProtocol writeDouble: [[__xVals objectAtIndex: i33] doubleValue]];
                }
                [outProtocol writeListEnd];
            }
            [outProtocol writeFieldEnd];
        }
    }
    if (__yVals_isset) {
        if (__yVals != nil) {
            [outProtocol writeFieldBeginWithName: @"yVals" type: TType_LIST fieldID: 4];
            {
                [outProtocol writeListBeginWithElementType: TType_DOUBLE size: [__yVals count]];
                int i35;
                for (i35 = 0; i35 < [__yVals count]; i35++)
                {
                    [outProtocol writeDouble: [[__yVals objectAtIndex: i35] doubleValue]];
                }
                [outProtocol writeListEnd];
            }
            [outProtocol writeFieldEnd];
        }
    }
    if (__xValsWithout_isset) {
        if (__xValsWithout != nil) {
            [outProtocol writeFieldBeginWithName: @"xValsWithout" type: TType_LIST fieldID: 5];
            {
                [outProtocol writeListBeginWithElementType: TType_DOUBLE size: [__xValsWithout count]];
                int i37;
                for (i37 = 0; i37 < [__xValsWithout count]; i37++)
                {
                    [outProtocol writeDouble: [[__xValsWithout objectAtIndex: i37] doubleValue]];
                }
                [outProtocol writeListEnd];
            }
            [outProtocol writeFieldEnd];
        }
    }
    if (__yValsWithout_isset) {
        if (__yValsWithout != nil) {
            [outProtocol writeFieldBeginWithName: @"yValsWithout" type: TType_LIST fieldID: 6];
            {
                [outProtocol writeListBeginWithElementType: TType_DOUBLE size: [__yValsWithout count]];
                int i39;
                for (i39 = 0; i39 < [__yValsWithout count]; i39++)
                {
                    [outProtocol writeDouble: [[__yValsWithout objectAtIndex: i39] doubleValue]];
                }
                [outProtocol writeListEnd];
            }
            [outProtocol writeFieldEnd];
        }
    }
    if (__expectedValue_isset) {
        [outProtocol writeFieldBeginWithName: @"expectedValue" type: TType_DOUBLE fieldID: 7];
        [outProtocol writeDouble: __expectedValue];
        [outProtocol writeFieldEnd];
    }
    if (__expectedValueWithout_isset) {
        [outProtocol writeFieldBeginWithName: @"expectedValueWithout" type: TType_DOUBLE fieldID: 8];
        [outProtocol writeDouble: __expectedValueWithout];
        [outProtocol writeFieldEnd];
    }
    if (__error_isset) {
        [outProtocol writeFieldBeginWithName: @"error" type: TType_DOUBLE fieldID: 9];
        [outProtocol writeDouble: __error];
        [outProtocol writeFieldEnd];
    }
    if (__errorWithout_isset) {
        [outProtocol writeFieldBeginWithName: @"errorWithout" type: TType_DOUBLE fieldID: 10];
        [outProtocol writeDouble: __errorWithout];
        [outProtocol writeFieldEnd];
    }
    if (__samples_isset) {
        [outProtocol writeFieldBeginWithName: @"samples" type: TType_DOUBLE fieldID: 11];
        [outProtocol writeDouble: __samples];
        [outProtocol writeFieldEnd];
    }
    if (__samplesWithout_isset) {
        [outProtocol writeFieldBeginWithName: @"samplesWithout" type: TType_DOUBLE fieldID: 12];
        [outProtocol writeDouble: __samplesWithout];
        [outProtocol writeFieldEnd];
    }
    if (__appLabel_isset) {
        if (__appLabel != nil) {
            [outProtocol writeFieldBeginWithName: @"appLabel" type: TType_STRING fieldID: 13];
            [outProtocol writeString: __appLabel];
            [outProtocol writeFieldEnd];
        }
    }
    if (__appPriority_isset) {
        if (__appPriority != nil) {
            [outProtocol writeFieldBeginWithName: @"appPriority" type: TType_STRING fieldID: 14];
            [outProtocol writeString: __appPriority];
            [outProtocol writeFieldEnd];
        }
    }
    [outProtocol writeFieldStop];
    [outProtocol writeStructEnd];
}

- (NSString *) description {
    NSMutableString * ms = [NSMutableString stringWithString: @"HogsBugs("];
    [ms appendString: @"appName:"];
    [ms appendFormat: @"\"%@\"", __appName];
    [ms appendString: @",wDistance:"];
    [ms appendFormat: @"%f", __wDistance];
    [ms appendString: @",xVals:"];
    [ms appendFormat: @"%@", __xVals];
    [ms appendString: @",yVals:"];
    [ms appendFormat: @"%@", __yVals];
    [ms appendString: @",xValsWithout:"];
    [ms appendFormat: @"%@", __xValsWithout];
    [ms appendString: @",yValsWithout:"];
    [ms appendFormat: @"%@", __yValsWithout];
    [ms appendString: @",expectedValue:"];
    [ms appendFormat: @"%f", __expectedValue];
    [ms appendString: @",expectedValueWithout:"];
    [ms appendFormat: @"%f", __expectedValueWithout];
    [ms appendString: @",error:"];
    [ms appendFormat: @"%f", __error];
    [ms appendString: @",errorWithout:"];
    [ms appendFormat: @"%f", __errorWithout];
    [ms appendString: @",samples:"];
    [ms appendFormat: @"%f", __samples];
    [ms appendString: @",samplesWithout:"];
    [ms appendFormat: @"%f", __samplesWithout];
    [ms appendString: @",appLabel:"];
    [ms appendFormat: @"\"%@\"", __appLabel];
    [ms appendString: @",appPriority:"];
    [ms appendFormat: @"\"%@\"", __appPriority];
    [ms appendString: @")"];
    return [NSString stringWithString: ms];
}

@end

@implementation HogBugReport

- (id) initWithUuId: (NSString *) uuId hbList: (HogsBugsList) hbList
{
    self = [super init];
    __uuId = [uuId retain];
    __uuId_isset = YES;
    __hbList = [hbList retain];
    __hbList_isset = YES;
    return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
    self = [super init];
    if ([decoder containsValueForKey: @"uuId"])
    {
        __uuId = [[decoder decodeObjectForKey: @"uuId"] retain];
        __uuId_isset = YES;
    }
    if ([decoder containsValueForKey: @"hbList"])
    {
        __hbList = [[decoder decodeObjectForKey: @"hbList"] retain];
        __hbList_isset = YES;
    }
    return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
    if (__uuId_isset)
    {
        [encoder encodeObject: __uuId forKey: @"uuId"];
    }
    if (__hbList_isset)
    {
        [encoder encodeObject: __hbList forKey: @"hbList"];
    }
}

- (void) dealloc
{
    [__uuId release];
    [__hbList release];
    [super dealloc];
}

- (NSString *) uuId {
    return [[__uuId retain] autorelease];
}

- (void) setUuId: (NSString *) uuId {
    [uuId retain];
    [__uuId release];
    __uuId = uuId;
    __uuId_isset = YES;
}

- (BOOL) uuIdIsSet {
    return __uuId_isset;
}

- (void) unsetUuId {
    [__uuId release];
    __uuId = nil;
    __uuId_isset = NO;
}

- (NSArray *) hbList {
    return [[__hbList retain] autorelease];
}

- (void) setHbList: (NSArray *) hbList {
    [hbList retain];
    [__hbList release];
    __hbList = hbList;
    __hbList_isset = YES;
}

- (BOOL) hbListIsSet {
    return __hbList_isset;
}

- (void) unsetHbList {
    [__hbList release];
    __hbList = nil;
    __hbList_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
    NSString * fieldName;
    int fieldType;
    int fieldID;
    
    [inProtocol readStructBeginReturningName: NULL];
    while (true)
    {
        [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
        if (fieldType == TType_STOP) {
            break;
        }
        switch (fieldID)
        {
            case 1:
                if (fieldType == TType_STRING) {
                    NSString * fieldValue = [inProtocol readString];
                    [self setUuId: fieldValue];
                } else {
                    [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
                }
                break;
            case 2:
                if (fieldType == TType_LIST) {
                    int _size40;
                    [inProtocol readListBeginReturningElementType: NULL size: &_size40];
                    NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size40];
                    int _i41;
                    for (_i41 = 0; _i41 < _size40; ++_i41)
                    {
                        HogsBugs *_elem42 = [[HogsBugs alloc] init];
                        [_elem42 read: inProtocol];
                        [fieldValue addObject: _elem42];
                        [_elem42 release];
                    }
                    [inProtocol readListEnd];
                    [self setHbList: fieldValue];
                    [fieldValue release];
                } else {
                    [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
                }
                break;
            default:
                [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
                break;
        }
        [inProtocol readFieldEnd];
    }
    [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
    [outProtocol writeStructBeginWithName: @"HogBugReport"];
    if (__uuId_isset) {
        if (__uuId != nil) {
            [outProtocol writeFieldBeginWithName: @"uuId" type: TType_STRING fieldID: 1];
            [outProtocol writeString: __uuId];
            [outProtocol writeFieldEnd];
        }
    }
    if (__hbList_isset) {
        if (__hbList != nil) {
            [outProtocol writeFieldBeginWithName: @"hbList" type: TType_LIST fieldID: 2];
            {
                [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__hbList count]];
                int i44;
                for (i44 = 0; i44 < [__hbList count]; i44++)
                {
                    [[__hbList objectAtIndex: i44] write: outProtocol];
                }
                [outProtocol writeListEnd];
            }
            [outProtocol writeFieldEnd];
        }
    }
    [outProtocol writeFieldStop];
    [outProtocol writeStructEnd];
}

- (NSString *) description {
    NSMutableString * ms = [NSMutableString stringWithString: @"HogBugReport("];
    [ms appendString: @"uuId:"];
    [ms appendFormat: @"\"%@\"", __uuId];
    [ms appendString: @",hbList:"];
    [ms appendFormat: @"%@", __hbList];
    [ms appendString: @")"];
    return [NSString stringWithString: ms];
}

@end

@implementation Feature

- (id) initWithKey: (NSString *) key value: (NSString *) value
{
    self = [super init];
    __key = [key retain];
    __key_isset = YES;
    __value = [value retain];
    __value_isset = YES;
    return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
    self = [super init];
    if ([decoder containsValueForKey: @"key"])
    {
        __key = [[decoder decodeObjectForKey: @"key"] retain];
        __key_isset = YES;
    }
    if ([decoder containsValueForKey: @"value"])
    {
        __value = [[decoder decodeObjectForKey: @"value"] retain];
        __value_isset = YES;
    }
    return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
    if (__key_isset)
    {
        [encoder encodeObject: __key forKey: @"key"];
    }
    if (__value_isset)
    {
        [encoder encodeObject: __value forKey: @"value"];
    }
}

- (void) dealloc
{
    [__key release];
    [__value release];
    [super dealloc];
}

- (NSString *) key {
    return [[__key retain] autorelease];
}

- (void) setKey: (NSString *) key {
    [key retain];
    [__key release];
    __key = key;
    __key_isset = YES;
}

- (BOOL) keyIsSet {
    return __key_isset;
}

- (void) unsetKey {
    [__key release];
    __key = nil;
    __key_isset = NO;
}

- (NSString *) value {
    return [[__value retain] autorelease];
}

- (void) setValue: (NSString *) value {
    [value retain];
    [__value release];
    __value = value;
    __value_isset = YES;
}

- (BOOL) valueIsSet {
    return __value_isset;
}

- (void) unsetValue {
    [__value release];
    __value = nil;
    __value_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
    NSString * fieldName;
    int fieldType;
    int fieldID;
    
    [inProtocol readStructBeginReturningName: NULL];
    while (true)
    {
        [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
        if (fieldType == TType_STOP) {
            break;
        }
        switch (fieldID)
        {
            case 1:
                if (fieldType == TType_STRING) {
                    NSString * fieldValue = [inProtocol readString];
                    [self setKey: fieldValue];
                } else {
                    [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
                }
                break;
            case 2:
                if (fieldType == TType_STRING) {
                    NSString * fieldValue = [inProtocol readString];
                    [self setValue: fieldValue];
                } else {
                    [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
                }
                break;
            default:
                [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
                break;
        }
        [inProtocol readFieldEnd];
    }
    [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
    [outProtocol writeStructBeginWithName: @"Feature"];
    if (__key_isset) {
        if (__key != nil) {
            [outProtocol writeFieldBeginWithName: @"key" type: TType_STRING fieldID: 1];
            [outProtocol writeString: __key];
            [outProtocol writeFieldEnd];
        }
    }
    if (__value_isset) {
        if (__value != nil) {
            [outProtocol writeFieldBeginWithName: @"value" type: TType_STRING fieldID: 2];
            [outProtocol writeString: __value];
            [outProtocol writeFieldEnd];
        }
    }
    [outProtocol writeFieldStop];
    [outProtocol writeStructEnd];
}

- (NSString *) description {
    NSMutableString * ms = [NSMutableString stringWithString: @"Feature("];
    [ms appendString: @"key:"];
    [ms appendFormat: @"\"%@\"", __key];
    [ms appendString: @",value:"];
    [ms appendFormat: @"\"%@\"", __value];
    [ms appendString: @")"];
    return [NSString stringWithString: ms];
}

@end


@implementation CaratProtocolConstants
+ (void) initialize {
}
@end

@interface registerMe_args : NSObject <NSCoding> {
    Registration * __registration;
    
    BOOL __registration_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=registration, setter=setRegistration:) Registration * registration;
#endif

- (id) initWithRegistration: (Registration *) registration;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (Registration *) registration;
- (void) setRegistration: (Registration *) registration;
- (BOOL) registrationIsSet;

@end

@implementation registerMe_args

- (id) initWithRegistration: (Registration *) registration
{
    self = [super init];
    __registration = [registration retain];
    __registration_isset = YES;
    return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
    self = [super init];
    if ([decoder containsValueForKey: @"registration"])
    {
        __registration = [[decoder decodeObjectForKey: @"registration"] retain];
        __registration_isset = YES;
    }
    return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
    if (__registration_isset)
    {
        [encoder encodeObject: __registration forKey: @"registration"];
    }
}

- (void) dealloc
{
    [__registration release];
    [super dealloc];
}

- (Registration *) registration {
    return [[__registration retain] autorelease];
}

- (void) setRegistration: (Registration *) registration {
    [registration retain];
    [__registration release];
    __registration = registration;
    __registration_isset = YES;
}

- (BOOL) registrationIsSet {
    return __registration_isset;
}

- (void) unsetRegistration {
    [__registration release];
    __registration = nil;
    __registration_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
    NSString * fieldName;
    int fieldType;
    int fieldID;
    
    [inProtocol readStructBeginReturningName: NULL];
    while (true)
    {
        [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
        if (fieldType == TType_STOP) {
            break;
        }
        switch (fieldID)
        {
            case 1:
                if (fieldType == TType_STRUCT) {
                    Registration *fieldValue = [[Registration alloc] init];
                    [fieldValue read: inProtocol];
                    [self setRegistration: fieldValue];
                    [fieldValue release];
                } else {
                    [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
                }
                break;
            default:
                [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
                break;
        }
        [inProtocol readFieldEnd];
    }
    [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
    [outProtocol writeStructBeginWithName: @"registerMe_args"];
    if (__registration_isset) {
        if (__registration != nil) {
            [outProtocol writeFieldBeginWithName: @"registration" type: TType_STRUCT fieldID: 1];
            [__registration write: outProtocol];
            [outProtocol writeFieldEnd];
        }
    }
    [outProtocol writeFieldStop];
    [outProtocol writeStructEnd];
}

- (NSString *) description {
    NSMutableString * ms = [NSMutableString stringWithString: @"registerMe_args("];
    [ms appendString: @"registration:"];
    [ms appendFormat: @"%@", __registration];
    [ms appendString: @")"];
    return [NSString stringWithString: ms];
}

@end

@interface uploadSample_args : NSObject <NSCoding> {
    Sample * __sample;
    
    BOOL __sample_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=sample, setter=setSample:) Sample * sample;
#endif

- (id) initWithSample: (Sample *) sample;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (Sample *) sample;
- (void) setSample: (Sample *) sample;
- (BOOL) sampleIsSet;

@end

@implementation uploadSample_args

- (id) initWithSample: (Sample *) sample
{
    self = [super init];
    __sample = [sample retain];
    __sample_isset = YES;
    return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
    self = [super init];
    if ([decoder containsValueForKey: @"sample"])
    {
        __sample = [[decoder decodeObjectForKey: @"sample"] retain];
        __sample_isset = YES;
    }
    return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
    if (__sample_isset)
    {
        [encoder encodeObject: __sample forKey: @"sample"];
    }
}

- (void) dealloc
{
    [__sample release];
    [super dealloc];
}

- (Sample *) sample {
    return [[__sample retain] autorelease];
}

- (void) setSample: (Sample *) sample {
    [sample retain];
    [__sample release];
    __sample = sample;
    __sample_isset = YES;
}

- (BOOL) sampleIsSet {
    return __sample_isset;
}

- (void) unsetSample {
    [__sample release];
    __sample = nil;
    __sample_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
    NSString * fieldName;
    int fieldType;
    int fieldID;
    
    [inProtocol readStructBeginReturningName: NULL];
    while (true)
    {
        [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
        if (fieldType == TType_STOP) {
            break;
        }
        switch (fieldID)
        {
            case 1:
                if (fieldType == TType_STRUCT) {
                    Sample *fieldValue = [[Sample alloc] init];
                    [fieldValue read: inProtocol];
                    [self setSample: fieldValue];
                    [fieldValue release];
                } else {
                    [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
                }
                break;
            default:
                [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
                break;
        }
        [inProtocol readFieldEnd];
    }
    [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
    [outProtocol writeStructBeginWithName: @"uploadSample_args"];
    if (__sample_isset) {
        if (__sample != nil) {
            [outProtocol writeFieldBeginWithName: @"sample" type: TType_STRUCT fieldID: 1];
            [__sample write: outProtocol];
            [outProtocol writeFieldEnd];
        }
    }
    [outProtocol writeFieldStop];
    [outProtocol writeStructEnd];
}

- (NSString *) description {
    NSMutableString * ms = [NSMutableString stringWithString: @"uploadSample_args("];
    [ms appendString: @"sample:"];
    [ms appendFormat: @"%@", __sample];
    [ms appendString: @")"];
    return [NSString stringWithString: ms];
}

@end

@interface UploadSample_result : NSObject <NSCoding> {
    BOOL __success;
    
    BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) BOOL success;
#endif

- (id) initWithSuccess: (BOOL) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (BOOL) success;
- (void) setSuccess: (BOOL) success;
- (BOOL) successIsSet;

@end

@implementation UploadSample_result

- (id) initWithSuccess: (BOOL) success
{
    self = [super init];
    __success = success;
    __success_isset = YES;
    return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
    self = [super init];
    if ([decoder containsValueForKey: @"success"])
    {
        __success = [decoder decodeBoolForKey: @"success"];
        __success_isset = YES;
    }
    return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
    if (__success_isset)
    {
        [encoder encodeBool: __success forKey: @"success"];
    }
}

- (void) dealloc
{
    [super dealloc];
}

- (BOOL) success {
    return __success;
}

- (void) setSuccess: (BOOL) success {
    __success = success;
    __success_isset = YES;
}

- (BOOL) successIsSet {
    return __success_isset;
}

- (void) unsetSuccess {
    __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
    NSString * fieldName;
    int fieldType;
    int fieldID;
    
    [inProtocol readStructBeginReturningName: NULL];
    while (true)
    {
        [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
        if (fieldType == TType_STOP) {
            break;
        }
        switch (fieldID)
        {
            case 0:
                if (fieldType == TType_BOOL) {
                    BOOL fieldValue = [inProtocol readBool];
                    [self setSuccess: fieldValue];
                } else {
                    [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
                }
                break;
            default:
                [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
                break;
        }
        [inProtocol readFieldEnd];
    }
    [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
    [outProtocol writeStructBeginWithName: @"UploadSample_result"];
    
    if (__success_isset) {
        [outProtocol writeFieldBeginWithName: @"success" type: TType_BOOL fieldID: 0];
        [outProtocol writeBool: __success];
        [outProtocol writeFieldEnd];
    }
    [outProtocol writeFieldStop];
    [outProtocol writeStructEnd];
}

- (NSString *) description {
    NSMutableString * ms = [NSMutableString stringWithString: @"UploadSample_result("];
    [ms appendString: @"success:"];
    [ms appendFormat: @"%i", __success];
    [ms appendString: @")"];
    return [NSString stringWithString: ms];
}

@end

@interface getReports_args : NSObject <NSCoding> {
    NSString * __uuId;
    FeatureList __features;
    
    BOOL __uuId_isset;
    BOOL __features_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=uuId, setter=setUuId:) NSString * uuId;
@property (nonatomic, retain, getter=features, setter=setFeatures:) FeatureList features;
#endif

- (id) initWithUuId: (NSString *) uuId features: (FeatureList) features;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (NSString *) uuId;
- (void) setUuId: (NSString *) uuId;
- (BOOL) uuIdIsSet;

- (FeatureList) features;
- (void) setFeatures: (FeatureList) features;
- (BOOL) featuresIsSet;

@end

@implementation getReports_args

- (id) initWithUuId: (NSString *) uuId features: (FeatureList) features
{
    self = [super init];
    __uuId = [uuId retain];
    __uuId_isset = YES;
    __features = [features retain];
    __features_isset = YES;
    return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
    self = [super init];
    if ([decoder containsValueForKey: @"uuId"])
    {
        __uuId = [[decoder decodeObjectForKey: @"uuId"] retain];
        __uuId_isset = YES;
    }
    if ([decoder containsValueForKey: @"features"])
    {
        __features = [[decoder decodeObjectForKey: @"features"] retain];
        __features_isset = YES;
    }
    return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
    if (__uuId_isset)
    {
        [encoder encodeObject: __uuId forKey: @"uuId"];
    }
    if (__features_isset)
    {
        [encoder encodeObject: __features forKey: @"features"];
    }
}

- (void) dealloc
{
    [__uuId release];
    [__features release];
    [super dealloc];
}

- (NSString *) uuId {
    return [[__uuId retain] autorelease];
}

- (void) setUuId: (NSString *) uuId {
    [uuId retain];
    [__uuId release];
    __uuId = uuId;
    __uuId_isset = YES;
}

- (BOOL) uuIdIsSet {
    return __uuId_isset;
}

- (void) unsetUuId {
    [__uuId release];
    __uuId = nil;
    __uuId_isset = NO;
}

- (NSArray *) features {
    return [[__features retain] autorelease];
}

- (void) setFeatures: (NSArray *) features {
    [features retain];
    [__features release];
    __features = features;
    __features_isset = YES;
}

- (BOOL) featuresIsSet {
    return __features_isset;
}

- (void) unsetFeatures {
    [__features release];
    __features = nil;
    __features_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
    NSString * fieldName;
    int fieldType;
    int fieldID;
    
    [inProtocol readStructBeginReturningName: NULL];
    while (true)
    {
        [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
        if (fieldType == TType_STOP) {
            break;
        }
        switch (fieldID)
        {
            case 1:
                if (fieldType == TType_STRING) {
                    NSString * fieldValue = [inProtocol readString];
                    [self setUuId: fieldValue];
                } else {
                    [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
                }
                break;
            case 2:
                if (fieldType == TType_LIST) {
                    int _size45;
                    [inProtocol readListBeginReturningElementType: NULL size: &_size45];
                    NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size45];
                    int _i46;
                    for (_i46 = 0; _i46 < _size45; ++_i46)
                    {
                        Feature *_elem47 = [[Feature alloc] init];
                        [_elem47 read: inProtocol];
                        [fieldValue addObject: _elem47];
                        [_elem47 release];
                    }
                    [inProtocol readListEnd];
                    [self setFeatures: fieldValue];
                    [fieldValue release];
                } else {
                    [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
                }
                break;
            default:
                [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
                break;
        }
        [inProtocol readFieldEnd];
    }
    [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
    [outProtocol writeStructBeginWithName: @"getReports_args"];
    if (__uuId_isset) {
        if (__uuId != nil) {
            [outProtocol writeFieldBeginWithName: @"uuId" type: TType_STRING fieldID: 1];
            [outProtocol writeString: __uuId];
            [outProtocol writeFieldEnd];
        }
    }
    if (__features_isset) {
        if (__features != nil) {
            [outProtocol writeFieldBeginWithName: @"features" type: TType_LIST fieldID: 2];
            {
                [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__features count]];
                int i49;
                for (i49 = 0; i49 < [__features count]; i49++)
                {
                    [[__features objectAtIndex: i49] write: outProtocol];
                }
                [outProtocol writeListEnd];
            }
            [outProtocol writeFieldEnd];
        }
    }
    [outProtocol writeFieldStop];
    [outProtocol writeStructEnd];
}

- (NSString *) description {
    NSMutableString * ms = [NSMutableString stringWithString: @"getReports_args("];
    [ms appendString: @"uuId:"];
    [ms appendFormat: @"\"%@\"", __uuId];
    [ms appendString: @",features:"];
    [ms appendFormat: @"%@", __features];
    [ms appendString: @")"];
    return [NSString stringWithString: ms];
}

@end

@interface GetReports_result : NSObject <NSCoding> {
    Reports * __success;
    
    BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) Reports * success;
#endif

- (id) initWithSuccess: (Reports *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (Reports *) success;
- (void) setSuccess: (Reports *) success;
- (BOOL) successIsSet;

@end

@implementation GetReports_result

- (id) initWithSuccess: (Reports *) success
{
    self = [super init];
    __success = [success retain];
    __success_isset = YES;
    return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
    self = [super init];
    if ([decoder containsValueForKey: @"success"])
    {
        __success = [[decoder decodeObjectForKey: @"success"] retain];
        __success_isset = YES;
    }
    return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
    if (__success_isset)
    {
        [encoder encodeObject: __success forKey: @"success"];
    }
}

- (void) dealloc
{
    [__success release];
    [super dealloc];
}

- (Reports *) success {
    return [[__success retain] autorelease];
}

- (void) setSuccess: (Reports *) success {
    [success retain];
    [__success release];
    __success = success;
    __success_isset = YES;
}

- (BOOL) successIsSet {
    return __success_isset;
}

- (void) unsetSuccess {
    [__success release];
    __success = nil;
    __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
    NSString * fieldName;
    int fieldType;
    int fieldID;
    
    [inProtocol readStructBeginReturningName: NULL];
    while (true)
    {
        [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
        if (fieldType == TType_STOP) {
            break;
        }
        switch (fieldID)
        {
            case 0:
                if (fieldType == TType_STRUCT) {
                    Reports *fieldValue = [[Reports alloc] init];
                    [fieldValue read: inProtocol];
                    [self setSuccess: fieldValue];
                    [fieldValue release];
                } else {
                    [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
                }
                break;
            default:
                [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
                break;
        }
        [inProtocol readFieldEnd];
    }
    [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
    [outProtocol writeStructBeginWithName: @"GetReports_result"];
    
    if (__success_isset) {
        if (__success != nil) {
            [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
            [__success write: outProtocol];
            [outProtocol writeFieldEnd];
        }
    }
    [outProtocol writeFieldStop];
    [outProtocol writeStructEnd];
}

- (NSString *) description {
    NSMutableString * ms = [NSMutableString stringWithString: @"GetReports_result("];
    [ms appendString: @"success:"];
    [ms appendFormat: @"%@", __success];
    [ms appendString: @")"];
    return [NSString stringWithString: ms];
}

@end

@interface getHogOrBugReport_args : NSObject <NSCoding> {
    NSString * __uuId;
    FeatureList __features;
    
    BOOL __uuId_isset;
    BOOL __features_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=uuId, setter=setUuId:) NSString * uuId;
@property (nonatomic, retain, getter=features, setter=setFeatures:) FeatureList features;
#endif

- (id) initWithUuId: (NSString *) uuId features: (FeatureList) features;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (NSString *) uuId;
- (void) setUuId: (NSString *) uuId;
- (BOOL) uuIdIsSet;

- (FeatureList) features;
- (void) setFeatures: (FeatureList) features;
- (BOOL) featuresIsSet;

@end

@implementation getHogOrBugReport_args

- (id) initWithUuId: (NSString *) uuId features: (FeatureList) features
{
    self = [super init];
    __uuId = [uuId retain];
    __uuId_isset = YES;
    __features = [features retain];
    __features_isset = YES;
    return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
    self = [super init];
    if ([decoder containsValueForKey: @"uuId"])
    {
        __uuId = [[decoder decodeObjectForKey: @"uuId"] retain];
        __uuId_isset = YES;
    }
    if ([decoder containsValueForKey: @"features"])
    {
        __features = [[decoder decodeObjectForKey: @"features"] retain];
        __features_isset = YES;
    }
    return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
    if (__uuId_isset)
    {
        [encoder encodeObject: __uuId forKey: @"uuId"];
    }
    if (__features_isset)
    {
        [encoder encodeObject: __features forKey: @"features"];
    }
}

- (void) dealloc
{
    [__uuId release];
    [__features release];
    [super dealloc];
}

- (NSString *) uuId {
    return [[__uuId retain] autorelease];
}

- (void) setUuId: (NSString *) uuId {
    [uuId retain];
    [__uuId release];
    __uuId = uuId;
    __uuId_isset = YES;
}

- (BOOL) uuIdIsSet {
    return __uuId_isset;
}

- (void) unsetUuId {
    [__uuId release];
    __uuId = nil;
    __uuId_isset = NO;
}

- (NSArray *) features {
    return [[__features retain] autorelease];
}

- (void) setFeatures: (NSArray *) features {
    [features retain];
    [__features release];
    __features = features;
    __features_isset = YES;
}

- (BOOL) featuresIsSet {
    return __features_isset;
}

- (void) unsetFeatures {
    [__features release];
    __features = nil;
    __features_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
    NSString * fieldName;
    int fieldType;
    int fieldID;
    
    [inProtocol readStructBeginReturningName: NULL];
    while (true)
    {
        [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
        if (fieldType == TType_STOP) {
            break;
        }
        switch (fieldID)
        {
            case 1:
                if (fieldType == TType_STRING) {
                    NSString * fieldValue = [inProtocol readString];
                    [self setUuId: fieldValue];
                } else {
                    [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
                }
                break;
            case 2:
                if (fieldType == TType_LIST) {
                    int _size50;
                    [inProtocol readListBeginReturningElementType: NULL size: &_size50];
                    NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size50];
                    int _i51;
                    for (_i51 = 0; _i51 < _size50; ++_i51)
                    {
                        Feature *_elem52 = [[Feature alloc] init];
                        [_elem52 read: inProtocol];
                        [fieldValue addObject: _elem52];
                        [_elem52 release];
                    }
                    [inProtocol readListEnd];
                    [self setFeatures: fieldValue];
                    [fieldValue release];
                } else {
                    [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
                }
                break;
            default:
                [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
                break;
        }
        [inProtocol readFieldEnd];
    }
    [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
    [outProtocol writeStructBeginWithName: @"getHogOrBugReport_args"];
    if (__uuId_isset) {
        if (__uuId != nil) {
            [outProtocol writeFieldBeginWithName: @"uuId" type: TType_STRING fieldID: 1];
            [outProtocol writeString: __uuId];
            [outProtocol writeFieldEnd];
        }
    }
    if (__features_isset) {
        if (__features != nil) {
            [outProtocol writeFieldBeginWithName: @"features" type: TType_LIST fieldID: 2];
            {
                [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__features count]];
                int i54;
                for (i54 = 0; i54 < [__features count]; i54++)
                {
                    [[__features objectAtIndex: i54] write: outProtocol];
                }
                [outProtocol writeListEnd];
            }
            [outProtocol writeFieldEnd];
        }
    }
    [outProtocol writeFieldStop];
    [outProtocol writeStructEnd];
}

- (NSString *) description {
    NSMutableString * ms = [NSMutableString stringWithString: @"getHogOrBugReport_args("];
    [ms appendString: @"uuId:"];
    [ms appendFormat: @"\"%@\"", __uuId];
    [ms appendString: @",features:"];
    [ms appendFormat: @"%@", __features];
    [ms appendString: @")"];
    return [NSString stringWithString: ms];
}

@end

@interface GetHogOrBugReport_result : NSObject <NSCoding> {
    HogBugReport * __success;
    
    BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) HogBugReport * success;
#endif

- (id) initWithSuccess: (HogBugReport *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (HogBugReport *) success;
- (void) setSuccess: (HogBugReport *) success;
- (BOOL) successIsSet;

@end

@implementation GetHogOrBugReport_result

- (id) initWithSuccess: (HogBugReport *) success
{
    self = [super init];
    __success = [success retain];
    __success_isset = YES;
    return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
    self = [super init];
    if ([decoder containsValueForKey: @"success"])
    {
        __success = [[decoder decodeObjectForKey: @"success"] retain];
        __success_isset = YES;
    }
    return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
    if (__success_isset)
    {
        [encoder encodeObject: __success forKey: @"success"];
    }
}

- (void) dealloc
{
    [__success release];
    [super dealloc];
}

- (HogBugReport *) success {
    return [[__success retain] autorelease];
}

- (void) setSuccess: (HogBugReport *) success {
    [success retain];
    [__success release];
    __success = success;
    __success_isset = YES;
}

- (BOOL) successIsSet {
    return __success_isset;
}

- (void) unsetSuccess {
    [__success release];
    __success = nil;
    __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
    NSString * fieldName;
    int fieldType;
    int fieldID;
    
    [inProtocol readStructBeginReturningName: NULL];
    while (true)
    {
        [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
        if (fieldType == TType_STOP) {
            break;
        }
        switch (fieldID)
        {
            case 0:
                if (fieldType == TType_STRUCT) {
                    HogBugReport *fieldValue = [[HogBugReport alloc] init];
                    [fieldValue read: inProtocol];
                    [self setSuccess: fieldValue];
                    [fieldValue release];
                } else {
                    [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
                }
                break;
            default:
                [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
                break;
        }
        [inProtocol readFieldEnd];
    }
    [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
    [outProtocol writeStructBeginWithName: @"GetHogOrBugReport_result"];
    
    if (__success_isset) {
        if (__success != nil) {
            [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
            [__success write: outProtocol];
            [outProtocol writeFieldEnd];
        }
    }
    [outProtocol writeFieldStop];
    [outProtocol writeStructEnd];
}

- (NSString *) description {
    NSMutableString * ms = [NSMutableString stringWithString: @"GetHogOrBugReport_result("];
    [ms appendString: @"success:"];
    [ms appendFormat: @"%@", __success];
    [ms appendString: @")"];
    return [NSString stringWithString: ms];
}

@end

@interface getQuickHogsAndMaybeRegister_args : NSObject <NSCoding> {
    Registration * __registration;
    NSArray * __processList;
    
    BOOL __registration_isset;
    BOOL __processList_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=registration, setter=setRegistration:) Registration * registration;
@property (nonatomic, retain, getter=processList, setter=setProcessList:) NSArray * processList;
#endif

- (id) initWithRegistration: (Registration *) registration processList: (NSArray *) processList;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (Registration *) registration;
- (void) setRegistration: (Registration *) registration;
- (BOOL) registrationIsSet;

- (NSArray *) processList;
- (void) setProcessList: (NSArray *) processList;
- (BOOL) processListIsSet;

@end

@implementation getQuickHogsAndMaybeRegister_args

- (id) initWithRegistration: (Registration *) registration processList: (NSArray *) processList
{
    self = [super init];
    __registration = [registration retain];
    __registration_isset = YES;
    __processList = [processList retain];
    __processList_isset = YES;
    return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
    self = [super init];
    if ([decoder containsValueForKey: @"registration"])
    {
        __registration = [[decoder decodeObjectForKey: @"registration"] retain];
        __registration_isset = YES;
    }
    if ([decoder containsValueForKey: @"processList"])
    {
        __processList = [[decoder decodeObjectForKey: @"processList"] retain];
        __processList_isset = YES;
    }
    return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
    if (__registration_isset)
    {
        [encoder encodeObject: __registration forKey: @"registration"];
    }
    if (__processList_isset)
    {
        [encoder encodeObject: __processList forKey: @"processList"];
    }
}

- (void) dealloc
{
    [__registration release];
    [__processList release];
    [super dealloc];
}

- (Registration *) registration {
    return [[__registration retain] autorelease];
}

- (void) setRegistration: (Registration *) registration {
    [registration retain];
    [__registration release];
    __registration = registration;
    __registration_isset = YES;
}

- (BOOL) registrationIsSet {
    return __registration_isset;
}

- (void) unsetRegistration {
    [__registration release];
    __registration = nil;
    __registration_isset = NO;
}

- (NSArray *) processList {
    return [[__processList retain] autorelease];
}

- (void) setProcessList: (NSArray *) processList {
    [processList retain];
    [__processList release];
    __processList = processList;
    __processList_isset = YES;
}

- (BOOL) processListIsSet {
    return __processList_isset;
}

- (void) unsetProcessList {
    [__processList release];
    __processList = nil;
    __processList_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
    NSString * fieldName;
    int fieldType;
    int fieldID;
    
    [inProtocol readStructBeginReturningName: NULL];
    while (true)
    {
        [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
        if (fieldType == TType_STOP) {
            break;
        }
        switch (fieldID)
        {
            case 1:
                if (fieldType == TType_STRUCT) {
                    Registration *fieldValue = [[Registration alloc] init];
                    [fieldValue read: inProtocol];
                    [self setRegistration: fieldValue];
                    [fieldValue release];
                } else {
                    [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
                }
                break;
            case 2:
                if (fieldType == TType_LIST) {
                    int _size55;
                    [inProtocol readListBeginReturningElementType: NULL size: &_size55];
                    NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size55];
                    int _i56;
                    for (_i56 = 0; _i56 < _size55; ++_i56)
                    {
                        NSString * _elem57 = [inProtocol readString];
                        [fieldValue addObject: _elem57];
                    }
                    [inProtocol readListEnd];
                    [self setProcessList: fieldValue];
                    [fieldValue release];
                } else {
                    [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
                }
                break;
            default:
                [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
                break;
        }
        [inProtocol readFieldEnd];
    }
    [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
    [outProtocol writeStructBeginWithName: @"getQuickHogsAndMaybeRegister_args"];
    if (__registration_isset) {
        if (__registration != nil) {
            [outProtocol writeFieldBeginWithName: @"registration" type: TType_STRUCT fieldID: 1];
            [__registration write: outProtocol];
            [outProtocol writeFieldEnd];
        }
    }
    if (__processList_isset) {
        if (__processList != nil) {
            [outProtocol writeFieldBeginWithName: @"processList" type: TType_LIST fieldID: 2];
            {
                [outProtocol writeListBeginWithElementType: TType_STRING size: [__processList count]];
                int i59;
                for (i59 = 0; i59 < [__processList count]; i59++)
                {
                    [outProtocol writeString: [__processList objectAtIndex: i59]];
                }
                [outProtocol writeListEnd];
            }
            [outProtocol writeFieldEnd];
        }
    }
    [outProtocol writeFieldStop];
    [outProtocol writeStructEnd];
}

- (NSString *) description {
    NSMutableString * ms = [NSMutableString stringWithString: @"getQuickHogsAndMaybeRegister_args("];
    [ms appendString: @"registration:"];
    [ms appendFormat: @"%@", __registration];
    [ms appendString: @",processList:"];
    [ms appendFormat: @"%@", __processList];
    [ms appendString: @")"];
    return [NSString stringWithString: ms];
}

@end

@interface GetQuickHogsAndMaybeRegister_result : NSObject <NSCoding> {
    HogBugReport * __success;
    
    BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) HogBugReport * success;
#endif

- (id) initWithSuccess: (HogBugReport *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (HogBugReport *) success;
- (void) setSuccess: (HogBugReport *) success;
- (BOOL) successIsSet;

@end

@implementation GetQuickHogsAndMaybeRegister_result

- (id) initWithSuccess: (HogBugReport *) success
{
    self = [super init];
    __success = [success retain];
    __success_isset = YES;
    return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
    self = [super init];
    if ([decoder containsValueForKey: @"success"])
    {
        __success = [[decoder decodeObjectForKey: @"success"] retain];
        __success_isset = YES;
    }
    return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
    if (__success_isset)
    {
        [encoder encodeObject: __success forKey: @"success"];
    }
}

- (void) dealloc
{
    [__success release];
    [super dealloc];
}

- (HogBugReport *) success {
    return [[__success retain] autorelease];
}

- (void) setSuccess: (HogBugReport *) success {
    [success retain];
    [__success release];
    __success = success;
    __success_isset = YES;
}

- (BOOL) successIsSet {
    return __success_isset;
}

- (void) unsetSuccess {
    [__success release];
    __success = nil;
    __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
    NSString * fieldName;
    int fieldType;
    int fieldID;
    
    [inProtocol readStructBeginReturningName: NULL];
    while (true)
    {
        [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
        if (fieldType == TType_STOP) { 
            break;
        }
        switch (fieldID)
        {
            case 0:
                if (fieldType == TType_STRUCT) {
                    HogBugReport *fieldValue = [[HogBugReport alloc] init];
                    [fieldValue read: inProtocol];
                    [self setSuccess: fieldValue];
                    [fieldValue release];
                } else { 
                    [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
                }
                break;
            default:
                [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
                break;
        }
        [inProtocol readFieldEnd];
    }
    [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
    [outProtocol writeStructBeginWithName: @"GetQuickHogsAndMaybeRegister_result"];
    
    if (__success_isset) {
        if (__success != nil) {
            [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
            [__success write: outProtocol];
            [outProtocol writeFieldEnd];
        }
    }
    [outProtocol writeFieldStop];
    [outProtocol writeStructEnd];
}

- (NSString *) description {
    NSMutableString * ms = [NSMutableString stringWithString: @"GetQuickHogsAndMaybeRegister_result("];
    [ms appendString: @"success:"];
    [ms appendFormat: @"%@", __success];
    [ms appendString: @")"];
    return [NSString stringWithString: ms];
}

@end

@implementation CaratServiceClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
    return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
    self = [super init];
    if (self) {
        inProtocol = [anInProtocol retain];
        outProtocol = [anOutProtocol retain];
    }
    return self;
}

- (void) dealloc
{
    [inProtocol release];
    [outProtocol release];
    [super dealloc];
}

- (void) send_registerMe: (Registration *) registration
{
    [outProtocol writeMessageBeginWithName: @"registerMe" type: TMessageType_CALL sequenceID: 0];
    [outProtocol writeStructBeginWithName: @"registerMe_args"];
    if (registration != nil)  {
        [outProtocol writeFieldBeginWithName: @"registration" type: TType_STRUCT fieldID: 1];
        [registration write: outProtocol];
        [outProtocol writeFieldEnd];
    }
    [outProtocol writeFieldStop];
    [outProtocol writeStructEnd];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
}

- (void) registerMe: (Registration *) registration
{
    [self send_registerMe: registration];
}

- (void) send_uploadSample: (Sample *) sample
{
    [outProtocol writeMessageBeginWithName: @"uploadSample" type: TMessageType_CALL sequenceID: 0];
    [outProtocol writeStructBeginWithName: @"uploadSample_args"];
    if (sample != nil)  {
        [outProtocol writeFieldBeginWithName: @"sample" type: TType_STRUCT fieldID: 1];
        [sample write: outProtocol];
        [outProtocol writeFieldEnd];
    }
    [outProtocol writeFieldStop];
    [outProtocol writeStructEnd];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
}

- (BOOL) recv_uploadSample
{
    int msgType = 0;
    [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
    if (msgType == TMessageType_EXCEPTION) {
        TApplicationException * x = [TApplicationException read: inProtocol];
        [inProtocol readMessageEnd];
        @throw x;
    }
    UploadSample_result * result = [[[UploadSample_result alloc] init] autorelease];
    [result read: inProtocol];
    [inProtocol readMessageEnd];
    if ([result successIsSet]) {
        return [result success];
    }
    @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                             reason: @"uploadSample failed: unknown result"];
}

- (BOOL) uploadSample: (Sample *) sample
{
    [self send_uploadSample: sample];
    return [self recv_uploadSample];
}

- (void) send_getReports: (NSString *) uuId : (FeatureList) features
{
    [outProtocol writeMessageBeginWithName: @"getReports" type: TMessageType_CALL sequenceID: 0];
    [outProtocol writeStructBeginWithName: @"getReports_args"];
    if (uuId != nil)  {
        [outProtocol writeFieldBeginWithName: @"uuId" type: TType_STRING fieldID: 1];
        [outProtocol writeString: uuId];
        [outProtocol writeFieldEnd];
    }
    if (features != nil)  {
        [outProtocol writeFieldBeginWithName: @"features" type: TType_LIST fieldID: 2];
        {
            [outProtocol writeListBeginWithElementType: TType_STRUCT size: [features count]];
            int i61;
            for (i61 = 0; i61 < [features count]; i61++)
            {
                [[features objectAtIndex: i61] write: outProtocol];
            }
            [outProtocol writeListEnd];
        }
        [outProtocol writeFieldEnd];
    }
    [outProtocol writeFieldStop];
    [outProtocol writeStructEnd];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
}

- (Reports *) recv_getReports
{
    int msgType = 0;
    [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
    if (msgType == TMessageType_EXCEPTION) {
        TApplicationException * x = [TApplicationException read: inProtocol];
        [inProtocol readMessageEnd];
        @throw x;
    }
    GetReports_result * result = [[[GetReports_result alloc] init] autorelease];
    [result read: inProtocol];
    [inProtocol readMessageEnd];
    if ([result successIsSet]) {
        return [result success];
    }
    @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                             reason: @"getReports failed: unknown result"];
}

- (Reports *) getReports: (NSString *) uuId : (FeatureList) features
{
    [self send_getReports: uuId : features];
    return [self recv_getReports];
}

- (void) send_getHogOrBugReport: (NSString *) uuId : (FeatureList) features
{
    [outProtocol writeMessageBeginWithName: @"getHogOrBugReport" type: TMessageType_CALL sequenceID: 0];
    [outProtocol writeStructBeginWithName: @"getHogOrBugReport_args"];
    if (uuId != nil)  {
        [outProtocol writeFieldBeginWithName: @"uuId" type: TType_STRING fieldID: 1];
        [outProtocol writeString: uuId];
        [outProtocol writeFieldEnd];
    }
    if (features != nil)  {
        [outProtocol writeFieldBeginWithName: @"features" type: TType_LIST fieldID: 2];
        {
            [outProtocol writeListBeginWithElementType: TType_STRUCT size: [features count]];
            int i63;
            for (i63 = 0; i63 < [features count]; i63++)
            {
                [[features objectAtIndex: i63] write: outProtocol];
            }
            [outProtocol writeListEnd];
        }
        [outProtocol writeFieldEnd];
    }
    [outProtocol writeFieldStop];
    [outProtocol writeStructEnd];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
}

- (HogBugReport *) recv_getHogOrBugReport
{
    int msgType = 0;
    [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
    if (msgType == TMessageType_EXCEPTION) {
        TApplicationException * x = [TApplicationException read: inProtocol];
        [inProtocol readMessageEnd];
        @throw x;
    }
    GetHogOrBugReport_result * result = [[[GetHogOrBugReport_result alloc] init] autorelease];
    [result read: inProtocol];
    [inProtocol readMessageEnd];
    if ([result successIsSet]) {
        return [result success];
    }
    @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                             reason: @"getHogOrBugReport failed: unknown result"];
}

- (HogBugReport *) getHogOrBugReport: (NSString *) uuId : (FeatureList) features
{
    [self send_getHogOrBugReport: uuId : features];
    return [self recv_getHogOrBugReport];
}

- (void) send_getQuickHogsAndMaybeRegister: (Registration *) registration : (NSArray *) processList
{
    [outProtocol writeMessageBeginWithName: @"getQuickHogsAndMaybeRegister" type: TMessageType_CALL sequenceID: 0];
    [outProtocol writeStructBeginWithName: @"getQuickHogsAndMaybeRegister_args"];
    if (registration != nil)  {
        [outProtocol writeFieldBeginWithName: @"registration" type: TType_STRUCT fieldID: 1];
        [registration write: outProtocol];
        [outProtocol writeFieldEnd];
    }
    if (processList != nil)  {
        [outProtocol writeFieldBeginWithName: @"processList" type: TType_LIST fieldID: 2];
        {
            [outProtocol writeListBeginWithElementType: TType_STRING size: [processList count]];
            int i65;
            for (i65 = 0; i65 < [processList count]; i65++)
            {
                [outProtocol writeString: [processList objectAtIndex: i65]];
            }
            [outProtocol writeListEnd];
        }
        [outProtocol writeFieldEnd];
    }
    [outProtocol writeFieldStop];
    [outProtocol writeStructEnd];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
}

- (HogBugReport *) recv_getQuickHogsAndMaybeRegister
{
    int msgType = 0;
    [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
    if (msgType == TMessageType_EXCEPTION) {
        TApplicationException * x = [TApplicationException read: inProtocol];
        [inProtocol readMessageEnd];
        @throw x;
    }
    GetQuickHogsAndMaybeRegister_result * result = [[[GetQuickHogsAndMaybeRegister_result alloc] init] autorelease];
    [result read: inProtocol];
    [inProtocol readMessageEnd];
    if ([result successIsSet]) {
        return [result success];
    }
    @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                             reason: @"getQuickHogsAndMaybeRegister failed: unknown result"];
}

- (HogBugReport *) getQuickHogsAndMaybeRegister: (Registration *) registration : (NSArray *) processList
{
    [self send_getQuickHogsAndMaybeRegister: registration : processList];
    return [self recv_getQuickHogsAndMaybeRegister];
}

@end

@implementation CaratServiceProcessor

- (id) initWithCaratService: (id <CaratService>) service
{
    self = [super init];
    if (!self) {
        return nil;
    }
    mService = [service retain];
    mMethodMap = [[NSMutableDictionary dictionary] retain];
    {
        SEL s = @selector(process_registerMe_withSequenceID:inProtocol:outProtocol:);
        NSMethodSignature * sig = [self methodSignatureForSelector: s];
        NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
        [invocation setSelector: s];
        [invocation retainArguments];
        [mMethodMap setValue: invocation forKey: @"registerMe"];
    }
    {
        SEL s = @selector(process_uploadSample_withSequenceID:inProtocol:outProtocol:);
        NSMethodSignature * sig = [self methodSignatureForSelector: s];
        NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
        [invocation setSelector: s];
        [invocation retainArguments];
        [mMethodMap setValue: invocation forKey: @"uploadSample"];
    }
    {
        SEL s = @selector(process_getReports_withSequenceID:inProtocol:outProtocol:);
        NSMethodSignature * sig = [self methodSignatureForSelector: s];
        NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
        [invocation setSelector: s];
        [invocation retainArguments];
        [mMethodMap setValue: invocation forKey: @"getReports"];
    }
    {
        SEL s = @selector(process_getHogOrBugReport_withSequenceID:inProtocol:outProtocol:);
        NSMethodSignature * sig = [self methodSignatureForSelector: s];
        NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
        [invocation setSelector: s];
        [invocation retainArguments];
        [mMethodMap setValue: invocation forKey: @"getHogOrBugReport"];
    }
    {
        SEL s = @selector(process_getQuickHogsAndMaybeRegister_withSequenceID:inProtocol:outProtocol:);
        NSMethodSignature * sig = [self methodSignatureForSelector: s];
        NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
        [invocation setSelector: s];
        [invocation retainArguments];
        [mMethodMap setValue: invocation forKey: @"getQuickHogsAndMaybeRegister"];
    }
    return self;
}

- (id<CaratService>) service
{
    return [[mService retain] autorelease];
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
{
    NSString * messageName;
    int messageType;
    int seqID;
    [inProtocol readMessageBeginReturningName: &messageName
                                         type: &messageType
                                   sequenceID: &seqID];
    NSInvocation * invocation = [mMethodMap valueForKey: messageName];
    if (invocation == nil) {
        [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
        [inProtocol readMessageEnd];
        TApplicationException * x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [NSString stringWithFormat: @"Invalid method name: '%@'", messageName]];
        [outProtocol writeMessageBeginWithName: messageName
                                          type: TMessageType_EXCEPTION
                                    sequenceID: seqID];
        [x write: outProtocol];
        [outProtocol writeMessageEnd];
        [[outProtocol transport] flush];
        return YES;
    }
    // NSInvocation does not conform to NSCopying protocol
    NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
    [i setSelector: [invocation selector]];
    [i setArgument: &seqID atIndex: 2];
    [i setArgument: &inProtocol atIndex: 3];
    [i setArgument: &outProtocol atIndex: 4];
    [i setTarget: self];
    [i invoke];
    return YES;
}

- (void) process_uploadSample_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
    uploadSample_args * args = [[uploadSample_args alloc] init];
    [args read: inProtocol];
    [inProtocol readMessageEnd];
    UploadSample_result * result = [[UploadSample_result alloc] init];
    [result setSuccess: [mService uploadSample: [args sample]]];
    [outProtocol writeMessageBeginWithName: @"uploadSample"
                                      type: TMessageType_REPLY
                                sequenceID: seqID];
    [result write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    [result release];
    [args release];
}

- (void) process_getReports_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
    getReports_args * args = [[getReports_args alloc] init];
    [args read: inProtocol];
    [inProtocol readMessageEnd];
    GetReports_result * result = [[GetReports_result alloc] init];
    [result setSuccess: [mService getReports: [args uuId]: [args features]]];
    [outProtocol writeMessageBeginWithName: @"getReports"
                                      type: TMessageType_REPLY
                                sequenceID: seqID];
    [result write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    [result release];
    [args release];
}

- (void) process_getHogOrBugReport_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
    getHogOrBugReport_args * args = [[getHogOrBugReport_args alloc] init];
    [args read: inProtocol];
    [inProtocol readMessageEnd];
    GetHogOrBugReport_result * result = [[GetHogOrBugReport_result alloc] init];
    [result setSuccess: [mService getHogOrBugReport: [args uuId]: [args features]]];
    [outProtocol writeMessageBeginWithName: @"getHogOrBugReport"
                                      type: TMessageType_REPLY
                                sequenceID: seqID];
    [result write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    [result release];
    [args release];
}

- (void) process_getQuickHogsAndMaybeRegister_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
    getQuickHogsAndMaybeRegister_args * args = [[getQuickHogsAndMaybeRegister_args alloc] init];
    [args read: inProtocol];
    [inProtocol readMessageEnd];
    GetQuickHogsAndMaybeRegister_result * result = [[GetQuickHogsAndMaybeRegister_result alloc] init];
    [result setSuccess: [mService getQuickHogsAndMaybeRegister: [args registration]: [args processList]]];
    [outProtocol writeMessageBeginWithName: @"getQuickHogsAndMaybeRegister"
                                      type: TMessageType_REPLY
                                sequenceID: seqID];
    [result write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    [result release];
    [args release];
}

- (void) dealloc
{
    [mService release];
    [mMethodMap release];
    [super dealloc];
}

@end


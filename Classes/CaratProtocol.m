/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */

#import <Foundation/Foundation.h>

#import "Thrift/protocol/TProtocol.h"
#import "Thrift/TApplicationException.h"
#import "Thrift/protocol/TProtocolUtil.h"
#import "Thrift/TProcessor.h"


#import "CaratProtocol.h"


@implementation CaratProtocolConstants
+ (void) initialize {
}
@end

@implementation Registration

- (id) initWithUuId: (NSString *) uuId platformId: (NSString *) platformId systemVersion: (NSString *) systemVersion
{
  self = [super init];
  __uuId = [uuId retain];
  __uuId_isset = YES;
  __platformId = [platformId retain];
  __platformId_isset = YES;
  __systemVersion = [systemVersion retain];
  __systemVersion_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"uuId"])
  {
    __uuId = [[decoder decodeObjectForKey: @"uuId"] retain];
    __uuId_isset = YES;
  }
  if ([decoder containsValueForKey: @"platformId"])
  {
    __platformId = [[decoder decodeObjectForKey: @"platformId"] retain];
    __platformId_isset = YES;
  }
  if ([decoder containsValueForKey: @"systemVersion"])
  {
    __systemVersion = [[decoder decodeObjectForKey: @"systemVersion"] retain];
    __systemVersion_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__uuId_isset)
  {
    [encoder encodeObject: __uuId forKey: @"uuId"];
  }
  if (__platformId_isset)
  {
    [encoder encodeObject: __platformId forKey: @"platformId"];
  }
  if (__systemVersion_isset)
  {
    [encoder encodeObject: __systemVersion forKey: @"systemVersion"];
  }
}

- (void) dealloc
{
  [__uuId release];
  [__platformId release];
  [__systemVersion release];
  [super dealloc];
}

- (NSString *) uuId {
  return [[__uuId retain] autorelease];
}

- (void) setUuId: (NSString *) uuId {
  [uuId retain];
  [__uuId release];
  __uuId = uuId;
  __uuId_isset = YES;
}

- (BOOL) uuIdIsSet {
  return __uuId_isset;
}

- (void) unsetUuId {
  [__uuId release];
  __uuId = nil;
  __uuId_isset = NO;
}

- (NSString *) platformId {
  return [[__platformId retain] autorelease];
}

- (void) setPlatformId: (NSString *) platformId {
  [platformId retain];
  [__platformId release];
  __platformId = platformId;
  __platformId_isset = YES;
}

- (BOOL) platformIdIsSet {
  return __platformId_isset;
}

- (void) unsetPlatformId {
  [__platformId release];
  __platformId = nil;
  __platformId_isset = NO;
}

- (NSString *) systemVersion {
  return [[__systemVersion retain] autorelease];
}

- (void) setSystemVersion: (NSString *) systemVersion {
  [systemVersion retain];
  [__systemVersion release];
  __systemVersion = systemVersion;
  __systemVersion_isset = YES;
}

- (BOOL) systemVersionIsSet {
  return __systemVersion_isset;
}

- (void) unsetSystemVersion {
  [__systemVersion release];
  __systemVersion = nil;
  __systemVersion_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUuId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPlatformId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSystemVersion: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Registration"];
  if (__uuId_isset) {
    if (__uuId != nil) {
      [outProtocol writeFieldBeginWithName: @"uuId" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __uuId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__platformId_isset) {
    if (__platformId != nil) {
      [outProtocol writeFieldBeginWithName: @"platformId" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __platformId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__systemVersion_isset) {
    if (__systemVersion != nil) {
      [outProtocol writeFieldBeginWithName: @"systemVersion" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __systemVersion];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Registration("];
  [ms appendString: @"uuId:"];
  [ms appendFormat: @"\"%@\"", __uuId];
  [ms appendString: @",platformId:"];
  [ms appendFormat: @"\"%@\"", __platformId];
  [ms appendString: @",systemVersion:"];
  [ms appendFormat: @"\"%@\"", __systemVersion];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation ProcessInfo

- (id) initWithPId: (int32_t) pId pName: (NSString *) pName
{
  self = [super init];
  __pId = pId;
  __pId_isset = YES;
  __pName = [pName retain];
  __pName_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"pId"])
  {
    __pId = [decoder decodeInt32ForKey: @"pId"];
    __pId_isset = YES;
  }
  if ([decoder containsValueForKey: @"pName"])
  {
    __pName = [[decoder decodeObjectForKey: @"pName"] retain];
    __pName_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__pId_isset)
  {
    [encoder encodeInt32: __pId forKey: @"pId"];
  }
  if (__pName_isset)
  {
    [encoder encodeObject: __pName forKey: @"pName"];
  }
}

- (void) dealloc
{
  [__pName release];
  [super dealloc];
}

- (int32_t) pId {
  return __pId;
}

- (void) setPId: (int32_t) pId {
  __pId = pId;
  __pId_isset = YES;
}

- (BOOL) pIdIsSet {
  return __pId_isset;
}

- (void) unsetPId {
  __pId_isset = NO;
}

- (NSString *) pName {
  return [[__pName retain] autorelease];
}

- (void) setPName: (NSString *) pName {
  [pName retain];
  [__pName release];
  __pName = pName;
  __pName_isset = YES;
}

- (BOOL) pNameIsSet {
  return __pName_isset;
}

- (void) unsetPName {
  [__pName release];
  __pName = nil;
  __pName_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setPId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ProcessInfo"];
  if (__pId_isset) {
    [outProtocol writeFieldBeginWithName: @"pId" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __pId];
    [outProtocol writeFieldEnd];
  }
  if (__pName_isset) {
    if (__pName != nil) {
      [outProtocol writeFieldBeginWithName: @"pName" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __pName];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ProcessInfo("];
  [ms appendString: @"pId:"];
  [ms appendFormat: @"%i", __pId];
  [ms appendString: @",pName:"];
  [ms appendFormat: @"\"%@\"", __pName];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation Sample

- (id) initWithUuId: (NSString *) uuId piList: (ProcessInfoList) piList
{
  self = [super init];
  __uuId = [uuId retain];
  __uuId_isset = YES;
  __piList = [piList retain];
  __piList_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"uuId"])
  {
    __uuId = [[decoder decodeObjectForKey: @"uuId"] retain];
    __uuId_isset = YES;
  }
  if ([decoder containsValueForKey: @"piList"])
  {
    __piList = [[decoder decodeObjectForKey: @"piList"] retain];
    __piList_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__uuId_isset)
  {
    [encoder encodeObject: __uuId forKey: @"uuId"];
  }
  if (__piList_isset)
  {
    [encoder encodeObject: __piList forKey: @"piList"];
  }
}

- (void) dealloc
{
  [__uuId release];
  [__piList release];
  [super dealloc];
}

- (NSString *) uuId {
  return [[__uuId retain] autorelease];
}

- (void) setUuId: (NSString *) uuId {
  [uuId retain];
  [__uuId release];
  __uuId = uuId;
  __uuId_isset = YES;
}

- (BOOL) uuIdIsSet {
  return __uuId_isset;
}

- (void) unsetUuId {
  [__uuId release];
  __uuId = nil;
  __uuId_isset = NO;
}

- (NSArray *) piList {
  return [[__piList retain] autorelease];
}

- (void) setPiList: (NSArray *) piList {
  [piList retain];
  [__piList release];
  __piList = piList;
  __piList_isset = YES;
}

- (BOOL) piListIsSet {
  return __piList_isset;
}

- (void) unsetPiList {
  [__piList release];
  __piList = nil;
  __piList_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUuId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_LIST) {
          int _size0;
          [inProtocol readListBeginReturningElementType: NULL size: &_size0];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size0];
          int _i1;
          for (_i1 = 0; _i1 < _size0; ++_i1)
          {
            ProcessInfo *_elem2 = [[ProcessInfo alloc] init];
            [_elem2 read: inProtocol];
            [fieldValue addObject: _elem2];
            [_elem2 release];
          }
          [inProtocol readListEnd];
          [self setPiList: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Sample"];
  if (__uuId_isset) {
    if (__uuId != nil) {
      [outProtocol writeFieldBeginWithName: @"uuId" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __uuId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__piList_isset) {
    if (__piList != nil) {
      [outProtocol writeFieldBeginWithName: @"piList" type: TType_LIST fieldID: 2];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__piList count]];
        int i4;
        for (i4 = 0; i4 < [__piList count]; i4++)
        {
          [[__piList objectAtIndex: i4] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Sample("];
  [ms appendString: @"uuId:"];
  [ms appendFormat: @"\"%@\"", __uuId];
  [ms appendString: @",piList:"];
  [ms appendFormat: @"%@", __piList];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface registerMe_args : NSObject <NSCoding> {
  Registration * __registration;

  BOOL __registration_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=registration, setter=setRegistration:) Registration * registration;
#endif

- (id) initWithRegistration: (Registration *) registration;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (Registration *) registration;
- (void) setRegistration: (Registration *) registration;
- (BOOL) registrationIsSet;

@end

@implementation registerMe_args

- (id) initWithRegistration: (Registration *) registration
{
  self = [super init];
  __registration = [registration retain];
  __registration_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"registration"])
  {
    __registration = [[decoder decodeObjectForKey: @"registration"] retain];
    __registration_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__registration_isset)
  {
    [encoder encodeObject: __registration forKey: @"registration"];
  }
}

- (void) dealloc
{
  [__registration release];
  [super dealloc];
}

- (Registration *) registration {
  return [[__registration retain] autorelease];
}

- (void) setRegistration: (Registration *) registration {
  [registration retain];
  [__registration release];
  __registration = registration;
  __registration_isset = YES;
}

- (BOOL) registrationIsSet {
  return __registration_isset;
}

- (void) unsetRegistration {
  [__registration release];
  __registration = nil;
  __registration_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          Registration *fieldValue = [[Registration alloc] init];
          [fieldValue read: inProtocol];
          [self setRegistration: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"registerMe_args"];
  if (__registration_isset) {
    if (__registration != nil) {
      [outProtocol writeFieldBeginWithName: @"registration" type: TType_STRUCT fieldID: 1];
      [__registration write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"registerMe_args("];
  [ms appendString: @"registration:"];
  [ms appendFormat: @"%@", __registration];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface uploadSample_args : NSObject <NSCoding> {
  Sample * __sample;

  BOOL __sample_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=sample, setter=setSample:) Sample * sample;
#endif

- (id) initWithSample: (Sample *) sample;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (Sample *) sample;
- (void) setSample: (Sample *) sample;
- (BOOL) sampleIsSet;

@end

@implementation uploadSample_args

- (id) initWithSample: (Sample *) sample
{
  self = [super init];
  __sample = [sample retain];
  __sample_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"sample"])
  {
    __sample = [[decoder decodeObjectForKey: @"sample"] retain];
    __sample_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__sample_isset)
  {
    [encoder encodeObject: __sample forKey: @"sample"];
  }
}

- (void) dealloc
{
  [__sample release];
  [super dealloc];
}

- (Sample *) sample {
  return [[__sample retain] autorelease];
}

- (void) setSample: (Sample *) sample {
  [sample retain];
  [__sample release];
  __sample = sample;
  __sample_isset = YES;
}

- (BOOL) sampleIsSet {
  return __sample_isset;
}

- (void) unsetSample {
  [__sample release];
  __sample = nil;
  __sample_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          Sample *fieldValue = [[Sample alloc] init];
          [fieldValue read: inProtocol];
          [self setSample: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"uploadSample_args"];
  if (__sample_isset) {
    if (__sample != nil) {
      [outProtocol writeFieldBeginWithName: @"sample" type: TType_STRUCT fieldID: 1];
      [__sample write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"uploadSample_args("];
  [ms appendString: @"sample:"];
  [ms appendFormat: @"%@", __sample];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface UploadSample_result : NSObject <NSCoding> {
  BOOL __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) BOOL success;
#endif

- (id) initWithSuccess: (BOOL) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (BOOL) success;
- (void) setSuccess: (BOOL) success;
- (BOOL) successIsSet;

@end

@implementation UploadSample_result

- (id) initWithSuccess: (BOOL) success
{
  self = [super init];
  __success = success;
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [decoder decodeBoolForKey: @"success"];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeBool: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [super dealloc];
}

- (BOOL) success {
  return __success;
}

- (void) setSuccess: (BOOL) success {
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"UploadSample_result"];

  if (__success_isset) {
    [outProtocol writeFieldBeginWithName: @"success" type: TType_BOOL fieldID: 0];
    [outProtocol writeBool: __success];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"UploadSample_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%i", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation CaratServiceClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
  return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
  [super init];
  inProtocol = [anInProtocol retain];
  outProtocol = [anOutProtocol retain];
  return self;
}

- (void) dealloc
{
  [inProtocol release];
  [outProtocol release];
  [super dealloc];
}

- (void) send_registerMe: (Registration *) registration
{
  [outProtocol writeMessageBeginWithName: @"registerMe" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"registerMe_args"];
  if (registration != nil)  {
    [outProtocol writeFieldBeginWithName: @"registration" type: TType_STRUCT fieldID: 1];
    [registration write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (void) registerMe: (Registration *) registration
{
  [self send_registerMe: registration];
}

- (void) send_uploadSample: (Sample *) sample
{
  [outProtocol writeMessageBeginWithName: @"uploadSample" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"uploadSample_args"];
  if (sample != nil)  {
    [outProtocol writeFieldBeginWithName: @"sample" type: TType_STRUCT fieldID: 1];
    [sample write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (BOOL) recv_uploadSample
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  UploadSample_result * result = [[[UploadSample_result alloc] init] autorelease];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"uploadSample failed: unknown result"];
}

- (BOOL) uploadSample: (Sample *) sample
{
  [self send_uploadSample: sample];
  return [self recv_uploadSample];
}

@end

@implementation CaratServiceProcessor

- (id) initWithCaratService: (id <CaratService>) service
{
  self = [super init];
  if (!self) {
    return nil;
  }
  mService = [service retain];
  mMethodMap = [[NSMutableDictionary dictionary] retain];
  {
    SEL s = @selector(process_registerMe_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"registerMe"];
  }
  {
    SEL s = @selector(process_uploadSample_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"uploadSample"];
  }
  return self;
}

- (id<CaratService>) service
{
  return [[mService retain] autorelease];
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
{
  NSString * messageName;
  int messageType;
  int seqID;
  [inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID];
  NSInvocation * invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    TApplicationException * x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [NSString stringWithFormat: @"Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) process_uploadSample_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  uploadSample_args * args = [[uploadSample_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  UploadSample_result * result = [[UploadSample_result alloc] init];
  [result setSuccess: [mService uploadSample: [args sample]]];
  [outProtocol writeMessageBeginWithName: @"uploadSample"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release];
  [args release];
}

- (void) dealloc
{
  [mService release];
  [mMethodMap release];
  [super dealloc];
}

@end


/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */

#import <Foundation/Foundation.h>

#import "Thrift/protocol/TProtocol.h"
#import "Thrift/TApplicationException.h"
#import "Thrift/protocol/TProtocolUtil.h"
#import "Thrift/TProcessor.h"

#import "CaratProtocol.h"


@implementation CaratProtocolConstants
+ (void) initialize {
}
@end

@implementation Registration

- (id) initWithUuId: (NSString *) uuId timestamp: (double) timestamp platformId: (NSString *) platformId systemVersion: (NSString *) systemVersion
{
  self = [super init];
  __uuId = [uuId retain];
  __uuId_isset = YES;
  __timestamp = timestamp;
  __timestamp_isset = YES;
  __platformId = [platformId retain];
  __platformId_isset = YES;
  __systemVersion = [systemVersion retain];
  __systemVersion_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"uuId"])
  {
    __uuId = [[decoder decodeObjectForKey: @"uuId"] retain];
    __uuId_isset = YES;
  }
  if ([decoder containsValueForKey: @"timestamp"])
  {
    __timestamp = [decoder decodeDoubleForKey: @"timestamp"];
    __timestamp_isset = YES;
  }
  if ([decoder containsValueForKey: @"platformId"])
  {
    __platformId = [[decoder decodeObjectForKey: @"platformId"] retain];
    __platformId_isset = YES;
  }
  if ([decoder containsValueForKey: @"systemVersion"])
  {
    __systemVersion = [[decoder decodeObjectForKey: @"systemVersion"] retain];
    __systemVersion_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__uuId_isset)
  {
    [encoder encodeObject: __uuId forKey: @"uuId"];
  }
  if (__timestamp_isset)
  {
    [encoder encodeDouble: __timestamp forKey: @"timestamp"];
  }
  if (__platformId_isset)
  {
    [encoder encodeObject: __platformId forKey: @"platformId"];
  }
  if (__systemVersion_isset)
  {
    [encoder encodeObject: __systemVersion forKey: @"systemVersion"];
  }
}

- (void) dealloc
{
  [__uuId release];
  [__platformId release];
  [__systemVersion release];
  [super dealloc];
}

- (NSString *) uuId {
  return [[__uuId retain] autorelease];
}

- (void) setUuId: (NSString *) uuId {
  [uuId retain];
  [__uuId release];
  __uuId = uuId;
  __uuId_isset = YES;
}

- (BOOL) uuIdIsSet {
  return __uuId_isset;
}

- (void) unsetUuId {
  [__uuId release];
  __uuId = nil;
  __uuId_isset = NO;
}

- (double) timestamp {
  return __timestamp;
}

- (void) setTimestamp: (double) timestamp {
  __timestamp = timestamp;
  __timestamp_isset = YES;
}

- (BOOL) timestampIsSet {
  return __timestamp_isset;
}

- (void) unsetTimestamp {
  __timestamp_isset = NO;
}

- (NSString *) platformId {
  return [[__platformId retain] autorelease];
}

- (void) setPlatformId: (NSString *) platformId {
  [platformId retain];
  [__platformId release];
  __platformId = platformId;
  __platformId_isset = YES;
}

- (BOOL) platformIdIsSet {
  return __platformId_isset;
}

- (void) unsetPlatformId {
  [__platformId release];
  __platformId = nil;
  __platformId_isset = NO;
}

- (NSString *) systemVersion {
  return [[__systemVersion retain] autorelease];
}

- (void) setSystemVersion: (NSString *) systemVersion {
  [systemVersion retain];
  [__systemVersion release];
  __systemVersion = systemVersion;
  __systemVersion_isset = YES;
}

- (BOOL) systemVersionIsSet {
  return __systemVersion_isset;
}

- (void) unsetSystemVersion {
  [__systemVersion release];
  __systemVersion = nil;
  __systemVersion_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUuId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setTimestamp: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPlatformId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSystemVersion: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Registration"];
  if (__uuId_isset) {
    if (__uuId != nil) {
      [outProtocol writeFieldBeginWithName: @"uuId" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __uuId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__timestamp_isset) {
    [outProtocol writeFieldBeginWithName: @"timestamp" type: TType_DOUBLE fieldID: 2];
    [outProtocol writeDouble: __timestamp];
    [outProtocol writeFieldEnd];
  }
  if (__platformId_isset) {
    if (__platformId != nil) {
      [outProtocol writeFieldBeginWithName: @"platformId" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __platformId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__systemVersion_isset) {
    if (__systemVersion != nil) {
      [outProtocol writeFieldBeginWithName: @"systemVersion" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __systemVersion];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Registration("];
  [ms appendString: @"uuId:"];
  [ms appendFormat: @"\"%@\"", __uuId];
  [ms appendString: @",timestamp:"];
  [ms appendFormat: @"%f", __timestamp];
  [ms appendString: @",platformId:"];
  [ms appendFormat: @"\"%@\"", __platformId];
  [ms appendString: @",systemVersion:"];
  [ms appendFormat: @"\"%@\"", __systemVersion];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation ProcessInfo

- (id) initWithPId: (int32_t) pId pName: (NSString *) pName
{
  self = [super init];
  __pId = pId;
  __pId_isset = YES;
  __pName = [pName retain];
  __pName_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"pId"])
  {
    __pId = [decoder decodeInt32ForKey: @"pId"];
    __pId_isset = YES;
  }
  if ([decoder containsValueForKey: @"pName"])
  {
    __pName = [[decoder decodeObjectForKey: @"pName"] retain];
    __pName_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__pId_isset)
  {
    [encoder encodeInt32: __pId forKey: @"pId"];
  }
  if (__pName_isset)
  {
    [encoder encodeObject: __pName forKey: @"pName"];
  }
}

- (void) dealloc
{
  [__pName release];
  [super dealloc];
}

- (int32_t) pId {
  return __pId;
}

- (void) setPId: (int32_t) pId {
  __pId = pId;
  __pId_isset = YES;
}

- (BOOL) pIdIsSet {
  return __pId_isset;
}

- (void) unsetPId {
  __pId_isset = NO;
}

- (NSString *) pName {
  return [[__pName retain] autorelease];
}

- (void) setPName: (NSString *) pName {
  [pName retain];
  [__pName release];
  __pName = pName;
  __pName_isset = YES;
}

- (BOOL) pNameIsSet {
  return __pName_isset;
}

- (void) unsetPName {
  [__pName release];
  __pName = nil;
  __pName_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setPId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ProcessInfo"];
  if (__pId_isset) {
    [outProtocol writeFieldBeginWithName: @"pId" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __pId];
    [outProtocol writeFieldEnd];
  }
  if (__pName_isset) {
    if (__pName != nil) {
      [outProtocol writeFieldBeginWithName: @"pName" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __pName];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ProcessInfo("];
  [ms appendString: @"pId:"];
  [ms appendFormat: @"%i", __pId];
  [ms appendString: @",pName:"];
  [ms appendFormat: @"\"%@\"", __pName];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation Sample

- (id) initWithUuId: (NSString *) uuId timestamp: (double) timestamp piList: (ProcessInfoList) piList batteryState: (NSString *) batteryState batteryLevel: (double) batteryLevel memoryWired: (int32_t) memoryWired memoryActive: (int32_t) memoryActive memoryInactive: (int32_t) memoryInactive memoryFree: (int32_t) memoryFree memoryUser: (int32_t) memoryUser triggeredBy: (NSString *) triggeredBy
{
  self = [super init];
  __uuId = [uuId retain];
  __uuId_isset = YES;
  __timestamp = timestamp;
  __timestamp_isset = YES;
  __piList = [piList retain];
  __piList_isset = YES;
  __batteryState = [batteryState retain];
  __batteryState_isset = YES;
  __batteryLevel = batteryLevel;
  __batteryLevel_isset = YES;
  __memoryWired = memoryWired;
  __memoryWired_isset = YES;
  __memoryActive = memoryActive;
  __memoryActive_isset = YES;
  __memoryInactive = memoryInactive;
  __memoryInactive_isset = YES;
  __memoryFree = memoryFree;
  __memoryFree_isset = YES;
  __memoryUser = memoryUser;
  __memoryUser_isset = YES;
  __triggeredBy = [triggeredBy retain];
  __triggeredBy_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"uuId"])
  {
    __uuId = [[decoder decodeObjectForKey: @"uuId"] retain];
    __uuId_isset = YES;
  }
  if ([decoder containsValueForKey: @"timestamp"])
  {
    __timestamp = [decoder decodeDoubleForKey: @"timestamp"];
    __timestamp_isset = YES;
  }
  if ([decoder containsValueForKey: @"piList"])
  {
    __piList = [[decoder decodeObjectForKey: @"piList"] retain];
    __piList_isset = YES;
  }
  if ([decoder containsValueForKey: @"batteryState"])
  {
    __batteryState = [[decoder decodeObjectForKey: @"batteryState"] retain];
    __batteryState_isset = YES;
  }
  if ([decoder containsValueForKey: @"batteryLevel"])
  {
    __batteryLevel = [decoder decodeDoubleForKey: @"batteryLevel"];
    __batteryLevel_isset = YES;
  }
  if ([decoder containsValueForKey: @"memoryWired"])
  {
    __memoryWired = [decoder decodeInt32ForKey: @"memoryWired"];
    __memoryWired_isset = YES;
  }
  if ([decoder containsValueForKey: @"memoryActive"])
  {
    __memoryActive = [decoder decodeInt32ForKey: @"memoryActive"];
    __memoryActive_isset = YES;
  }
  if ([decoder containsValueForKey: @"memoryInactive"])
  {
    __memoryInactive = [decoder decodeInt32ForKey: @"memoryInactive"];
    __memoryInactive_isset = YES;
  }
  if ([decoder containsValueForKey: @"memoryFree"])
  {
    __memoryFree = [decoder decodeInt32ForKey: @"memoryFree"];
    __memoryFree_isset = YES;
  }
  if ([decoder containsValueForKey: @"memoryUser"])
  {
    __memoryUser = [decoder decodeInt32ForKey: @"memoryUser"];
    __memoryUser_isset = YES;
  }
  if ([decoder containsValueForKey: @"triggeredBy"])
  {
    __triggeredBy = [[decoder decodeObjectForKey: @"triggeredBy"] retain];
    __triggeredBy_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__uuId_isset)
  {
    [encoder encodeObject: __uuId forKey: @"uuId"];
  }
  if (__timestamp_isset)
  {
    [encoder encodeDouble: __timestamp forKey: @"timestamp"];
  }
  if (__piList_isset)
  {
    [encoder encodeObject: __piList forKey: @"piList"];
  }
  if (__batteryState_isset)
  {
    [encoder encodeObject: __batteryState forKey: @"batteryState"];
  }
  if (__batteryLevel_isset)
  {
    [encoder encodeDouble: __batteryLevel forKey: @"batteryLevel"];
  }
  if (__memoryWired_isset)
  {
    [encoder encodeInt32: __memoryWired forKey: @"memoryWired"];
  }
  if (__memoryActive_isset)
  {
    [encoder encodeInt32: __memoryActive forKey: @"memoryActive"];
  }
  if (__memoryInactive_isset)
  {
    [encoder encodeInt32: __memoryInactive forKey: @"memoryInactive"];
  }
  if (__memoryFree_isset)
  {
    [encoder encodeInt32: __memoryFree forKey: @"memoryFree"];
  }
  if (__memoryUser_isset)
  {
    [encoder encodeInt32: __memoryUser forKey: @"memoryUser"];
  }
  if (__triggeredBy_isset)
  {
    [encoder encodeObject: __triggeredBy forKey: @"triggeredBy"];
  }
}

- (void) dealloc
{
  [__uuId release];
  [__piList release];
  [__batteryState release];
  [__triggeredBy release];
  [super dealloc];
}

- (NSString *) uuId {
  return [[__uuId retain] autorelease];
}

- (void) setUuId: (NSString *) uuId {
  [uuId retain];
  [__uuId release];
  __uuId = uuId;
  __uuId_isset = YES;
}

- (BOOL) uuIdIsSet {
  return __uuId_isset;
}

- (void) unsetUuId {
  [__uuId release];
  __uuId = nil;
  __uuId_isset = NO;
}

- (double) timestamp {
  return __timestamp;
}

- (void) setTimestamp: (double) timestamp {
  __timestamp = timestamp;
  __timestamp_isset = YES;
}

- (BOOL) timestampIsSet {
  return __timestamp_isset;
}

- (void) unsetTimestamp {
  __timestamp_isset = NO;
}

- (NSArray *) piList {
  return [[__piList retain] autorelease];
}

- (void) setPiList: (NSArray *) piList {
  [piList retain];
  [__piList release];
  __piList = piList;
  __piList_isset = YES;
}

- (BOOL) piListIsSet {
  return __piList_isset;
}

- (void) unsetPiList {
  [__piList release];
  __piList = nil;
  __piList_isset = NO;
}

- (NSString *) batteryState {
  return [[__batteryState retain] autorelease];
}

- (void) setBatteryState: (NSString *) batteryState {
  [batteryState retain];
  [__batteryState release];
  __batteryState = batteryState;
  __batteryState_isset = YES;
}

- (BOOL) batteryStateIsSet {
  return __batteryState_isset;
}

- (void) unsetBatteryState {
  [__batteryState release];
  __batteryState = nil;
  __batteryState_isset = NO;
}

- (double) batteryLevel {
  return __batteryLevel;
}

- (void) setBatteryLevel: (double) batteryLevel {
  __batteryLevel = batteryLevel;
  __batteryLevel_isset = YES;
}

- (BOOL) batteryLevelIsSet {
  return __batteryLevel_isset;
}

- (void) unsetBatteryLevel {
  __batteryLevel_isset = NO;
}

- (int32_t) memoryWired {
  return __memoryWired;
}

- (void) setMemoryWired: (int32_t) memoryWired {
  __memoryWired = memoryWired;
  __memoryWired_isset = YES;
}

- (BOOL) memoryWiredIsSet {
  return __memoryWired_isset;
}

- (void) unsetMemoryWired {
  __memoryWired_isset = NO;
}

- (int32_t) memoryActive {
  return __memoryActive;
}

- (void) setMemoryActive: (int32_t) memoryActive {
  __memoryActive = memoryActive;
  __memoryActive_isset = YES;
}

- (BOOL) memoryActiveIsSet {
  return __memoryActive_isset;
}

- (void) unsetMemoryActive {
  __memoryActive_isset = NO;
}

- (int32_t) memoryInactive {
  return __memoryInactive;
}

- (void) setMemoryInactive: (int32_t) memoryInactive {
  __memoryInactive = memoryInactive;
  __memoryInactive_isset = YES;
}

- (BOOL) memoryInactiveIsSet {
  return __memoryInactive_isset;
}

- (void) unsetMemoryInactive {
  __memoryInactive_isset = NO;
}

- (int32_t) memoryFree {
  return __memoryFree;
}

- (void) setMemoryFree: (int32_t) memoryFree {
  __memoryFree = memoryFree;
  __memoryFree_isset = YES;
}

- (BOOL) memoryFreeIsSet {
  return __memoryFree_isset;
}

- (void) unsetMemoryFree {
  __memoryFree_isset = NO;
}

- (int32_t) memoryUser {
  return __memoryUser;
}

- (void) setMemoryUser: (int32_t) memoryUser {
  __memoryUser = memoryUser;
  __memoryUser_isset = YES;
}

- (BOOL) memoryUserIsSet {
  return __memoryUser_isset;
}

- (void) unsetMemoryUser {
  __memoryUser_isset = NO;
}

- (NSString *) triggeredBy {
  return [[__triggeredBy retain] autorelease];
}

- (void) setTriggeredBy: (NSString *) triggeredBy {
  [triggeredBy retain];
  [__triggeredBy release];
  __triggeredBy = triggeredBy;
  __triggeredBy_isset = YES;
}

- (BOOL) triggeredByIsSet {
  return __triggeredBy_isset;
}

- (void) unsetTriggeredBy {
  [__triggeredBy release];
  __triggeredBy = nil;
  __triggeredBy_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUuId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setTimestamp: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_LIST) {
          int _size0;
          [inProtocol readListBeginReturningElementType: NULL size: &_size0];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size0];
          int _i1;
          for (_i1 = 0; _i1 < _size0; ++_i1)
          {
            ProcessInfo *_elem2 = [[ProcessInfo alloc] init];
            [_elem2 read: inProtocol];
            [fieldValue addObject: _elem2];
            [_elem2 release];
          }
          [inProtocol readListEnd];
          [self setPiList: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setBatteryState: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setBatteryLevel: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setMemoryWired: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setMemoryActive: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setMemoryInactive: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setMemoryFree: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 10:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setMemoryUser: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 11:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setTriggeredBy: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Sample"];
  if (__uuId_isset) {
    if (__uuId != nil) {
      [outProtocol writeFieldBeginWithName: @"uuId" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __uuId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__timestamp_isset) {
    [outProtocol writeFieldBeginWithName: @"timestamp" type: TType_DOUBLE fieldID: 2];
    [outProtocol writeDouble: __timestamp];
    [outProtocol writeFieldEnd];
  }
  if (__piList_isset) {
    if (__piList != nil) {
      [outProtocol writeFieldBeginWithName: @"piList" type: TType_LIST fieldID: 3];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__piList count]];
        int i4;
        for (i4 = 0; i4 < [__piList count]; i4++)
        {
          [[__piList objectAtIndex: i4] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__batteryState_isset) {
    if (__batteryState != nil) {
      [outProtocol writeFieldBeginWithName: @"batteryState" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __batteryState];
      [outProtocol writeFieldEnd];
    }
  }
  if (__batteryLevel_isset) {
    [outProtocol writeFieldBeginWithName: @"batteryLevel" type: TType_DOUBLE fieldID: 5];
    [outProtocol writeDouble: __batteryLevel];
    [outProtocol writeFieldEnd];
  }
  if (__memoryWired_isset) {
    [outProtocol writeFieldBeginWithName: @"memoryWired" type: TType_I32 fieldID: 6];
    [outProtocol writeI32: __memoryWired];
    [outProtocol writeFieldEnd];
  }
  if (__memoryActive_isset) {
    [outProtocol writeFieldBeginWithName: @"memoryActive" type: TType_I32 fieldID: 7];
    [outProtocol writeI32: __memoryActive];
    [outProtocol writeFieldEnd];
  }
  if (__memoryInactive_isset) {
    [outProtocol writeFieldBeginWithName: @"memoryInactive" type: TType_I32 fieldID: 8];
    [outProtocol writeI32: __memoryInactive];
    [outProtocol writeFieldEnd];
  }
  if (__memoryFree_isset) {
    [outProtocol writeFieldBeginWithName: @"memoryFree" type: TType_I32 fieldID: 9];
    [outProtocol writeI32: __memoryFree];
    [outProtocol writeFieldEnd];
  }
  if (__memoryUser_isset) {
    [outProtocol writeFieldBeginWithName: @"memoryUser" type: TType_I32 fieldID: 10];
    [outProtocol writeI32: __memoryUser];
    [outProtocol writeFieldEnd];
  }
  if (__triggeredBy_isset) {
    if (__triggeredBy != nil) {
      [outProtocol writeFieldBeginWithName: @"triggeredBy" type: TType_STRING fieldID: 11];
      [outProtocol writeString: __triggeredBy];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Sample("];
  [ms appendString: @"uuId:"];
  [ms appendFormat: @"\"%@\"", __uuId];
  [ms appendString: @",timestamp:"];
  [ms appendFormat: @"%f", __timestamp];
  [ms appendString: @",piList:"];
  [ms appendFormat: @"%@", __piList];
  [ms appendString: @",batteryState:"];
  [ms appendFormat: @"\"%@\"", __batteryState];
  [ms appendString: @",batteryLevel:"];
  [ms appendFormat: @"%f", __batteryLevel];
  [ms appendString: @",memoryWired:"];
  [ms appendFormat: @"%i", __memoryWired];
  [ms appendString: @",memoryActive:"];
  [ms appendFormat: @"%i", __memoryActive];
  [ms appendString: @",memoryInactive:"];
  [ms appendFormat: @"%i", __memoryInactive];
  [ms appendString: @",memoryFree:"];
  [ms appendFormat: @"%i", __memoryFree];
  [ms appendString: @",memoryUser:"];
  [ms appendFormat: @"%i", __memoryUser];
  [ms appendString: @",triggeredBy:"];
  [ms appendFormat: @"\"%@\"", __triggeredBy];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation DetailScreenReport

- (id) initWithScore: (double) score xVals: (NSArray *) xVals yVals: (NSArray *) yVals
{
  self = [super init];
  __score = score;
  __score_isset = YES;
  __xVals = [xVals retain];
  __xVals_isset = YES;
  __yVals = [yVals retain];
  __yVals_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"score"])
  {
    __score = [decoder decodeDoubleForKey: @"score"];
    __score_isset = YES;
  }
  if ([decoder containsValueForKey: @"xVals"])
  {
    __xVals = [[decoder decodeObjectForKey: @"xVals"] retain];
    __xVals_isset = YES;
  }
  if ([decoder containsValueForKey: @"yVals"])
  {
    __yVals = [[decoder decodeObjectForKey: @"yVals"] retain];
    __yVals_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__score_isset)
  {
    [encoder encodeDouble: __score forKey: @"score"];
  }
  if (__xVals_isset)
  {
    [encoder encodeObject: __xVals forKey: @"xVals"];
  }
  if (__yVals_isset)
  {
    [encoder encodeObject: __yVals forKey: @"yVals"];
  }
}

- (void) dealloc
{
  [__xVals release];
  [__yVals release];
  [super dealloc];
}

- (double) score {
  return __score;
}

- (void) setScore: (double) score {
  __score = score;
  __score_isset = YES;
}

- (BOOL) scoreIsSet {
  return __score_isset;
}

- (void) unsetScore {
  __score_isset = NO;
}

- (NSArray *) xVals {
  return [[__xVals retain] autorelease];
}

- (void) setXVals: (NSArray *) xVals {
  [xVals retain];
  [__xVals release];
  __xVals = xVals;
  __xVals_isset = YES;
}

- (BOOL) xValsIsSet {
  return __xVals_isset;
}

- (void) unsetXVals {
  [__xVals release];
  __xVals = nil;
  __xVals_isset = NO;
}

- (NSArray *) yVals {
  return [[__yVals retain] autorelease];
}

- (void) setYVals: (NSArray *) yVals {
  [yVals retain];
  [__yVals release];
  __yVals = yVals;
  __yVals_isset = YES;
}

- (BOOL) yValsIsSet {
  return __yVals_isset;
}

- (void) unsetYVals {
  [__yVals release];
  __yVals = nil;
  __yVals_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setScore: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_LIST) {
          int _size5;
          [inProtocol readListBeginReturningElementType: NULL size: &_size5];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size5];
          int _i6;
          for (_i6 = 0; _i6 < _size5; ++_i6)
          {
            double _elem7 = [inProtocol readDouble];
            [fieldValue addObject: [NSNumber numberWithDouble: _elem7]];
          }
          [inProtocol readListEnd];
          [self setXVals: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_LIST) {
          int _size8;
          [inProtocol readListBeginReturningElementType: NULL size: &_size8];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size8];
          int _i9;
          for (_i9 = 0; _i9 < _size8; ++_i9)
          {
            double _elem10 = [inProtocol readDouble];
            [fieldValue addObject: [NSNumber numberWithDouble: _elem10]];
          }
          [inProtocol readListEnd];
          [self setYVals: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"DetailScreenReport"];
  if (__score_isset) {
    [outProtocol writeFieldBeginWithName: @"score" type: TType_DOUBLE fieldID: 1];
    [outProtocol writeDouble: __score];
    [outProtocol writeFieldEnd];
  }
  if (__xVals_isset) {
    if (__xVals != nil) {
      [outProtocol writeFieldBeginWithName: @"xVals" type: TType_LIST fieldID: 2];
      {
        [outProtocol writeListBeginWithElementType: TType_DOUBLE size: [__xVals count]];
        int i12;
        for (i12 = 0; i12 < [__xVals count]; i12++)
        {
          [outProtocol writeDouble: [[__xVals objectAtIndex: i12] doubleValue]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__yVals_isset) {
    if (__yVals != nil) {
      [outProtocol writeFieldBeginWithName: @"yVals" type: TType_LIST fieldID: 3];
      {
        [outProtocol writeListBeginWithElementType: TType_DOUBLE size: [__yVals count]];
        int i14;
        for (i14 = 0; i14 < [__yVals count]; i14++)
        {
          [outProtocol writeDouble: [[__yVals objectAtIndex: i14] doubleValue]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"DetailScreenReport("];
  [ms appendString: @"score:"];
  [ms appendFormat: @"%f", __score];
  [ms appendString: @",xVals:"];
  [ms appendFormat: @"%@", __xVals];
  [ms appendString: @",yVals:"];
  [ms appendFormat: @"%@", __yVals];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation Reports

- (id) initWithJScore: (double) jScore os: (DetailScreenReport *) os osWithout: (DetailScreenReport *) osWithout model: (DetailScreenReport *) model modelWithout: (DetailScreenReport *) modelWithout similarApps: (DetailScreenReport *) similarApps similarAppsWithout: (DetailScreenReport *) similarAppsWithout changeSinceLastWeek: (double) changeSinceLastWeek changeSinceLastWeekPercentage: (double) changeSinceLastWeekPercentage
{
  self = [super init];
  __jScore = jScore;
  __jScore_isset = YES;
  __os = [os retain];
  __os_isset = YES;
  __osWithout = [osWithout retain];
  __osWithout_isset = YES;
  __model = [model retain];
  __model_isset = YES;
  __modelWithout = [modelWithout retain];
  __modelWithout_isset = YES;
  __similarApps = [similarApps retain];
  __similarApps_isset = YES;
  __similarAppsWithout = [similarAppsWithout retain];
  __similarAppsWithout_isset = YES;
  __changeSinceLastWeek = changeSinceLastWeek;
  __changeSinceLastWeek_isset = YES;
  __changeSinceLastWeekPercentage = changeSinceLastWeekPercentage;
  __changeSinceLastWeekPercentage_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"jScore"])
  {
    __jScore = [decoder decodeDoubleForKey: @"jScore"];
    __jScore_isset = YES;
  }
  if ([decoder containsValueForKey: @"os"])
  {
    __os = [[decoder decodeObjectForKey: @"os"] retain];
    __os_isset = YES;
  }
  if ([decoder containsValueForKey: @"osWithout"])
  {
    __osWithout = [[decoder decodeObjectForKey: @"osWithout"] retain];
    __osWithout_isset = YES;
  }
  if ([decoder containsValueForKey: @"model"])
  {
    __model = [[decoder decodeObjectForKey: @"model"] retain];
    __model_isset = YES;
  }
  if ([decoder containsValueForKey: @"modelWithout"])
  {
    __modelWithout = [[decoder decodeObjectForKey: @"modelWithout"] retain];
    __modelWithout_isset = YES;
  }
  if ([decoder containsValueForKey: @"similarApps"])
  {
    __similarApps = [[decoder decodeObjectForKey: @"similarApps"] retain];
    __similarApps_isset = YES;
  }
  if ([decoder containsValueForKey: @"similarAppsWithout"])
  {
    __similarAppsWithout = [[decoder decodeObjectForKey: @"similarAppsWithout"] retain];
    __similarAppsWithout_isset = YES;
  }
  if ([decoder containsValueForKey: @"changeSinceLastWeek"])
  {
    __changeSinceLastWeek = [decoder decodeDoubleForKey: @"changeSinceLastWeek"];
    __changeSinceLastWeek_isset = YES;
  }
  if ([decoder containsValueForKey: @"changeSinceLastWeekPercentage"])
  {
    __changeSinceLastWeekPercentage = [decoder decodeDoubleForKey: @"changeSinceLastWeekPercentage"];
    __changeSinceLastWeekPercentage_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__jScore_isset)
  {
    [encoder encodeDouble: __jScore forKey: @"jScore"];
  }
  if (__os_isset)
  {
    [encoder encodeObject: __os forKey: @"os"];
  }
  if (__osWithout_isset)
  {
    [encoder encodeObject: __osWithout forKey: @"osWithout"];
  }
  if (__model_isset)
  {
    [encoder encodeObject: __model forKey: @"model"];
  }
  if (__modelWithout_isset)
  {
    [encoder encodeObject: __modelWithout forKey: @"modelWithout"];
  }
  if (__similarApps_isset)
  {
    [encoder encodeObject: __similarApps forKey: @"similarApps"];
  }
  if (__similarAppsWithout_isset)
  {
    [encoder encodeObject: __similarAppsWithout forKey: @"similarAppsWithout"];
  }
  if (__changeSinceLastWeek_isset)
  {
    [encoder encodeDouble: __changeSinceLastWeek forKey: @"changeSinceLastWeek"];
  }
  if (__changeSinceLastWeekPercentage_isset)
  {
    [encoder encodeDouble: __changeSinceLastWeekPercentage forKey: @"changeSinceLastWeekPercentage"];
  }
}

- (void) dealloc
{
  [__os release];
  [__osWithout release];
  [__model release];
  [__modelWithout release];
  [__similarApps release];
  [__similarAppsWithout release];
  [super dealloc];
}

- (double) jScore {
  return __jScore;
}

- (void) setJScore: (double) jScore {
  __jScore = jScore;
  __jScore_isset = YES;
}

- (BOOL) jScoreIsSet {
  return __jScore_isset;
}

- (void) unsetJScore {
  __jScore_isset = NO;
}

- (DetailScreenReport *) os {
  return [[__os retain] autorelease];
}

- (void) setOs: (DetailScreenReport *) os {
  [os retain];
  [__os release];
  __os = os;
  __os_isset = YES;
}

- (BOOL) osIsSet {
  return __os_isset;
}

- (void) unsetOs {
  [__os release];
  __os = nil;
  __os_isset = NO;
}

- (DetailScreenReport *) osWithout {
  return [[__osWithout retain] autorelease];
}

- (void) setOsWithout: (DetailScreenReport *) osWithout {
  [osWithout retain];
  [__osWithout release];
  __osWithout = osWithout;
  __osWithout_isset = YES;
}

- (BOOL) osWithoutIsSet {
  return __osWithout_isset;
}

- (void) unsetOsWithout {
  [__osWithout release];
  __osWithout = nil;
  __osWithout_isset = NO;
}

- (DetailScreenReport *) model {
  return [[__model retain] autorelease];
}

- (void) setModel: (DetailScreenReport *) model {
  [model retain];
  [__model release];
  __model = model;
  __model_isset = YES;
}

- (BOOL) modelIsSet {
  return __model_isset;
}

- (void) unsetModel {
  [__model release];
  __model = nil;
  __model_isset = NO;
}

- (DetailScreenReport *) modelWithout {
  return [[__modelWithout retain] autorelease];
}

- (void) setModelWithout: (DetailScreenReport *) modelWithout {
  [modelWithout retain];
  [__modelWithout release];
  __modelWithout = modelWithout;
  __modelWithout_isset = YES;
}

- (BOOL) modelWithoutIsSet {
  return __modelWithout_isset;
}

- (void) unsetModelWithout {
  [__modelWithout release];
  __modelWithout = nil;
  __modelWithout_isset = NO;
}

- (DetailScreenReport *) similarApps {
  return [[__similarApps retain] autorelease];
}

- (void) setSimilarApps: (DetailScreenReport *) similarApps {
  [similarApps retain];
  [__similarApps release];
  __similarApps = similarApps;
  __similarApps_isset = YES;
}

- (BOOL) similarAppsIsSet {
  return __similarApps_isset;
}

- (void) unsetSimilarApps {
  [__similarApps release];
  __similarApps = nil;
  __similarApps_isset = NO;
}

- (DetailScreenReport *) similarAppsWithout {
  return [[__similarAppsWithout retain] autorelease];
}

- (void) setSimilarAppsWithout: (DetailScreenReport *) similarAppsWithout {
  [similarAppsWithout retain];
  [__similarAppsWithout release];
  __similarAppsWithout = similarAppsWithout;
  __similarAppsWithout_isset = YES;
}

- (BOOL) similarAppsWithoutIsSet {
  return __similarAppsWithout_isset;
}

- (void) unsetSimilarAppsWithout {
  [__similarAppsWithout release];
  __similarAppsWithout = nil;
  __similarAppsWithout_isset = NO;
}

- (double) changeSinceLastWeek {
  return __changeSinceLastWeek;
}

- (void) setChangeSinceLastWeek: (double) changeSinceLastWeek {
  __changeSinceLastWeek = changeSinceLastWeek;
  __changeSinceLastWeek_isset = YES;
}

- (BOOL) changeSinceLastWeekIsSet {
  return __changeSinceLastWeek_isset;
}

- (void) unsetChangeSinceLastWeek {
  __changeSinceLastWeek_isset = NO;
}

- (double) changeSinceLastWeekPercentage {
  return __changeSinceLastWeekPercentage;
}

- (void) setChangeSinceLastWeekPercentage: (double) changeSinceLastWeekPercentage {
  __changeSinceLastWeekPercentage = changeSinceLastWeekPercentage;
  __changeSinceLastWeekPercentage_isset = YES;
}

- (BOOL) changeSinceLastWeekPercentageIsSet {
  return __changeSinceLastWeekPercentage_isset;
}

- (void) unsetChangeSinceLastWeekPercentage {
  __changeSinceLastWeekPercentage_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setJScore: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          DetailScreenReport *fieldValue = [[DetailScreenReport alloc] init];
          [fieldValue read: inProtocol];
          [self setOs: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRUCT) {
          DetailScreenReport *fieldValue = [[DetailScreenReport alloc] init];
          [fieldValue read: inProtocol];
          [self setOsWithout: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRUCT) {
          DetailScreenReport *fieldValue = [[DetailScreenReport alloc] init];
          [fieldValue read: inProtocol];
          [self setModel: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRUCT) {
          DetailScreenReport *fieldValue = [[DetailScreenReport alloc] init];
          [fieldValue read: inProtocol];
          [self setModelWithout: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRUCT) {
          DetailScreenReport *fieldValue = [[DetailScreenReport alloc] init];
          [fieldValue read: inProtocol];
          [self setSimilarApps: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_STRUCT) {
          DetailScreenReport *fieldValue = [[DetailScreenReport alloc] init];
          [fieldValue read: inProtocol];
          [self setSimilarAppsWithout: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setChangeSinceLastWeek: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setChangeSinceLastWeekPercentage: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Reports"];
  if (__jScore_isset) {
    [outProtocol writeFieldBeginWithName: @"jScore" type: TType_DOUBLE fieldID: 1];
    [outProtocol writeDouble: __jScore];
    [outProtocol writeFieldEnd];
  }
  if (__os_isset) {
    if (__os != nil) {
      [outProtocol writeFieldBeginWithName: @"os" type: TType_STRUCT fieldID: 2];
      [__os write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__osWithout_isset) {
    if (__osWithout != nil) {
      [outProtocol writeFieldBeginWithName: @"osWithout" type: TType_STRUCT fieldID: 3];
      [__osWithout write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__model_isset) {
    if (__model != nil) {
      [outProtocol writeFieldBeginWithName: @"model" type: TType_STRUCT fieldID: 4];
      [__model write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__modelWithout_isset) {
    if (__modelWithout != nil) {
      [outProtocol writeFieldBeginWithName: @"modelWithout" type: TType_STRUCT fieldID: 5];
      [__modelWithout write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__similarApps_isset) {
    if (__similarApps != nil) {
      [outProtocol writeFieldBeginWithName: @"similarApps" type: TType_STRUCT fieldID: 6];
      [__similarApps write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__similarAppsWithout_isset) {
    if (__similarAppsWithout != nil) {
      [outProtocol writeFieldBeginWithName: @"similarAppsWithout" type: TType_STRUCT fieldID: 7];
      [__similarAppsWithout write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__changeSinceLastWeek_isset) {
    [outProtocol writeFieldBeginWithName: @"changeSinceLastWeek" type: TType_DOUBLE fieldID: 8];
    [outProtocol writeDouble: __changeSinceLastWeek];
    [outProtocol writeFieldEnd];
  }
  if (__changeSinceLastWeekPercentage_isset) {
    [outProtocol writeFieldBeginWithName: @"changeSinceLastWeekPercentage" type: TType_DOUBLE fieldID: 9];
    [outProtocol writeDouble: __changeSinceLastWeekPercentage];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Reports("];
  [ms appendString: @"jScore:"];
  [ms appendFormat: @"%f", __jScore];
  [ms appendString: @",os:"];
  [ms appendFormat: @"%@", __os];
  [ms appendString: @",osWithout:"];
  [ms appendFormat: @"%@", __osWithout];
  [ms appendString: @",model:"];
  [ms appendFormat: @"%@", __model];
  [ms appendString: @",modelWithout:"];
  [ms appendFormat: @"%@", __modelWithout];
  [ms appendString: @",similarApps:"];
  [ms appendFormat: @"%@", __similarApps];
  [ms appendString: @",similarAppsWithout:"];
  [ms appendFormat: @"%@", __similarAppsWithout];
  [ms appendString: @",changeSinceLastWeek:"];
  [ms appendFormat: @"%f", __changeSinceLastWeek];
  [ms appendString: @",changeSinceLastWeekPercentage:"];
  [ms appendFormat: @"%f", __changeSinceLastWeekPercentage];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation HogsBugs

- (id) initWithAppName: (NSString *) appName wDistance: (double) wDistance xVals: (NSArray *) xVals yVals: (NSArray *) yVals xValsWithout: (NSArray *) xValsWithout yValsWithout: (NSArray *) yValsWithout
{
  self = [super init];
  __appName = [appName retain];
  __appName_isset = YES;
  __wDistance = wDistance;
  __wDistance_isset = YES;
  __xVals = [xVals retain];
  __xVals_isset = YES;
  __yVals = [yVals retain];
  __yVals_isset = YES;
  __xValsWithout = [xValsWithout retain];
  __xValsWithout_isset = YES;
  __yValsWithout = [yValsWithout retain];
  __yValsWithout_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"appName"])
  {
    __appName = [[decoder decodeObjectForKey: @"appName"] retain];
    __appName_isset = YES;
  }
  if ([decoder containsValueForKey: @"wDistance"])
  {
    __wDistance = [decoder decodeDoubleForKey: @"wDistance"];
    __wDistance_isset = YES;
  }
  if ([decoder containsValueForKey: @"xVals"])
  {
    __xVals = [[decoder decodeObjectForKey: @"xVals"] retain];
    __xVals_isset = YES;
  }
  if ([decoder containsValueForKey: @"yVals"])
  {
    __yVals = [[decoder decodeObjectForKey: @"yVals"] retain];
    __yVals_isset = YES;
  }
  if ([decoder containsValueForKey: @"xValsWithout"])
  {
    __xValsWithout = [[decoder decodeObjectForKey: @"xValsWithout"] retain];
    __xValsWithout_isset = YES;
  }
  if ([decoder containsValueForKey: @"yValsWithout"])
  {
    __yValsWithout = [[decoder decodeObjectForKey: @"yValsWithout"] retain];
    __yValsWithout_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__appName_isset)
  {
    [encoder encodeObject: __appName forKey: @"appName"];
  }
  if (__wDistance_isset)
  {
    [encoder encodeDouble: __wDistance forKey: @"wDistance"];
  }
  if (__xVals_isset)
  {
    [encoder encodeObject: __xVals forKey: @"xVals"];
  }
  if (__yVals_isset)
  {
    [encoder encodeObject: __yVals forKey: @"yVals"];
  }
  if (__xValsWithout_isset)
  {
    [encoder encodeObject: __xValsWithout forKey: @"xValsWithout"];
  }
  if (__yValsWithout_isset)
  {
    [encoder encodeObject: __yValsWithout forKey: @"yValsWithout"];
  }
}

- (void) dealloc
{
  [__appName release];
  [__xVals release];
  [__yVals release];
  [__xValsWithout release];
  [__yValsWithout release];
  [super dealloc];
}

- (NSString *) appName {
  return [[__appName retain] autorelease];
}

- (void) setAppName: (NSString *) appName {
  [appName retain];
  [__appName release];
  __appName = appName;
  __appName_isset = YES;
}

- (BOOL) appNameIsSet {
  return __appName_isset;
}

- (void) unsetAppName {
  [__appName release];
  __appName = nil;
  __appName_isset = NO;
}

- (double) wDistance {
  return __wDistance;
}

- (void) setWDistance: (double) wDistance {
  __wDistance = wDistance;
  __wDistance_isset = YES;
}

- (BOOL) wDistanceIsSet {
  return __wDistance_isset;
}

- (void) unsetWDistance {
  __wDistance_isset = NO;
}

- (NSArray *) xVals {
  return [[__xVals retain] autorelease];
}

- (void) setXVals: (NSArray *) xVals {
  [xVals retain];
  [__xVals release];
  __xVals = xVals;
  __xVals_isset = YES;
}

- (BOOL) xValsIsSet {
  return __xVals_isset;
}

- (void) unsetXVals {
  [__xVals release];
  __xVals = nil;
  __xVals_isset = NO;
}

- (NSArray *) yVals {
  return [[__yVals retain] autorelease];
}

- (void) setYVals: (NSArray *) yVals {
  [yVals retain];
  [__yVals release];
  __yVals = yVals;
  __yVals_isset = YES;
}

- (BOOL) yValsIsSet {
  return __yVals_isset;
}

- (void) unsetYVals {
  [__yVals release];
  __yVals = nil;
  __yVals_isset = NO;
}

- (NSArray *) xValsWithout {
  return [[__xValsWithout retain] autorelease];
}

- (void) setXValsWithout: (NSArray *) xValsWithout {
  [xValsWithout retain];
  [__xValsWithout release];
  __xValsWithout = xValsWithout;
  __xValsWithout_isset = YES;
}

- (BOOL) xValsWithoutIsSet {
  return __xValsWithout_isset;
}

- (void) unsetXValsWithout {
  [__xValsWithout release];
  __xValsWithout = nil;
  __xValsWithout_isset = NO;
}

- (NSArray *) yValsWithout {
  return [[__yValsWithout retain] autorelease];
}

- (void) setYValsWithout: (NSArray *) yValsWithout {
  [yValsWithout retain];
  [__yValsWithout release];
  __yValsWithout = yValsWithout;
  __yValsWithout_isset = YES;
}

- (BOOL) yValsWithoutIsSet {
  return __yValsWithout_isset;
}

- (void) unsetYValsWithout {
  [__yValsWithout release];
  __yValsWithout = nil;
  __yValsWithout_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAppName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setWDistance: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_LIST) {
          int _size15;
          [inProtocol readListBeginReturningElementType: NULL size: &_size15];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size15];
          int _i16;
          for (_i16 = 0; _i16 < _size15; ++_i16)
          {
            double _elem17 = [inProtocol readDouble];
            [fieldValue addObject: [NSNumber numberWithDouble: _elem17]];
          }
          [inProtocol readListEnd];
          [self setXVals: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_LIST) {
          int _size18;
          [inProtocol readListBeginReturningElementType: NULL size: &_size18];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size18];
          int _i19;
          for (_i19 = 0; _i19 < _size18; ++_i19)
          {
            double _elem20 = [inProtocol readDouble];
            [fieldValue addObject: [NSNumber numberWithDouble: _elem20]];
          }
          [inProtocol readListEnd];
          [self setYVals: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_LIST) {
          int _size21;
          [inProtocol readListBeginReturningElementType: NULL size: &_size21];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size21];
          int _i22;
          for (_i22 = 0; _i22 < _size21; ++_i22)
          {
            double _elem23 = [inProtocol readDouble];
            [fieldValue addObject: [NSNumber numberWithDouble: _elem23]];
          }
          [inProtocol readListEnd];
          [self setXValsWithout: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_LIST) {
          int _size24;
          [inProtocol readListBeginReturningElementType: NULL size: &_size24];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size24];
          int _i25;
          for (_i25 = 0; _i25 < _size24; ++_i25)
          {
            double _elem26 = [inProtocol readDouble];
            [fieldValue addObject: [NSNumber numberWithDouble: _elem26]];
          }
          [inProtocol readListEnd];
          [self setYValsWithout: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"HogsBugs"];
  if (__appName_isset) {
    if (__appName != nil) {
      [outProtocol writeFieldBeginWithName: @"appName" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __appName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__wDistance_isset) {
    [outProtocol writeFieldBeginWithName: @"wDistance" type: TType_DOUBLE fieldID: 2];
    [outProtocol writeDouble: __wDistance];
    [outProtocol writeFieldEnd];
  }
  if (__xVals_isset) {
    if (__xVals != nil) {
      [outProtocol writeFieldBeginWithName: @"xVals" type: TType_LIST fieldID: 3];
      {
        [outProtocol writeListBeginWithElementType: TType_DOUBLE size: [__xVals count]];
        int i28;
        for (i28 = 0; i28 < [__xVals count]; i28++)
        {
          [outProtocol writeDouble: [[__xVals objectAtIndex: i28] doubleValue]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__yVals_isset) {
    if (__yVals != nil) {
      [outProtocol writeFieldBeginWithName: @"yVals" type: TType_LIST fieldID: 4];
      {
        [outProtocol writeListBeginWithElementType: TType_DOUBLE size: [__yVals count]];
        int i30;
        for (i30 = 0; i30 < [__yVals count]; i30++)
        {
          [outProtocol writeDouble: [[__yVals objectAtIndex: i30] doubleValue]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__xValsWithout_isset) {
    if (__xValsWithout != nil) {
      [outProtocol writeFieldBeginWithName: @"xValsWithout" type: TType_LIST fieldID: 5];
      {
        [outProtocol writeListBeginWithElementType: TType_DOUBLE size: [__xValsWithout count]];
        int i32;
        for (i32 = 0; i32 < [__xValsWithout count]; i32++)
        {
          [outProtocol writeDouble: [[__xValsWithout objectAtIndex: i32] doubleValue]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__yValsWithout_isset) {
    if (__yValsWithout != nil) {
      [outProtocol writeFieldBeginWithName: @"yValsWithout" type: TType_LIST fieldID: 6];
      {
        [outProtocol writeListBeginWithElementType: TType_DOUBLE size: [__yValsWithout count]];
        int i34;
        for (i34 = 0; i34 < [__yValsWithout count]; i34++)
        {
          [outProtocol writeDouble: [[__yValsWithout objectAtIndex: i34] doubleValue]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"HogsBugs("];
  [ms appendString: @"appName:"];
  [ms appendFormat: @"\"%@\"", __appName];
  [ms appendString: @",wDistance:"];
  [ms appendFormat: @"%f", __wDistance];
  [ms appendString: @",xVals:"];
  [ms appendFormat: @"%@", __xVals];
  [ms appendString: @",yVals:"];
  [ms appendFormat: @"%@", __yVals];
  [ms appendString: @",xValsWithout:"];
  [ms appendFormat: @"%@", __xValsWithout];
  [ms appendString: @",yValsWithout:"];
  [ms appendFormat: @"%@", __yValsWithout];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation HogBugReport

- (id) initWithUuId: (NSString *) uuId hbList: (HogsBugsList) hbList
{
  self = [super init];
  __uuId = [uuId retain];
  __uuId_isset = YES;
  __hbList = [hbList retain];
  __hbList_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"uuId"])
  {
    __uuId = [[decoder decodeObjectForKey: @"uuId"] retain];
    __uuId_isset = YES;
  }
  if ([decoder containsValueForKey: @"hbList"])
  {
    __hbList = [[decoder decodeObjectForKey: @"hbList"] retain];
    __hbList_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__uuId_isset)
  {
    [encoder encodeObject: __uuId forKey: @"uuId"];
  }
  if (__hbList_isset)
  {
    [encoder encodeObject: __hbList forKey: @"hbList"];
  }
}

- (void) dealloc
{
  [__uuId release];
  [__hbList release];
  [super dealloc];
}

- (NSString *) uuId {
  return [[__uuId retain] autorelease];
}

- (void) setUuId: (NSString *) uuId {
  [uuId retain];
  [__uuId release];
  __uuId = uuId;
  __uuId_isset = YES;
}

- (BOOL) uuIdIsSet {
  return __uuId_isset;
}

- (void) unsetUuId {
  [__uuId release];
  __uuId = nil;
  __uuId_isset = NO;
}

- (NSArray *) hbList {
  return [[__hbList retain] autorelease];
}

- (void) setHbList: (NSArray *) hbList {
  [hbList retain];
  [__hbList release];
  __hbList = hbList;
  __hbList_isset = YES;
}

- (BOOL) hbListIsSet {
  return __hbList_isset;
}

- (void) unsetHbList {
  [__hbList release];
  __hbList = nil;
  __hbList_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUuId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_LIST) {
          int _size35;
          [inProtocol readListBeginReturningElementType: NULL size: &_size35];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size35];
          int _i36;
          for (_i36 = 0; _i36 < _size35; ++_i36)
          {
            HogsBugs *_elem37 = [[HogsBugs alloc] init];
            [_elem37 read: inProtocol];
            [fieldValue addObject: _elem37];
            [_elem37 release];
          }
          [inProtocol readListEnd];
          [self setHbList: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"HogBugReport"];
  if (__uuId_isset) {
    if (__uuId != nil) {
      [outProtocol writeFieldBeginWithName: @"uuId" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __uuId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__hbList_isset) {
    if (__hbList != nil) {
      [outProtocol writeFieldBeginWithName: @"hbList" type: TType_LIST fieldID: 2];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__hbList count]];
        int i39;
        for (i39 = 0; i39 < [__hbList count]; i39++)
        {
          [[__hbList objectAtIndex: i39] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"HogBugReport("];
  [ms appendString: @"uuId:"];
  [ms appendFormat: @"\"%@\"", __uuId];
  [ms appendString: @",hbList:"];
  [ms appendFormat: @"%@", __hbList];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation Feature

- (id) initWithKey: (NSString *) key value: (NSString *) value
{
  self = [super init];
  __key = [key retain];
  __key_isset = YES;
  __value = [value retain];
  __value_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"key"])
  {
    __key = [[decoder decodeObjectForKey: @"key"] retain];
    __key_isset = YES;
  }
  if ([decoder containsValueForKey: @"value"])
  {
    __value = [[decoder decodeObjectForKey: @"value"] retain];
    __value_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__key_isset)
  {
    [encoder encodeObject: __key forKey: @"key"];
  }
  if (__value_isset)
  {
    [encoder encodeObject: __value forKey: @"value"];
  }
}

- (void) dealloc
{
  [__key release];
  [__value release];
  [super dealloc];
}

- (NSString *) key {
  return [[__key retain] autorelease];
}

- (void) setKey: (NSString *) key {
  [key retain];
  [__key release];
  __key = key;
  __key_isset = YES;
}

- (BOOL) keyIsSet {
  return __key_isset;
}

- (void) unsetKey {
  [__key release];
  __key = nil;
  __key_isset = NO;
}

- (NSString *) value {
  return [[__value retain] autorelease];
}

- (void) setValue: (NSString *) value {
  [value retain];
  [__value release];
  __value = value;
  __value_isset = YES;
}

- (BOOL) valueIsSet {
  return __value_isset;
}

- (void) unsetValue {
  [__value release];
  __value = nil;
  __value_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setKey: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setValue: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Feature"];
  if (__key_isset) {
    if (__key != nil) {
      [outProtocol writeFieldBeginWithName: @"key" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __key];
      [outProtocol writeFieldEnd];
    }
  }
  if (__value_isset) {
    if (__value != nil) {
      [outProtocol writeFieldBeginWithName: @"value" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __value];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Feature("];
  [ms appendString: @"key:"];
  [ms appendFormat: @"\"%@\"", __key];
  [ms appendString: @",value:"];
  [ms appendFormat: @"\"%@\"", __value];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface registerMe_args : NSObject <NSCoding> {
  Registration * __registration;

  BOOL __registration_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=registration, setter=setRegistration:) Registration * registration;
#endif

- (id) initWithRegistration: (Registration *) registration;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (Registration *) registration;
- (void) setRegistration: (Registration *) registration;
- (BOOL) registrationIsSet;

@end

@implementation registerMe_args

- (id) initWithRegistration: (Registration *) registration
{
  self = [super init];
  __registration = [registration retain];
  __registration_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"registration"])
  {
    __registration = [[decoder decodeObjectForKey: @"registration"] retain];
    __registration_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__registration_isset)
  {
    [encoder encodeObject: __registration forKey: @"registration"];
  }
}

- (void) dealloc
{
  [__registration release];
  [super dealloc];
}

- (Registration *) registration {
  return [[__registration retain] autorelease];
}

- (void) setRegistration: (Registration *) registration {
  [registration retain];
  [__registration release];
  __registration = registration;
  __registration_isset = YES;
}

- (BOOL) registrationIsSet {
  return __registration_isset;
}

- (void) unsetRegistration {
  [__registration release];
  __registration = nil;
  __registration_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          Registration *fieldValue = [[Registration alloc] init];
          [fieldValue read: inProtocol];
          [self setRegistration: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"registerMe_args"];
  if (__registration_isset) {
    if (__registration != nil) {
      [outProtocol writeFieldBeginWithName: @"registration" type: TType_STRUCT fieldID: 1];
      [__registration write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"registerMe_args("];
  [ms appendString: @"registration:"];
  [ms appendFormat: @"%@", __registration];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface uploadSample_args : NSObject <NSCoding> {
  Sample * __sample;

  BOOL __sample_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=sample, setter=setSample:) Sample * sample;
#endif

- (id) initWithSample: (Sample *) sample;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (Sample *) sample;
- (void) setSample: (Sample *) sample;
- (BOOL) sampleIsSet;

@end

@implementation uploadSample_args

- (id) initWithSample: (Sample *) sample
{
  self = [super init];
  __sample = [sample retain];
  __sample_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"sample"])
  {
    __sample = [[decoder decodeObjectForKey: @"sample"] retain];
    __sample_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__sample_isset)
  {
    [encoder encodeObject: __sample forKey: @"sample"];
  }
}

- (void) dealloc
{
  [__sample release];
  [super dealloc];
}

- (Sample *) sample {
  return [[__sample retain] autorelease];
}

- (void) setSample: (Sample *) sample {
  [sample retain];
  [__sample release];
  __sample = sample;
  __sample_isset = YES;
}

- (BOOL) sampleIsSet {
  return __sample_isset;
}

- (void) unsetSample {
  [__sample release];
  __sample = nil;
  __sample_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          Sample *fieldValue = [[Sample alloc] init];
          [fieldValue read: inProtocol];
          [self setSample: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"uploadSample_args"];
  if (__sample_isset) {
    if (__sample != nil) {
      [outProtocol writeFieldBeginWithName: @"sample" type: TType_STRUCT fieldID: 1];
      [__sample write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"uploadSample_args("];
  [ms appendString: @"sample:"];
  [ms appendFormat: @"%@", __sample];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface UploadSample_result : NSObject <NSCoding> {
  BOOL __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) BOOL success;
#endif

- (id) initWithSuccess: (BOOL) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (BOOL) success;
- (void) setSuccess: (BOOL) success;
- (BOOL) successIsSet;

@end

@implementation UploadSample_result

- (id) initWithSuccess: (BOOL) success
{
  self = [super init];
  __success = success;
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [decoder decodeBoolForKey: @"success"];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeBool: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [super dealloc];
}

- (BOOL) success {
  return __success;
}

- (void) setSuccess: (BOOL) success {
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"UploadSample_result"];

  if (__success_isset) {
    [outProtocol writeFieldBeginWithName: @"success" type: TType_BOOL fieldID: 0];
    [outProtocol writeBool: __success];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"UploadSample_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%i", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface getReports_args : NSObject <NSCoding> {
  NSString * __uuId;
  FeatureList __features;

  BOOL __uuId_isset;
  BOOL __features_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=uuId, setter=setUuId:) NSString * uuId;
@property (nonatomic, retain, getter=features, setter=setFeatures:) FeatureList features;
#endif

- (id) initWithUuId: (NSString *) uuId features: (FeatureList) features;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (NSString *) uuId;
- (void) setUuId: (NSString *) uuId;
- (BOOL) uuIdIsSet;

- (FeatureList) features;
- (void) setFeatures: (FeatureList) features;
- (BOOL) featuresIsSet;

@end

@implementation getReports_args

- (id) initWithUuId: (NSString *) uuId features: (FeatureList) features
{
  self = [super init];
  __uuId = [uuId retain];
  __uuId_isset = YES;
  __features = [features retain];
  __features_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"uuId"])
  {
    __uuId = [[decoder decodeObjectForKey: @"uuId"] retain];
    __uuId_isset = YES;
  }
  if ([decoder containsValueForKey: @"features"])
  {
    __features = [[decoder decodeObjectForKey: @"features"] retain];
    __features_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__uuId_isset)
  {
    [encoder encodeObject: __uuId forKey: @"uuId"];
  }
  if (__features_isset)
  {
    [encoder encodeObject: __features forKey: @"features"];
  }
}

- (void) dealloc
{
  [__uuId release];
  [__features release];
  [super dealloc];
}

- (NSString *) uuId {
  return [[__uuId retain] autorelease];
}

- (void) setUuId: (NSString *) uuId {
  [uuId retain];
  [__uuId release];
  __uuId = uuId;
  __uuId_isset = YES;
}

- (BOOL) uuIdIsSet {
  return __uuId_isset;
}

- (void) unsetUuId {
  [__uuId release];
  __uuId = nil;
  __uuId_isset = NO;
}

- (NSArray *) features {
  return [[__features retain] autorelease];
}

- (void) setFeatures: (NSArray *) features {
  [features retain];
  [__features release];
  __features = features;
  __features_isset = YES;
}

- (BOOL) featuresIsSet {
  return __features_isset;
}

- (void) unsetFeatures {
  [__features release];
  __features = nil;
  __features_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUuId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_LIST) {
          int _size40;
          [inProtocol readListBeginReturningElementType: NULL size: &_size40];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size40];
          int _i41;
          for (_i41 = 0; _i41 < _size40; ++_i41)
          {
            Feature *_elem42 = [[Feature alloc] init];
            [_elem42 read: inProtocol];
            [fieldValue addObject: _elem42];
            [_elem42 release];
          }
          [inProtocol readListEnd];
          [self setFeatures: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getReports_args"];
  if (__uuId_isset) {
    if (__uuId != nil) {
      [outProtocol writeFieldBeginWithName: @"uuId" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __uuId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__features_isset) {
    if (__features != nil) {
      [outProtocol writeFieldBeginWithName: @"features" type: TType_LIST fieldID: 2];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__features count]];
        int i44;
        for (i44 = 0; i44 < [__features count]; i44++)
        {
          [[__features objectAtIndex: i44] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"getReports_args("];
  [ms appendString: @"uuId:"];
  [ms appendFormat: @"\"%@\"", __uuId];
  [ms appendString: @",features:"];
  [ms appendFormat: @"%@", __features];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GetReports_result : NSObject <NSCoding> {
  Reports * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) Reports * success;
#endif

- (id) initWithSuccess: (Reports *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (Reports *) success;
- (void) setSuccess: (Reports *) success;
- (BOOL) successIsSet;

@end

@implementation GetReports_result

- (id) initWithSuccess: (Reports *) success
{
  self = [super init];
  __success = [success retain];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release];
  [super dealloc];
}

- (Reports *) success {
  return [[__success retain] autorelease];
}

- (void) setSuccess: (Reports *) success {
  [success retain];
  [__success release];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          Reports *fieldValue = [[Reports alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetReports_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetReports_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface getHogOrBugReport_args : NSObject <NSCoding> {
  NSString * __uuId;
  FeatureList __features;

  BOOL __uuId_isset;
  BOOL __features_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=uuId, setter=setUuId:) NSString * uuId;
@property (nonatomic, retain, getter=features, setter=setFeatures:) FeatureList features;
#endif

- (id) initWithUuId: (NSString *) uuId features: (FeatureList) features;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (NSString *) uuId;
- (void) setUuId: (NSString *) uuId;
- (BOOL) uuIdIsSet;

- (FeatureList) features;
- (void) setFeatures: (FeatureList) features;
- (BOOL) featuresIsSet;

@end

@implementation getHogOrBugReport_args

- (id) initWithUuId: (NSString *) uuId features: (FeatureList) features
{
  self = [super init];
  __uuId = [uuId retain];
  __uuId_isset = YES;
  __features = [features retain];
  __features_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"uuId"])
  {
    __uuId = [[decoder decodeObjectForKey: @"uuId"] retain];
    __uuId_isset = YES;
  }
  if ([decoder containsValueForKey: @"features"])
  {
    __features = [[decoder decodeObjectForKey: @"features"] retain];
    __features_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__uuId_isset)
  {
    [encoder encodeObject: __uuId forKey: @"uuId"];
  }
  if (__features_isset)
  {
    [encoder encodeObject: __features forKey: @"features"];
  }
}

- (void) dealloc
{
  [__uuId release];
  [__features release];
  [super dealloc];
}

- (NSString *) uuId {
  return [[__uuId retain] autorelease];
}

- (void) setUuId: (NSString *) uuId {
  [uuId retain];
  [__uuId release];
  __uuId = uuId;
  __uuId_isset = YES;
}

- (BOOL) uuIdIsSet {
  return __uuId_isset;
}

- (void) unsetUuId {
  [__uuId release];
  __uuId = nil;
  __uuId_isset = NO;
}

- (NSArray *) features {
  return [[__features retain] autorelease];
}

- (void) setFeatures: (NSArray *) features {
  [features retain];
  [__features release];
  __features = features;
  __features_isset = YES;
}

- (BOOL) featuresIsSet {
  return __features_isset;
}

- (void) unsetFeatures {
  [__features release];
  __features = nil;
  __features_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUuId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_LIST) {
          int _size45;
          [inProtocol readListBeginReturningElementType: NULL size: &_size45];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size45];
          int _i46;
          for (_i46 = 0; _i46 < _size45; ++_i46)
          {
            Feature *_elem47 = [[Feature alloc] init];
            [_elem47 read: inProtocol];
            [fieldValue addObject: _elem47];
            [_elem47 release];
          }
          [inProtocol readListEnd];
          [self setFeatures: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getHogOrBugReport_args"];
  if (__uuId_isset) {
    if (__uuId != nil) {
      [outProtocol writeFieldBeginWithName: @"uuId" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __uuId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__features_isset) {
    if (__features != nil) {
      [outProtocol writeFieldBeginWithName: @"features" type: TType_LIST fieldID: 2];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__features count]];
        int i49;
        for (i49 = 0; i49 < [__features count]; i49++)
        {
          [[__features objectAtIndex: i49] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"getHogOrBugReport_args("];
  [ms appendString: @"uuId:"];
  [ms appendFormat: @"\"%@\"", __uuId];
  [ms appendString: @",features:"];
  [ms appendFormat: @"%@", __features];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GetHogOrBugReport_result : NSObject <NSCoding> {
  HogBugReport * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) HogBugReport * success;
#endif

- (id) initWithSuccess: (HogBugReport *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (HogBugReport *) success;
- (void) setSuccess: (HogBugReport *) success;
- (BOOL) successIsSet;

@end

@implementation GetHogOrBugReport_result

- (id) initWithSuccess: (HogBugReport *) success
{
  self = [super init];
  __success = [success retain];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release];
  [super dealloc];
}

- (HogBugReport *) success {
  return [[__success retain] autorelease];
}

- (void) setSuccess: (HogBugReport *) success {
  [success retain];
  [__success release];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          HogBugReport *fieldValue = [[HogBugReport alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetHogOrBugReport_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetHogOrBugReport_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation CaratServiceClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
  return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
  self = [super init];
  inProtocol = [anInProtocol retain];
  outProtocol = [anOutProtocol retain];
  return self;
}

- (void) dealloc
{
  [inProtocol release];
  [outProtocol release];
  [super dealloc];
}

- (void) send_registerMe: (Registration *) registration
{
  [outProtocol writeMessageBeginWithName: @"registerMe" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"registerMe_args"];
  if (registration != nil)  {
    [outProtocol writeFieldBeginWithName: @"registration" type: TType_STRUCT fieldID: 1];
    [registration write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (void) registerMe: (Registration *) registration
{
  [self send_registerMe: registration];
}

- (void) send_uploadSample: (Sample *) sample
{
  [outProtocol writeMessageBeginWithName: @"uploadSample" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"uploadSample_args"];
  if (sample != nil)  {
    [outProtocol writeFieldBeginWithName: @"sample" type: TType_STRUCT fieldID: 1];
    [sample write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (BOOL) recv_uploadSample
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  UploadSample_result * result = [[[UploadSample_result alloc] init] autorelease];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"uploadSample failed: unknown result"];
}

- (BOOL) uploadSample: (Sample *) sample
{
  [self send_uploadSample: sample];
  return [self recv_uploadSample];
}

- (void) send_getReports: (NSString *) uuId : (FeatureList) features
{
  [outProtocol writeMessageBeginWithName: @"getReports" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getReports_args"];
  if (uuId != nil)  {
    [outProtocol writeFieldBeginWithName: @"uuId" type: TType_STRING fieldID: 1];
    [outProtocol writeString: uuId];
    [outProtocol writeFieldEnd];
  }
  if (features != nil)  {
    [outProtocol writeFieldBeginWithName: @"features" type: TType_LIST fieldID: 2];
    {
      [outProtocol writeListBeginWithElementType: TType_STRUCT size: [features count]];
      int i51;
      for (i51 = 0; i51 < [features count]; i51++)
      {
        [[features objectAtIndex: i51] write: outProtocol];
      }
      [outProtocol writeListEnd];
    }
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (Reports *) recv_getReports
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  GetReports_result * result = [[[GetReports_result alloc] init] autorelease];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getReports failed: unknown result"];
}

- (Reports *) getReports: (NSString *) uuId : (FeatureList) features
{
  [self send_getReports: uuId : features];
  return [self recv_getReports];
}

- (void) send_getHogOrBugReport: (NSString *) uuId : (FeatureList) features
{
  [outProtocol writeMessageBeginWithName: @"getHogOrBugReport" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getHogOrBugReport_args"];
  if (uuId != nil)  {
    [outProtocol writeFieldBeginWithName: @"uuId" type: TType_STRING fieldID: 1];
    [outProtocol writeString: uuId];
    [outProtocol writeFieldEnd];
  }
  if (features != nil)  {
    [outProtocol writeFieldBeginWithName: @"features" type: TType_LIST fieldID: 2];
    {
      [outProtocol writeListBeginWithElementType: TType_STRUCT size: [features count]];
      int i53;
      for (i53 = 0; i53 < [features count]; i53++)
      {
        [[features objectAtIndex: i53] write: outProtocol];
      }
      [outProtocol writeListEnd];
    }
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (HogBugReport *) recv_getHogOrBugReport
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  GetHogOrBugReport_result * result = [[[GetHogOrBugReport_result alloc] init] autorelease];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getHogOrBugReport failed: unknown result"];
}

- (HogBugReport *) getHogOrBugReport: (NSString *) uuId : (FeatureList) features
{
  [self send_getHogOrBugReport: uuId : features];
  return [self recv_getHogOrBugReport];
}

@end

@implementation CaratServiceProcessor

- (id) initWithCaratService: (id <CaratService>) service
{
  self = [super init];
  if (!self) {
    return nil;
  }
  mService = [service retain];
  mMethodMap = [[NSMutableDictionary dictionary] retain];
  {
    SEL s = @selector(process_registerMe_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"registerMe"];
  }
  {
    SEL s = @selector(process_uploadSample_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"uploadSample"];
  }
  {
    SEL s = @selector(process_getReports_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"getReports"];
  }
  {
    SEL s = @selector(process_getHogOrBugReport_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"getHogOrBugReport"];
  }
  return self;
}

- (id<CaratService>) service
{
  return [[mService retain] autorelease];
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
{
  NSString * messageName;
  int messageType;
  int seqID;
  [inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID];
  NSInvocation * invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    TApplicationException * x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [NSString stringWithFormat: @"Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) process_uploadSample_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  uploadSample_args * args = [[uploadSample_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  UploadSample_result * result = [[UploadSample_result alloc] init];
  [result setSuccess: [mService uploadSample: [args sample]]];
  [outProtocol writeMessageBeginWithName: @"uploadSample"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release];
  [args release];
}

- (void) process_getReports_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  getReports_args * args = [[getReports_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  GetReports_result * result = [[GetReports_result alloc] init];
  [result setSuccess: [mService getReports: [args uuId]: [args features]]];
  [outProtocol writeMessageBeginWithName: @"getReports"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release];
  [args release];
}

- (void) process_getHogOrBugReport_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  getHogOrBugReport_args * args = [[getHogOrBugReport_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  GetHogOrBugReport_result * result = [[GetHogOrBugReport_result alloc] init];
  [result setSuccess: [mService getHogOrBugReport: [args uuId]: [args features]]];
  [outProtocol writeMessageBeginWithName: @"getHogOrBugReport"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release];
  [args release];
}

- (void) dealloc
{
  [mService release];
  [mMethodMap release];
  [super dealloc];
}

@end

